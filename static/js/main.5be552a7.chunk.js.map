{"version":3,"sources":["modules/dataController/actions.js","modules/dataController/firestore.js","modules/dataController/reducer.js","modules/dataController/store.js","modules/dataController/AppDataController.js","components/Action Commands/ActionButton.js","components/Header.js","components/Action Commands/ActionMenuItem.js","modules/dataController/TaskDataController.js","components/Action Commands/ActionMenu.js","components/newSection/taskPriorityButton.js","modules/dataController/SelectionMaintainingInput.js","components/Tasks/Task.js","components/newSection/completedSectionButton.js","components/newSection/completedSection.js","components/Tasks/TaskList.js","components/newSection/SectionButton.js","components/newSection/sectionAddTask.js","components/newSection/priorityButton.js","components/newSection/shareSectionButton.js","components/newSection/removeSharedButton.js","components/newSection/SectionBar.js","components/newSection/SectionContainer.js","components/newSection/completedSectionTask.js","components/newSection/completedSectionsTaskList.js","components/newSection/SectionList.js","components/otherDisplays/sideBarButton.js","components/otherDisplays/sideBarElement.js","components/otherDisplays/sideBarCompletedSection.js","components/otherDisplays/sideBarList.js","components/otherDisplays/sideListElementTask.js","components/otherDisplays/sideListElement.js","components/otherDisplays/sideListCompletedSectionTask.js","components/otherDisplays/sideListCompletedSection.js","components/otherDisplays/sideList.js","components/SideBarBackground.js","components/newSection/priorityMenuItem.js","components/newSection/priorityMenu.js","components/newSection/shareMenu.js","components/newSection/removeSharedMenu.js","App.js","index.js"],"names":["CREATE_TASK","UPDATE_TASK_TEXT","TOGGLE_TASK_COMPLETION","DELETE_ALL_COMPLETED_TASK","TOGGLE_TODO_LIST","TOGGLE_COMPLETED_LIST","SHOW_MENU","HIDE_MENU","SHOW_UNDO","HIDE_UNDO","CREATE_SECTION","DELETE_SECTION","UPDATE_SECTION_TEXT","TOGGLE_SECTION","CLEAR_ALL","GET_TOGGLED","PUSH_COMPLETED_TASK","TOGGLE_COMPLETED_SECTION_BUTTON","SET_SECTION_TO_STACK","SET_TASKS_TO_STACK","UPDATE_TASK_PRIORITY","PUSH_SELECTED_SECTION_ACTION","SHOW_PRIORITY_MENU","HIDE_PRIORITY_MENU","SET_SECTION_PRIORITY","SET_USER_ID","SET_USER_EMAIL","TOGGLE_SIGNUP_MENU","TOGGLE_SIGN_IN_MENU","TOGGLE_SHARE_MENU","SHARE_TASK","REMOVE_TASK","SET_VALID_SHARE_EMAIL","SET_SHARED_WITH_EMAIL","TOGGLE_SHOW_REMOVE","firebase","initializeApp","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","database","firestore","collectionName","initialState","sectionStack","taskStack","sectionsToggled","completedTasks","showUndo","showMenu","showPriorityMenu","showCompletedTasks","selectedSection","userID","userEmail","showSignUpMenu","showSignInMenu","showShareMenu","validShareEmail","shareEmailPressed","showRemove","createTask","state","sectionIdentifier","identifier","uuidv4","collection","doc","set","id","isCompleted","text","timeMade","Date","priority","updateTaskText","update","toggleTaskCompletion","isToggled","deleteAllCompletedTasks","map","x","index","delete","toggleCompletedList","showCompleted","toggleToDoList","showTodo","hideMenu","hideUndo","deleteSection","sections","filter","getToggledStatus","sectionWithId","find","section","createSection","title","sortType","owner","sharedWith","updateSectionText","toggleSection","newToggledSections","includes","taskIndex","indexOf","splice","push","clearAll","stackList","taskList","length","pushCompletedTask","contents","Task","toggleCompletedSection","newToggledStatus","setSectionToStack","setTasksToStack","updateTaskPriority","value","newValue","pushSelectedSection","hidePriorityMenu","setSectionPriority","setUserId","userId","setUserEmail","newuserEmail","toggleSignUpMenu","toggleSignInMenu","toggleShareMenu","shareTask","inputEmail","sharedWithList","removeTask","newList","email","setValidShareEmail","match","setSharedWithEmail","toggleShowRemove","store","createStore","action","type","payload","AppDataController","dispatch","getState","pushSelectedSectionAction","setUserIdAction","setUserEmailAction","setValidShareEmailAction","setSharedWithEmailAction","handleOnClick","ActionButton","class","onClick","icon","faPlus","Header","props","auth","signOut","className","faUndoAlt","ActionMenuItem","command","TaskDataController","newText","updateTaskTextAction","toggleTaskCompletionAction","createTaskAction","deleteTaskAction","tasks","task","deleteSectionAction","updateSectionTextAction","toggleSectionAction","getToggledStatusAction","pushCompletedTaskAction","setSectionToStackAction","setTasksToStackAction","updateTaskPriorityAction","setSectionPriorityAction","shareTaskAction","fireStoreList","menuItems","deleteAllCompleted","faMinus","clearAllSectionsAndTasks","ActionMenu","query","useCollection","docs","data","closeMenu","menuItem","key","TaskPriorityButton","priorityIcon","sectionText","sectionTitle","faSortDown","faSort","faSortUp","e","SelectionMaintainingInput","onChange","rest","useState","cursor","setCursor","ref","useRef","useEffect","input","current","setSelectionRange","target","selectionStart","cssID","currentSectionText","getAriaCheckbox","alt","checked","getAriaTask","event","currentTarget","handleTextEvent","onFocus","connect","faAngleDown","faAngleRight","ariaText","toggledState","CompletedSection","TaskList","SectionButton","SectionAddTaskButton","PrioritySortButton","faChartBar","ShareSectionButton","faShareAlt","RemoveSectionSharedButton","SectionBar","classes","isOwned","ownProps","isToggledList","taskRef","stateCompletedList","allTasks","concat","fireStoreCompletedList","sort","task1","task2","task1Text","toUpperCase","task2Text","task1date","task2date","task1priority","task2priority","CompletedSectionTask","CompletedSectionsTaskList","isCompletedTasksToggled","SideBarButton","document","getElementById","scrollIntoView","behavior","block","inline","SideBarElement","SideBarCompletedSection","Sidebar","SideListElementTask","SideListElement","SideListCompletedSectionTask","SideList","SideBarBackground","PriorityMenuItem","alphaSort","dateSort","prioritySort","resetSort","faSortAmountDownAlt","faSortAmountUpAlt","currentSortType","sortTitle","isValidEmail","isPressed","placeholder","setTimeout","RemoveSharedMenu","googleProvider","GoogleAuthProvider","verifyEmail","console","log","currentUser","sendEmailVerification","SignIn","useSignInWithEmailAndPassword","signInWithEmailAndPassword","userCredential","loading","error","message","SignUp","useCreateUserWithEmailAndPassword","createUserWithEmailAndPassword","AppSignedIn","user","uid","sharedQuery","where","valueShared","sharedFireStoreList","section1","section2","section1Owner","section2Owner","menuIsActive","priorityMenuIsActive","shareMenuStatus","removeMenuStatus","signInMenuStatus","signUpMenuStatus","undoIsActive","cssTransparencyID","useAuthState","SignUpMenu","SignInMenu","VerifyYourEmail","emailVerified","signInWithPopup","ReactDOM","render"],"mappings":"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","file":"static/js/main.5be552a7.chunk.js","sourcesContent":["export const CREATE_TASK = \"createTask\"\r\nexport const DELETE_TASK = \"deleteTask\"\r\nexport const UPDATE_TASK_TEXT = \"updateTaskText\"\r\nexport const TOGGLE_TASK_COMPLETION = \"toggleTaskCompletion\"\r\nexport const DELETE_ALL_COMPLETED_TASK = \"deleteAllCompletedTasks\"\r\nexport const TOGGLE_TODO_LIST = \"toggleTodoList\"\r\nexport const TOGGLE_COMPLETED_LIST = \"toggleCompletedList\"\r\nexport const SHOW_MENU = \"showMenu\"\r\nexport const HIDE_MENU = \"hideMenu\"\r\nexport const UNDO_TASK = \"undoTask\"\r\nexport const SHOW_UNDO = \"showUndo\"\r\nexport const HIDE_UNDO = \"hideUndo\"\r\n\r\nexport const CREATE_SECTION = \"createSection\"\r\nexport const DELETE_SECTION = \"deleteSection\"\r\nexport const UPDATE_SECTION_TEXT = \"updateSectionText\"\r\nexport const TOGGLE_SECTION = \"toggleSection\"\r\nexport const CLEAR_ALL = \"clearAllSectionsAndTasks\"\r\nexport const GET_TOGGLED = \"getToggledStatus\"\r\nexport const PUSH_COMPLETED_TASK = \"pushCompletedTask\"\r\nexport const TOGGLE_COMPLETED_SECTION_BUTTON = \"toggleCompletedSection\"\r\nexport const SET_SECTION_TO_STACK = \"setSectionToStack\"\r\nexport const SET_TASKS_TO_STACK = \"setTasksToStack\"\r\nexport const UPDATE_TASK_PRIORITY = \"updateTaskPriority\"\r\nexport const PUSH_SELECTED_SECTION_ACTION = \"pushSelectedSectionAction\"\r\nexport const SHOW_PRIORITY_MENU = \"showPriorityMenu\"\r\nexport const HIDE_PRIORITY_MENU = \"hidePriorityMenu\"\r\nexport const SET_SECTION_PRIORITY = \"setSectionPriority\"\r\nexport const SET_USER_ID = \"setUserId\"\r\nexport const SET_USER_EMAIL = \"setUserEmail\"\r\nexport const TOGGLE_SIGNUP_MENU = \"toggleSignUpMenu\"\r\nexport const TOGGLE_SIGN_IN_MENU = \"toggleSignInMenu\"\r\nexport const TOGGLE_SHARE_MENU = \"showShareMenu\"\r\nexport const SHARE_TASK = \"shareTask\"\r\nexport const REMOVE_TASK = \"removeTask\"\r\nexport const SET_VALID_SHARE_EMAIL = \"setValidShareEmail\"\r\nexport const SET_SHARED_WITH_EMAIL = \"setSharedWithEmail\"\r\nexport const TOGGLE_SHOW_REMOVE = \"toggleShowRemove\"\r\n\r\n\r\n\r\n\r\n\r\nexport const showUndoAction = () => ({type:SHOW_UNDO})\r\nexport const hideUndoAction = () => ({type:HIDE_UNDO})\r\nexport const undoTaskAction = () => ({type:UNDO_TASK})\r\nexport const showMenuAction = () => ({type:SHOW_MENU})\r\nexport const hideMenuAction = () => ({type:HIDE_MENU})\r\nexport const createTaskAction = (sectionIdentifier) => ({type:CREATE_TASK, payload:{sectionIdentifier}})\r\nexport const deleteTaskAction = (id) => ({type:DELETE_TASK, payload:{id}})\r\nexport const updateTaskTextAction = (id, identifier, text) => ({type: UPDATE_TASK_TEXT,payload: {id, identifier, text}})\r\nexport const toggleTaskCompletionAction = (id, identifier, isToggled) => ({type: TOGGLE_TASK_COMPLETION,payload:{id, identifier, isToggled}})\r\nexport const deleteAllCompletedTasksAction = () => ({type: DELETE_ALL_COMPLETED_TASK})\r\nexport const toggleCompletedListAction = () => ({type:TOGGLE_COMPLETED_LIST})\r\nexport const toggleToDoListAction = () => ({type:TOGGLE_TODO_LIST})\r\n\r\n// functions for creating/deleting/editing section properties\r\n\r\nexport const createSectionAction = () => ({type: CREATE_SECTION})\r\nexport const deleteSectionAction = (sectionIdentifier) => ({type: DELETE_SECTION, payload: {sectionIdentifier}})\r\nexport const updateSectionTextAction = (sectionIdentifier,text) => ({type: UPDATE_SECTION_TEXT,payload: {sectionIdentifier, text}})\r\n\r\n// function for toggling a section by just taking in id\r\n\r\nexport const toggleSectionAction = (sectionIdentifier) => ({type: TOGGLE_SECTION, payload: {sectionIdentifier}})\r\n\r\n// function for clearing all sections and resetting all\r\n\r\nexport const clearAllSectionsAndTasksAction = () => ({type: CLEAR_ALL})\r\n\r\n// functions for showing tasks stored in firestore or getting section/task properties.\r\n\r\nexport const getToggledStatusAction = (sectionIdentifier) => ({type: GET_TOGGLED, payload: {sectionIdentifier}})\r\n\r\nexport const pushCompletedTaskAction = (Task) => ({type: PUSH_COMPLETED_TASK, payload:{Task}})\r\n\r\nexport const toggleCompletedSectionAction = () => ({type: TOGGLE_COMPLETED_SECTION_BUTTON})\r\n\r\n// functions for pushing tasks or sections to the state\r\n\r\nexport const setSectionToStackAction = (stackList) => ({type: SET_SECTION_TO_STACK, payload:{stackList}})\r\n\r\nexport const setTasksToStackAction = (taskList) => ({type: SET_TASKS_TO_STACK, payload:{taskList}})\r\n\r\n// functions for showing priority menu/hiding it/setting the priority/getting the current selected section\r\n\r\nexport const showPriorityMenuAction = () => ({type: SHOW_PRIORITY_MENU})\r\n\r\nexport const hidePriorityMenuAction = () => ({type: HIDE_PRIORITY_MENU})\r\n\r\nexport const updateTaskPriorityAction = (id, sectionIdentifier, value) => ({type: UPDATE_TASK_PRIORITY, payload:{id, sectionIdentifier, value}})\r\n\r\nexport const setSectionPriorityAction = (value) => ({type: SET_SECTION_PRIORITY, payload:{value}})\r\n\r\n\r\n// used for pushing the selected section to the state, that way any queries needed to perform or any actions needed to be\r\n// performed on the element can be done without needing to pass in props everywhere.\r\n\r\nexport const pushSelectedSectionAction = (sectionIdentifier, sortType ) => ({type: PUSH_SELECTED_SECTION_ACTION, payload:{sectionIdentifier, sortType}})\r\n\r\n// functions for enabling authorization by setting userID/email in the state, allowing all components to access it.\r\n\r\nexport const setUserIdAction = (userId) => ({type: SET_USER_ID, payload:{userId}})\r\n\r\nexport const setUserEmailAction = (userEmail) => ({type: SET_USER_EMAIL, payload:{userEmail}})\r\n\r\n// different functions for menu functions, such as opening the signup menu or signin menu for firestore.\r\n\r\nexport const toggleSignUpMenuAction = () => ({type: TOGGLE_SIGNUP_MENU})\r\n\r\nexport const toggleSignInMenuAction = () => ({type: TOGGLE_SIGN_IN_MENU})\r\n\r\nexport const toggleShareMenuAction = () => ({type: TOGGLE_SHARE_MENU})\r\n\r\nexport const shareTaskAction = (inputEmail) => ({type: SHARE_TASK, payload:{inputEmail}})\r\n\r\nexport const removeTaskAction = () => ({type: REMOVE_TASK})\r\n\r\nexport const setValidShareEmailAction = (value) => ({type: SET_VALID_SHARE_EMAIL, payload: {value}})\r\n\r\nexport const setSharedWithEmailAction = (value) => ({type: SET_SHARED_WITH_EMAIL, payload: {value}})\r\n\r\nexport const toggleShowRemoveAction = () => ({type: TOGGLE_SHOW_REMOVE})\r\n\r\n\r\n\r\n","import firebase from \"firebase/compat\";\r\n\r\n// stuff for the firebase config\r\n\r\nconst firebaseConfig = {\r\n    apiKey: \"AIzaSyD8bEScFINGaDttxHPcnMbjIPmW64m-4SI\",\r\n    authDomain: \"rmitchellpitzer-hmc-tasks.firebaseapp.com\",\r\n    projectId: \"rmitchellpitzer-hmc-tasks\",\r\n    storageBucket: \"rmitchellpitzer-hmc-tasks.appspot.com\",\r\n    messagingSenderId: \"670939286123\",\r\n    appId: \"1:670939286123:web:3dd28bb7e5badcce873f2e\"\r\n};\r\n\r\nfirebase.initializeApp(firebaseConfig);\r\n\r\n\r\nexport const database = firebase.firestore();\r\nexport const collectionName = \"rmitchellPitzer-hmc-tasks-sectionList\";\r\n\r\n","/* eslint-disable no-lone-blocks */\r\nimport { v4 as uuidv4 } from 'uuid';\r\nimport {\r\n    CREATE_TASK,\r\n    DELETE_ALL_COMPLETED_TASK,\r\n    DELETE_TASK,\r\n    HIDE_MENU,\r\n    HIDE_UNDO,\r\n    SHOW_MENU,\r\n    SHOW_UNDO,\r\n    TOGGLE_COMPLETED_LIST,\r\n    TOGGLE_TASK_COMPLETION,\r\n    TOGGLE_TODO_LIST,\r\n    TOGGLE_UNDO,\r\n    UNDO_TASK,\r\n    UPDATE_TASK_TEXT,\r\n    CREATE_SECTION,\r\n    DELETE_SECTION,\r\n    UPDATE_SECTION_TEXT,\r\n    TOGGLE_SECTION,\r\n    CLEAR_ALL,\r\n    GET_TOGGLED,\r\n    PUSH_COMPLETED_TASK,\r\n    TOGGLE_COMPLETED_SECTION_BUTTON,\r\n    SET_SECTION_TO_STACK,\r\n    SET_TASKS_TO_STACK,\r\n    UPDATE_TASK_PRIORITY,\r\n    PUSH_SELECTED_SECTION_ACTION,\r\n    SHOW_PRIORITY_MENU,\r\n    HIDE_PRIORITY_MENU,\r\n    SET_SECTION_PRIORITY,\r\n    SET_USER_ID,\r\n    TOGGLE_SIGNUP_MENU,\r\n    TOGGLE_SIGN_IN_MENU,\r\n    SET_USER_EMAIL,\r\n    TOGGLE_SHARE_MENU,\r\n    SHARE_TASK,\r\n    REMOVE_TASK,\r\n    SET_VALID_SHARE_EMAIL, SET_SHARED_WITH_EMAIL,\r\n    TOGGLE_SHOW_REMOVE\r\n\r\n} from './actions';\r\n\r\nimport {database} from \"./firestore\";\r\nimport {collectionName} from \"./firestore\";\r\n\r\n\r\n\r\n// Initial state,\r\n\r\n// Initial state contains a lot of information and stat variables, so I'll go over each one:\r\n\r\n// sectionStack contains a stack of all sections, when a section is added it's pushed to the stack. This ensures that\r\n    // more calls to query aren't needed as they can be done through the state.\r\n// taskStack is similar to sectionStack, but is used to keep track of tasks in order to delete all tasks.\r\n// sectionsToggled contains a list of sections toggled, or that when the sections are toggled, their tasks are\r\n    // viewable in mobile view.\r\n// showUndo: Isn't really needed anymore, but would show the undo menu before it was removed.\r\n// showMenu, showPriorityMenu, ShowCompletedTasks, all exist to toggle on/off menu's associated with altering\r\n// tasks or sections.\r\n// selectedSection: keeps track of a section that's selected when a button is pressed in that section. This means\r\n    // any action can apply the action to the item in the selectedSection state variable, which can be used by\r\n    // different functions such as share section or sort section or remove section.\r\n//show signUpMenu, showSignInMenu: show the menus needed in the splashScreen.\r\n// showShareMenu: Shows the share section menu\r\n// validShareEmail, shareEmailPressed: Keeps track in the share menu if the email being passed through is a valid\r\n    // email, and if the button has been pressed. This is to return whether or not emails are valid, if they are, and\r\n    // if the button has not been pressed yet, so no need to return email validity.\r\n// showRemove: Keeps track of the remove section button,\r\n\r\nconst initialState = {\r\n    sectionStack:[],\r\n    taskStack: [],\r\n    sectionsToggled: [],\r\n    completedTasks: [],\r\n    showUndo: false,\r\n    showMenu: false,\r\n    showPriorityMenu: false,\r\n    showCompletedTasks: false,\r\n    selectedSection: [],\r\n    userID: \"\",\r\n    userEmail: \"\",\r\n    showSignUpMenu: false,\r\n    showSignInMenu: false,\r\n    showShareMenu: false,\r\n    validShareEmail: true,\r\n    shareEmailPressed: false,\r\n    showRemove: false\r\n}\r\n\r\n\r\n\r\n// creates a task using firestore\r\nfunction createTask(state, sectionIdentifier) {\r\n    const identifier = uuidv4()\r\n    const taskRef = database.collection(collectionName).doc(sectionIdentifier).collection('tasks').doc(identifier)\r\n\r\n    taskRef.set({\r\n        id: identifier,\r\n        sectionIdentifier: sectionIdentifier,\r\n        isCompleted: false,\r\n        text: \"\",\r\n        timeMade: new Date(),\r\n        priority: 2\r\n    })\r\n    return{\r\n        ...state\r\n    }\r\n}\r\n\r\n\r\n// Updates a task's text given it's id, section identifier, and text to update it to.\r\n// uses firestore.\r\nfunction updateTaskText(state,{id, identifier,text}) {\r\n    const taskRef = database.collection(collectionName).doc(identifier).collection('tasks').doc(id)\r\n    taskRef.update({\r\n        text: text\r\n        }\r\n    )\r\n    return{\r\n        ...state\r\n    }\r\n}\r\n\r\n\r\n// Hey this is no longer 100 lines of code!\r\n// Just gets the task being marked completed, sets it to the opposite of what it's completed status is.\r\nfunction toggleTaskCompletion(state,{id, identifier, isToggled}) {\r\n    const taskRef = database.collection(collectionName).doc(identifier).collection('tasks').doc(id)\r\n    taskRef.update({\r\n        isCompleted: (!isToggled)\r\n    })\r\n    return{\r\n        ...state\r\n    }\r\n}\r\n\r\n// deletes all tasks that are marked completed.\r\n// updates firestore\r\n\r\n\r\n// from line 142 - line 215 are funcitons that are no longer used.\r\n// I am worried removing them might break the app with an undefined\r\n// function, so I'm going to leave them\r\nfunction deleteAllCompletedTasks(state) {\r\n    const completedTasks = state.completedTasks.map(x => x)\r\n    for (const index in completedTasks){\r\n        const taskToDelete = database.collection(collectionName).doc(completedTasks[index].sectionIdentifier).collection('tasks').doc(completedTasks[index].id);\r\n        taskToDelete.delete()\r\n\r\n    }\r\n        return {\r\n       ...state\r\n   }\r\n}\r\n\r\nfunction toggleCompletedList(state) {\r\n    return {\r\n        ...state,\r\n        showCompleted: !state.showCompleted\r\n    }\r\n}\r\n\r\nfunction toggleToDoList(state) {\r\n    return {\r\n        ...state,\r\n        showTodo: !state.showTodo \r\n    }\r\n}\r\n\r\nfunction showMenu(state) {\r\n    return {\r\n        ...state,\r\n        showMenu: true \r\n        }\r\n}\r\n\r\nfunction hideMenu(state) {\r\n    return {\r\n        ...state,\r\n        showMenu:false \r\n    }\r\n}\r\n\r\nfunction showUndo(state) {\r\n    return {\r\n        ...state,\r\n        showUndo: true\r\n    }\r\n}\r\n\r\nfunction hideUndo(state) {\r\n    return {\r\n        ...state,\r\n        showUndo: false \r\n    }\r\n}\r\n\r\nfunction deleteSection(state, sectionIdentifier) {\r\n    const sections = state.sections.filter(sections => sections.identifier !== sectionIdentifier)\r\n    return {\r\n        ...state,\r\n        sections\r\n    }\r\n}\r\n\r\nfunction getToggledStatus(state, sectionIdentifier){\r\n    const newSections = state.sections.map(x => x)\r\n    const sectionWithId = newSections.find(section => section.identifier === sectionIdentifier)\r\n    if (!sectionWithId){\r\n        return null\r\n    }\r\n    return sectionWithId.isToggled\r\n}\r\n\r\n// function for creating a section.\r\n\r\nfunction createSection(state) {\r\n    // first part creates a new section in firestore.\r\n    const identifier = uuidv4()\r\n    const sectionRef = database.collection(collectionName).doc(identifier)\r\n    sectionRef.set({\r\n        identifier: identifier,\r\n        title: \"\",\r\n        sortType: 7,\r\n        owner: state.userID,\r\n        sharedWith: [state.userEmail]\r\n    })\r\n\r\n\r\n    return{\r\n        ...state\r\n    }\r\n}\r\n\r\n// Similar to updating a task's text, updates a section's text with help from it's sectionIdentifier.\r\n\r\nfunction updateSectionText(state,{sectionIdentifier,text}){\r\n    const sectionToUpdate = database.collection(collectionName).doc(sectionIdentifier);\r\n    sectionToUpdate.update({\r\n        title: text\r\n\r\n    })\r\n    return{\r\n        ...state\r\n    }\r\n}\r\n\r\n// This will toggle whether the section's button is pressed or not, and will show the tasklist or hide it\r\n// depending on whether it's toggled or not.\r\n// Also pushes that identifier to the stack if it's toggled, or removes it from it if it isn't toggled.\r\n\r\nfunction toggleSection(state, sectionIdentifier) {\r\n\r\n\r\n    const newToggledSections = state.sectionsToggled.map(x => x)\r\n    if(newToggledSections.includes(sectionIdentifier)){\r\n        let taskIndex = newToggledSections.indexOf(sectionIdentifier)\r\n        newToggledSections.splice(taskIndex, 1)\r\n\r\n\r\n\r\n    }\r\n    else{\r\n        newToggledSections.push(sectionIdentifier)\r\n    }\r\n\r\n    return {\r\n        ...state,\r\n        sectionsToggled: newToggledSections\r\n    }\r\n}\r\n\r\n// Clears all tasks and sections except one, which it will reset the text and tasks of.\r\n// This is to avoid a weird thing where sections show up after a short delay.\r\n\r\n// Clears all tasks and sections, including shared tasks but not shared sections.\r\nfunction clearAll(state){\r\n    const stackList = state.sectionStack\r\n    const taskList = state.taskStack\r\n    for (const index in taskList){\r\n        const taskToDelete = database.collection(collectionName).doc(taskList[index].sectionIdentifier).collection('tasks').doc(taskList[index].id)\r\n        taskToDelete.delete()\r\n    }\r\n    for (const index in stackList){\r\n        if(index == (stackList.length - 1)){\r\n\r\n\r\n\r\n            const sectionToModify = database.collection(collectionName).doc(stackList[index].identifier)\r\n            sectionToModify.update({\r\n\r\n                title: \"\",\r\n                sortType: 7,\r\n                owner: state.userID,\r\n                sharedWith: [state.userEmail]}\r\n            )\r\n        }\r\n        else{\r\n            const sectionToDelete = database.collection(collectionName).doc(stackList[index].identifier)\r\n            sectionToDelete.delete()\r\n        }\r\n    }\r\n\r\n    return{\r\n        ...state,\r\n        sectionsToggled: []\r\n    }\r\n}\r\n\r\n// Pushes a task to the state, this command will only be used if the task is marked completed.\r\nfunction pushCompletedTask(state, contents){\r\n    return{\r\n        ...state,\r\n        completedTasks: contents.Task\r\n    }\r\n}\r\n\r\n// function to set the completed section's toggle status in mobile view.\r\nfunction toggleCompletedSection(state){\r\n    const newToggledStatus = (!state.showCompletedTasks)\r\n    return{\r\n        ...state,\r\n        showCompletedTasks: newToggledStatus\r\n    }\r\n}\r\n\r\n// function to update the stack with a list of sections.\r\nfunction setSectionToStack(state, stackList){\r\n    return{\r\n        ...state,\r\n        sectionStack: stackList\r\n    }\r\n}\r\n\r\n//refer to line 327, but replace sections with tasks.\r\nfunction setTasksToStack(state, taskList){\r\n    return{\r\n        ...state,\r\n        taskStack: taskList\r\n    }\r\n}\r\n\r\n// Updates the priority of a task.\r\n// First part is telling if the priority status is at it's limit, and then setting it to the lowest value.\r\n// Second part is updating the firestore db\r\nfunction updateTaskPriority(state, {id, sectionIdentifier, value}){\r\n    let newValue = 0\r\n    if(value > 2){\r\n        newValue = 1\r\n    }\r\n    else{\r\n        newValue = value + 1\r\n    }\r\n    const TaskRef = database.collection(collectionName).doc(sectionIdentifier).collection('tasks').doc(id)\r\n    TaskRef.update({\r\n        priority: newValue\r\n    })\r\n    return{\r\n        ...state\r\n    }\r\n}\r\n\r\n// pushing the section whose tasks are being sorted to the stack to keep track of.\r\nfunction pushSelectedSection(state, {sectionIdentifier, sortType}){\r\n    return{\r\n        ...state,\r\n        selectedSection: {sectionIdentifier, sortType}\r\n    }\r\n}\r\n\r\n// show priority menu, (state)\r\nfunction showPriorityMenu(state){\r\n    return {\r\n        ...state,\r\n        showPriorityMenu: true\r\n    }\r\n}\r\n\r\n// same thing, except this resets the selected section as none are being shown.\r\nfunction hidePriorityMenu(state){\r\n    return {\r\n        ...state,\r\n        selectedSection: [],\r\n        showPriorityMenu: false\r\n    }\r\n}\r\n// Updates the selected Section's priority sort type. Also resets selected section.\r\nfunction setSectionPriority(state, value){\r\n    const sectionRef = database.collection(collectionName).doc(state.selectedSection.sectionIdentifier)\r\n    sectionRef.update({\r\n        sortType: value\r\n    })\r\n    return{\r\n        ...state,\r\n        selectedSection: [],\r\n        showPriorityMenu: false\r\n    }\r\n}\r\n\r\n// pushes the userID to the state at appSignedIn render\r\nfunction setUserId(state, userId){\r\n    return{\r\n        ...state,\r\n        userID: userId\r\n    }\r\n}\r\n\r\n// pushes the user's email to the state at appSignedIn render\r\nfunction setUserEmail(state, newuserEmail){\r\n    return{\r\n        ...state,\r\n        userEmail: newuserEmail\r\n    }\r\n}\r\n\r\n// toggles the signUpmenu in the splashScreen to on/off\r\nfunction toggleSignUpMenu(state){\r\n    return{\r\n        ...state,\r\n        showSignUpMenu: !(state.showSignUpMenu)\r\n    }\r\n}\r\n// toggles the signInmenu in the splashScreen to on/off\r\nfunction toggleSignInMenu(state){\r\n    return{\r\n        ...state,\r\n        showSignInMenu: !(state.showSignInMenu)\r\n    }\r\n}\r\n\r\n// toggles the shareSection Menu in the App to on/off\r\nfunction toggleShareMenu(state){\r\n    return{\r\n        ...state,\r\n        showShareMenu: !(state.showShareMenu)\r\n    }\r\n}\r\n\r\n// allows for sharing sections.\r\n// I don't know why I called it shareTask and not shareSection.\r\n// I was very tired when I wrote this please forgive me.\r\nfunction shareTask(state, inputEmail){\r\n    const sharedWithList = state.selectedSection.sortType.map(x => x)\r\n    sharedWithList.push(inputEmail)\r\n    const sectionRef = database.collection(collectionName).doc(state.selectedSection.sectionIdentifier)\r\n    sectionRef.update({\r\n            sharedWith: sharedWithList\r\n        }\r\n    )\r\n    return{\r\n        ...state\r\n    }\r\n}\r\n\r\n// allows for... removing access to a section not a task again I messed up the naming.\r\nfunction removeTask(state){\r\n    const sharedWithList = state.selectedSection.sortType.map(x => x)\r\n    const newList = sharedWithList.filter(email => email !== state.userEmail)\r\n\r\n    const sectionRef = database.collection(collectionName).doc(state.selectedSection.sectionIdentifier)\r\n    sectionRef.update({\r\n            sharedWith: newList\r\n        }\r\n    )\r\n    return{\r\n        ...state\r\n    }\r\n}\r\n\r\n// checks if the email passed through is actually in email format, updates the state\r\nfunction setValidShareEmail(state, value){\r\n    let validRegex = /^[a-zA-Z0-9.!#$%&'*+/=?^_`{|}~-]+@[a-zA-Z0-9-]+(?:\\.[a-zA-Z0-9-]+)*$/;\r\n    if (value.match(validRegex)) {\r\n        return{\r\n            ...state,\r\n            validShareEmail: true\r\n        }\r\n    }\r\n    else{\r\n        return{\r\n            ...state,\r\n            validShareEmail: false\r\n        }\r\n    }\r\n\r\n}\r\n\r\n// function to set whether the share Email Button is pressed and update the state.\r\nfunction setSharedWithEmail(state, value){\r\n    return{\r\n        ...state,\r\n        shareEmailPressed: value\r\n}}\r\n\r\n// function to toggle the show remove menu.\r\nfunction toggleShowRemove(state){\r\n    return{\r\n        ...state,\r\n        showRemove: !state.showRemove\r\n    }\r\n}\r\n\r\n// Reducer!\r\nexport default function toDoReducer(state = initialState, action){\r\n    switch (action.type){\r\n        case CREATE_TASK: return createTask(state, action.payload.sectionIdentifier)\r\n        case UPDATE_TASK_TEXT: return updateTaskText(state,action.payload)\r\n        case TOGGLE_TASK_COMPLETION: return toggleTaskCompletion(state,action.payload)\r\n        case DELETE_ALL_COMPLETED_TASK: return deleteAllCompletedTasks(state)\r\n        case TOGGLE_TODO_LIST: return toggleToDoList(state)\r\n        case TOGGLE_COMPLETED_LIST: return toggleCompletedList(state)\r\n        case SHOW_MENU: return showMenu(state)\r\n        case HIDE_MENU: return hideMenu(state)\r\n        case SHOW_UNDO: return showUndo(state)\r\n        case HIDE_UNDO: return hideUndo(state)\r\n        case CREATE_SECTION: return createSection(state)\r\n        case DELETE_SECTION: return deleteSection(state,action.payload.sectionIdentifier)\r\n        case UPDATE_SECTION_TEXT: return updateSectionText(state, action.payload)\r\n        case TOGGLE_SECTION: return toggleSection(state, action.payload.sectionIdentifier)\r\n        case CLEAR_ALL: return clearAll(state)\r\n        case GET_TOGGLED: return getToggledStatus(state, action.payload.sectionIdentifier)\r\n        case PUSH_COMPLETED_TASK: return pushCompletedTask(state, action.payload)\r\n        case TOGGLE_COMPLETED_SECTION_BUTTON: return toggleCompletedSection(state)\r\n        case SET_SECTION_TO_STACK: return setSectionToStack(state, action.payload.stackList)\r\n        case SET_TASKS_TO_STACK: return setTasksToStack(state, action.payload.taskList)\r\n        case UPDATE_TASK_PRIORITY: return updateTaskPriority(state, action.payload)\r\n        case PUSH_SELECTED_SECTION_ACTION: return pushSelectedSection(state, action.payload)\r\n        case SHOW_PRIORITY_MENU: return showPriorityMenu(state)\r\n        case HIDE_PRIORITY_MENU: return hidePriorityMenu(state)\r\n        case SET_SECTION_PRIORITY: return setSectionPriority(state, action.payload.value)\r\n        case SET_USER_ID: return setUserId(state, action.payload.userId)\r\n        case SET_USER_EMAIL: return setUserEmail(state, action.payload.userEmail)\r\n        case TOGGLE_SIGNUP_MENU: return toggleSignUpMenu(state)\r\n        case TOGGLE_SIGN_IN_MENU: return toggleSignInMenu(state)\r\n        case TOGGLE_SHARE_MENU: return toggleShareMenu(state)\r\n        case SHARE_TASK: return shareTask(state, action.payload.inputEmail)\r\n        case REMOVE_TASK: return removeTask(state)\r\n        case SET_VALID_SHARE_EMAIL: return setValidShareEmail(state, action.payload.value)\r\n        case SET_SHARED_WITH_EMAIL: return setSharedWithEmail(state, action.payload.value)\r\n        case TOGGLE_SHOW_REMOVE: return toggleShowRemove(state)\r\n\r\n        default:\r\n            return state \r\n    }\r\n\r\n\r\n}","import {createStore} from \"redux\"\nimport rootReducer  from \"./reducer\"\n\n// creates the reducer\n\nconst store = createStore(rootReducer)\nexport default store ","import {\n    hideMenuAction,\n    hideUndoAction,\n    showMenuAction,\n    showUndoAction,\n    toggleCompletedListAction,\n    toggleToDoListAction,\n    toggleUndoAction,\n    undoTaskAction,\n    toggleCompletedSectionAction,\n    pushSelectedSectionAction,\n    showPriorityMenuAction,\n    hidePriorityMenuAction,\n    setUserIdAction,\n    toggleSignUpMenuAction,\n    toggleSignInMenuAction,\n    setUserEmailAction,\n    toggleShareMenuAction, setValidShareEmailAction, setSharedWithEmailAction, toggleShowRemoveAction\n} from \"./actions.js\"\nimport store from \"./store.js\"\n\nexport default class AppDataController {\n\n    static toggleTodoList() {\n        const action = toggleToDoListAction()\n        store.dispatch(action)\n    }\n\n    static showToDo() {\n        return store.getState().showTodo \n    }\n    \n    static showCompleted() {\n        return store.getState().showCompleted \n    }\n\n    static showMenu() {\n        const action = showMenuAction()\n        store.dispatch(action)\n    }\n\n    static closeMenu() {\n        const action = hideMenuAction()\n        store.dispatch(action)\n    }\n\n    static menuIsActive() {\n        return store.getState().showMenu\n    }\n\n    static toggleCompletedList() {\n        const action = toggleCompletedListAction()\n        store.dispatch(action)\n    }\n\n    static showUndo() {\n        const action = showUndoAction()\n        store.dispatch(action)\n    }\n\n    static hideUndo() {\n        const action = hideUndoAction()\n        store.dispatch(action)\n    }\n\n    static undoTask() {\n        const action = undoTaskAction()\n        store.dispatch(action)\n    }\n\n    static undoIsActive() {\n        return store.getState().showUndo \n    }\n\n    static toggleCompletedSection() {\n        const action =  toggleCompletedSectionAction()\n        store.dispatch(action)\n    }\n\n    static pushSelectedSection(sectionIdentifier, sortType){\n        const action =  pushSelectedSectionAction(sectionIdentifier, sortType)\n        store.dispatch(action)\n    }\n\n    static priorityMenuIsActive() {\n        return store.getState().showPriorityMenu\n    }\n\n    static showPriorityMenu() {\n        const action = showPriorityMenuAction()\n        store.dispatch(action)\n    }\n\n    static hidePriorityMenu() {\n        const action = hidePriorityMenuAction()\n        store.dispatch(action)\n    }\n\n    static setUserId(userId) {\n        const action = setUserIdAction(userId)\n        store.dispatch(action)\n    }\n\n    static setUserEmail(userEmail) {\n        const action = setUserEmailAction(userEmail)\n        store.dispatch(action)\n    }\n\n    static toggleSignUpMenu(){\n        const action = toggleSignUpMenuAction()\n        store.dispatch(action)\n    }\n\n    static toggleSignInMenu(){\n        const action = toggleSignInMenuAction()\n        store.dispatch(action)\n    }\n\n    static toggleShareMenu(){\n        const action = toggleShareMenuAction()\n        store.dispatch(action)\n    }\n\n    static setValidShareEmail(value){\n        const action = setValidShareEmailAction(value)\n        store.dispatch(action)\n    }\n\n    static setSharedWithEmail(value){\n        const action = setSharedWithEmailAction(value)\n        store.dispatch(action)\n\n    }\n\n    static toggleShowRemove(){\n        const action = toggleShowRemoveAction()\n        store.dispatch(action)\n    }\n\n}","import AppDataController from \"../../modules/dataController/AppDataController\"\r\nimport \"../../css/action_button.css\"\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\"\r\nimport { faPlus } from \"@fortawesome/free-solid-svg-icons\"\r\n\r\nfunction handleOnClick() {\r\n    AppDataController.showMenu()\r\n}\r\n\r\n// Action button in the bottom right corner, allows access to adding sections, clearing completed tasks, or\r\n// resetting the sections and tasks.\r\n\r\nexport default function ActionButton() {\r\n    return (\r\n        <button\r\n            aria-label=\"Click here to hear more options.\"\r\n            class=\"action-button\"\r\n            onClick={handleOnClick}\r\n        >\r\n        <FontAwesomeIcon icon={faPlus} />\r\n        </button>\r\n    )\r\n}\r\n\r\n","import \"../css/banner.css\"\r\nimport {auth} from \"../App\";\r\nimport {faUndoAlt} from \"@fortawesome/free-solid-svg-icons\";\r\nimport {FontAwesomeIcon} from \"@fortawesome/react-fontawesome\";\r\n\r\n// Just a silly banner for the top of the page that shows a play on \"toDos\"\r\n// Also includes a log out button on the left side\r\nexport default function Header(props) {\r\n    return (\r\n        <div class=\"banner\">\r\n            <button\r\n                aria-label=\"Press to log out\"\r\n                type=\"button\" onClick={() => auth.signOut()}\r\n                    className = \"logOutButton\"\r\n            >{ faUndoAlt && <FontAwesomeIcon icon= {faUndoAlt}/> }</button>\r\n\r\n            <h1 class=\"title\"> Todoiz.IO</h1>\r\n        </div>\r\n    )\r\n}","\r\n\r\n\r\n/* \r\n\r\n\r\nprops: {\r\n    text: string;\r\n    command: Function\r\n    parameters: string\r\n    icon: FontAwesomeIcon\r\n}\r\n*/\r\n\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\n\r\nexport default function ActionMenuItem(props) {\r\n    // creates a button in the action menu with a command from props.\r\n    return (\r\n        <button onClick={() => props.command(props)} class=\"action-item\"\r\n            aria-label={\"This is the\" + props.text + \"button in the action menu, Press to perform the action.\" }>\r\n            { props.icon && <FontAwesomeIcon className = \"ActionIcon\" icon= {props.icon}/> }\r\n            <div class=\"action-text\">\r\n                <p> {props.text} </p>\r\n            </div>\r\n        </button>\r\n    )\r\n}\r\n\r\n","import {\r\n    createTaskAction,\r\n    deleteAllCompletedTasksAction,\r\n    deleteTaskAction,\r\n    toggleTaskCompletionAction,\r\n    updateTaskTextAction,\r\n    createSectionAction,\r\n    deleteSectionAction,\r\n    updateSectionTextAction,\r\n    toggleSectionAction,\r\n    clearAllSectionsAndTasksAction,\r\n    getToggledStatusAction,\r\n    pushCompletedTaskAction,\r\n    setSectionToStackAction,\r\n    setTasksToStackAction,\r\n    updateTaskPriorityAction,\r\n    setSectionPriorityAction, shareTaskAction, removeTaskAction\r\n} from \"./actions\"\r\nimport store from \"./store.js\"\r\nclass TaskDataController {\r\n    static updateTaskText(id, identifier, newText) {\r\n            const action = updateTaskTextAction(id, identifier ,newText)\r\n            store.dispatch(action)\r\n    }\r\n\r\n    static toggleTaskCompletion(id, identifier, isToggled) {\r\n        const action = toggleTaskCompletionAction(id, identifier, isToggled)\r\n        store.dispatch(action)\r\n    }\r\n\r\n    static createTask(sectionIdentifier) {\r\n        const action = createTaskAction(sectionIdentifier)\r\n        store.dispatch(action)\r\n    }\r\n\r\n    static deleteTask(id) {\r\n        const action = deleteTaskAction(id)\r\n        store.dispatch(action)\r\n    }\r\n\r\n\r\n    static deleteAllCompleted() {\r\n        const action = deleteAllCompletedTasksAction()\r\n        store.dispatch(action)\r\n    }\r\n\r\n    static todo() {\r\n        return store.getState()\r\n        .tasks.filter(task => task.isCompleted === false)\r\n    }\r\n\r\n    static completed() {\r\n        return store.getState()\r\n        .tasks.filter(task => task.isCompleted === true)\r\n    }\r\n\r\n    // new function to return general tasks, not finished yet\r\n\r\n    static getTasks(identifier) {\r\n        return store.getState().sections.filter(section => section.identifier === identifier)\r\n    }\r\n\r\n    // new function to get sections\r\n\r\n    static getSections() {\r\n        return store.getState().sections\r\n    }\r\n\r\n\r\n    static createSection() {\r\n        const action = createSectionAction()\r\n        store.dispatch(action)\r\n    }\r\n\r\n    static deleteSection(sectionIdentifier) {\r\n        const action = deleteSectionAction(sectionIdentifier)\r\n        store.dispatch(action)\r\n    }\r\n\r\n    static updateSectionText(sectionIdentifier,text) {\r\n        const action = updateSectionTextAction(sectionIdentifier,text)\r\n        store.dispatch(action)\r\n    }\r\n\r\n    static toggleSection(sectionIdentifier) {\r\n        const action = toggleSectionAction(sectionIdentifier)\r\n        store.dispatch(action)\r\n    }\r\n\r\n    static clearAllSectionsAndTasks() {\r\n        const action = clearAllSectionsAndTasksAction()\r\n        store.dispatch(action)\r\n    }\r\n\r\n    static getToggledStatus(sectionIdentifier){\r\n        const action = getToggledStatusAction(sectionIdentifier)\r\n        store.dispatch(action)\r\n    }\r\n\r\n    static pushCompletedTask(Task) {\r\n\r\n        const action = pushCompletedTaskAction(Task)\r\n        store.dispatch(action)\r\n    }\r\n\r\n    static setSectionToStack(stackList){\r\n        const action = setSectionToStackAction(stackList)\r\n        store.dispatch(action)\r\n    }\r\n\r\n    static setTasksToStack(taskList){\r\n        const action = setTasksToStackAction(taskList)\r\n        store.dispatch(action)\r\n    }\r\n\r\n    static updateTaskPriority(id, sectionIdentifier, value){\r\n        const action = updateTaskPriorityAction(id, sectionIdentifier, value)\r\n        store.dispatch(action)\r\n    }\r\n\r\n    static setSectionPriority(value){\r\n        const action = setSectionPriorityAction(value)\r\n        store.dispatch(action)\r\n    }\r\n\r\n    static shareTask(inputEmail){\r\n        const action = shareTaskAction(inputEmail)\r\n        store.dispatch(action)\r\n    }\r\n\r\n    static removeTask(){\r\n        const action = removeTaskAction()\r\n        store.dispatch(action)\r\n    }\r\n\r\n\r\n};\r\n\r\n\r\nexport default TaskDataController","import ActionMenuItem from \"./ActionMenuItem.js\"\r\nimport \"../../css/action_list.css\"\r\nimport TaskDataController from \"../../modules/dataController/TaskDataController.js\"\r\nimport { faMinus, faPlus } from \"@fortawesome/free-solid-svg-icons\"\r\nimport AppDataController from \"../../modules/dataController/AppDataController.js\"\r\nimport {collectionName, database} from \"../../modules/dataController/firestore\";\r\nimport {useCollection} from \"react-firebase-hooks/firestore\";\r\n\r\n\r\n\r\nlet fireStoreList = null;\r\n\r\nfunction deleteAll() {\r\n    // deletes all completed Tasks\r\n    TaskDataController.deleteAllCompleted()\r\n}\r\n\r\nfunction ClearAll() {\r\n    // Resets all sections and tasks, gives an empty section\r\n    TaskDataController.clearAllSectionsAndTasks()\r\n\r\n}\r\n\r\n\r\nconst menuItems = [\r\n    // Text, commands, and icons present in the action menu.\r\n    {text: \"Add New Section\", command: TaskDataController.createSection, icon: faPlus},\r\n    {text: \"Clear Completed Tasks\", command:deleteAll, icon: faMinus},\r\n    {text: \"Clear All Sections And Tasks\", command: ClearAll, icon: faMinus}\r\n]\r\n\r\nexport default function ActionMenu(props) {\r\n\r\n    const query = database.collection(collectionName);\r\n    const [value, loading, error] = useCollection(query);\r\n    if (value) {\r\n        fireStoreList = value.docs.map((doc) => {\r\n            return {...doc.data()}});\r\n        TaskDataController.setSectionToStack(fireStoreList)\r\n    }\r\n\r\n\r\n\r\n    // returns a component that contains the commands listed above.\r\n    return (\r\n        <button class='overlay'onClick= {AppDataController.closeMenu}\r\n            aria-label=\"Click here to exit the action menu.\">\r\n            <div class='action-container'>\r\n                { menuItems.map(menuItem => {\r\n                    return <ActionMenuItem {...menuItem} key={menuItem.text}/>\r\n                })}\r\n            </div>\r\n        </button>\r\n     \r\n    )\r\n}","import \"../../css/prioritySortButton.css\"\r\n\r\nimport TaskDataController from \"../../modules/dataController/TaskDataController\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\"\r\nimport { faSort, faSortDown, faSortUp } from \"@fortawesome/free-solid-svg-icons\"\r\nimport \"../../css/SectionAddTaskButton.css\"\r\n\r\n// The button to change a task's priority level.\r\nfunction TaskPriorityButton(props) {\r\n    const sectionText = props.sectionTitle\r\n    let priorityIcon\r\n    if(props.value == 1){\r\n        priorityIcon = faSortDown\r\n    }\r\n    else if (props.value == 2){\r\n        priorityIcon = faSort\r\n    }\r\n    else {\r\n        priorityIcon = faSortUp\r\n    }\r\n\r\n    return (\r\n        <button\r\n            aria-label={sectionText ? \"Press to change the priority of the tasks in \" + sectionText : \"Press to change the priority of the tasks in an empty section\"}\r\n            class=\"TaskPriorityButton\"\r\n            onClick={ (e) => handleOnClick(props.identifier, props.sectionIdentifier, props.value)}\r\n        >\r\n            <FontAwesomeIcon icon={priorityIcon} />\r\n        </button>\r\n    )\r\n}\r\n\r\nfunction handleOnClick(id, sectionIdentifier, value) {\r\n    TaskDataController.updateTaskPriority(id, sectionIdentifier, value)\r\n}\r\n\r\nexport default TaskPriorityButton","import { useEffect, useRef, useState } from 'react';\r\n\r\n// function for maintaining selection input, used with permission from\r\n// prof neil rhodes at hmc\r\n\r\nfunction SelectionMaintainingInput(props) {\r\n    const { value, onChange, ...rest } = props;\r\n    const [cursor, setCursor] = useState(null);\r\n    const ref = useRef(null);\r\n\r\n    useEffect(() => {\r\n        const input = ref.current;\r\n        if (input) input.setSelectionRange(cursor, cursor);\r\n    }, [ref, cursor, value]);\r\n\r\n    const handleChange = (e) => {\r\n        setCursor(e.target.selectionStart);\r\n        onChange && onChange(e);\r\n    };\r\n\r\n    return <input ref={ref} value={value} onChange={handleChange} {...rest} />;\r\n}\r\n\r\nexport default SelectionMaintainingInput;","import \"../../css/task.css\"\r\nimport TaskDataController from \"../../modules/dataController/TaskDataController\"\r\nimport store from \"../../modules/dataController/store\";\r\nimport TaskPriorityButton from \"../newSection/taskPriorityButton\";\r\nimport SelectionMaintainingInput from \"../../modules/dataController/SelectionMaintainingInput\";\r\n\r\n/*\r\nprops: {\r\n    text:string;\r\n    isCompleted:boolean\r\n    id:string \r\n}\r\n*/\r\n\r\n// This creates the individual task for use on mobile displays. It contains a checkbox, a input text, and priority\r\n// button to change priority levels.\r\n\r\nexport default function Task(props) {\r\n\r\n\r\n\r\n    const classes = `task-item`\r\n    const cssID = props.isCompleted ? 'completedTask' : ''\r\n\r\n\r\n\r\n    // Why hello ugly getAria functions that are 80 lines long! I would love to make these cleaner, but currently\r\n    // they do what they need to with getting what needs to be returned to the screenReader, and I have one hour\r\n    // left to turn this in so there it is!\r\n\r\n    function getAriaCheckbox(){\r\n        const currentSectionText = props.text\r\n        if (currentSectionText){\r\n            if (props.text){\r\n                if (props.isCompleted){\r\n                    return \"This is the checked checkbox for the task \" + props.text + \" in\" + currentSectionText\r\n                }\r\n                else{\r\n                    return \"This is the unchecked checkbox for the task \" + props.text + \" in\" + currentSectionText\r\n                }\r\n            }\r\n            else{\r\n                if (props.isCompleted){\r\n                    return \"This is the checked checkbox for an empty task in\" + currentSectionText\r\n                }\r\n                else{\r\n                    return \"This is the unchecked checkbox for an empty task in\" + currentSectionText\r\n                }\r\n            }\r\n        }\r\n        else{\r\n            if (props.text){\r\n                if (props.isCompleted){\r\n                    return \"This is the checked checkbox for the task \" + props.text + \" in an empty section.\"\r\n                }\r\n                else{\r\n                    return \"This is the unchecked checkbox for the task \" + props.text + \" in an empty section.\"\r\n                }\r\n            }\r\n            else{\r\n                if (props.isCompleted){\r\n                    return \"This is the checked checkbox for an empty task in in an empty section.\"\r\n                }\r\n                else{\r\n                    return \"This is the unchecked checkbox for an empty task in an empty section.\"\r\n                }\r\n            }\r\n        }\r\n        }\r\n\r\n    function getAriaTask(){\r\n        const currentSectionText = props.text\r\n        if (currentSectionText){\r\n            if (props.text){\r\n                if (props.isCompleted){\r\n                    return \"edit the completed task \" + props.text + \" in\" + currentSectionText + \".\"\r\n                }\r\n                else{\r\n                    return \"edit the uncompleted task \" + props.text + \" in\" + currentSectionText + \".\"\r\n                }\r\n            }\r\n            else{\r\n                if (props.isCompleted){\r\n                    return \"edit the completed empty task in\" + currentSectionText + \".\"\r\n                }\r\n                else{\r\n                    return \"edit the uncompleted empty task  in\" + currentSectionText + \".\"\r\n                }\r\n            }\r\n        }\r\n        else{\r\n            if (props.text){\r\n                if (props.isCompleted){\r\n                    return \"edit the completed task \" + props.text + \" in an empty section.\"\r\n                }\r\n                else{\r\n                    return \"edit the uncompleted task \" + props.text + \" in an empty section.\"\r\n                }\r\n            }\r\n            else{\r\n                if (props.isCompleted){\r\n                    return \"edit a completed empty task in in an empty section.\"\r\n                }\r\n                else{\r\n                    return \"edit a uncompleted empty task in an empty section.\"\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n    return (\r\n        <div class={classes} id = {cssID+\"markedCompleted\"}>\r\n            <input\r\n                aria-label= {getAriaCheckbox()}\r\n                alt='task completion status' \r\n                class='checkbox' \r\n                type=\"checkbox\"\r\n                value={ props.isCompleted}\r\n                onChange= {(e) => handleCheckBoxEvent(props.id, props.sectionIdentifier, props.isCompleted)}\r\n                checked= {props.isCompleted}\r\n            />\r\n            <SelectionMaintainingInput\r\n                aria-label={getAriaTask()}\r\n                class='task-text' \r\n                type='text' \r\n                alt='task text'\r\n\r\n                id ={cssID}\r\n                onChange= { (e) => handleTextEvent(props.id, props.sectionIdentifier,e)}\r\n                value={props.text}\r\n                onFocus={(e)=>e.currentTarget.value = props.text}\r\n            />\r\n            <TaskPriorityButton\r\n                sectionTitle = {props.text}\r\n                sectionIdentifier = {props.sectionIdentifier}\r\n                identifier = {props.id}\r\n                value = {props.priority}/>\r\n        </div>\r\n    )\r\n\r\n}\r\n\r\n\r\n\r\nfunction handleTextEvent(id, identifier, event) {\r\n    const newText = event.currentTarget.value\r\n    TaskDataController.updateTaskText(id, identifier, newText)\r\n}\r\n\r\nfunction handleCheckBoxEvent(id, identifier, isToggled) {\r\n    TaskDataController.toggleTaskCompletion(id, identifier, isToggled)\r\n}","import { faAngleDown, faAngleRight } from \"@fortawesome/free-solid-svg-icons\"\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\"\r\nimport store from \"../../modules/dataController/store\";\r\nimport AppDataController from \"../../modules/dataController/AppDataController\";\r\nimport { connect } from \"react-redux\"\r\n\r\n\r\n\r\n// SectionButton refers to the arrow button to show taskslist when in mobile view.\r\n// This was considered for desktop and landscape view, but difficult would\r\n// be an understatement in trying to determine scroll length, so that was canned.\r\n\r\nfunction CompletedSectionButton(props) {\r\n\r\n    const isToggled = store.getState().showCompletedTasks\r\n\r\n    const icon = isToggled ? faAngleDown : faAngleRight\r\n\r\n    // // Once again, sectionText is used for the aria-label.\r\n\r\n    const ariaText = props.text ? props.text : \"an empty \"\r\n    // This was used for getting further parameters without a if else statement.\r\n\r\n\r\n    return (\r\n        <button class=\"drop-down\" onClick={(e) => handleOnClick()}\r\n                aria-label= {props.toggledState ? \"click to close\" + ariaText + \"section\": \"click to open \" + ariaText + \"section\"}\r\n        >\r\n            <FontAwesomeIcon icon={icon} />\r\n        </button>\r\n    )\r\n}\r\n\r\n\r\n\r\n\r\nfunction handleOnClick() {\r\n    AppDataController.toggleCompletedSection()\r\n}\r\n\r\nfunction mapStateToProps(state){\r\n    return{\r\n        isToggled: store.getState().showCompletedTasks}\r\n}\r\n\r\nexport default connect(mapStateToProps)(CompletedSectionButton)\r\n","import \"../../css/bar.css\"\r\nimport CompletedSectionButton from \"./completedSectionButton\";\r\n\r\n\r\n// This displays the completed section in portrait view.\r\n// Needs to be a separate section due to it's unique nature.\r\nfunction CompletedSection(props) {\r\n    let cssID = \"completedSectionText\";\r\n    return (\r\n        <div class={\"barCompleted\"} id={\"bar\" + cssID}>\r\n            <CompletedSectionButton text = {props.sectionTitle}/>\r\n            <div\r\n                aria-label={props.sectionTitle ? \"Edit the section title of\" + props.sectionTitle : \"Edit the title of an empty section\"}\r\n                class=\"bar-title\"\r\n                id={cssID}\r\n                type='text'\r\n                alt='Completed text'\r\n                value=\"Completed\"\r\n            >Completed</div>\r\n        </div>)\r\n}\r\n\r\n\r\nexport default CompletedSection","import Task from \"./Task\";\r\nimport CompletedSection from \"../newSection/completedSection\";\r\n\r\n\r\n\r\n\r\n\r\n/*\r\nprops:{\r\n    tasks: TaskItem[]\r\n\r\n}\r\n*/\r\n\r\n// creates the list of tasks within each section visible in mobile view.\r\n\r\nexport default function TaskList(props) {\r\n\r\n    return (\r\n        <div class='container'>\r\n            {\r\n            props.tasks.map(task => {\r\n            return <Task \r\n                        {...task}\r\n                        key={task.id}\r\n                    />\r\n            })\r\n            }\r\n        </div>   \r\n    )\r\n    \r\n}","import { faAngleDown, faAngleRight } from \"@fortawesome/free-solid-svg-icons\"\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\"\r\nimport TaskDataController from \"../../modules/dataController/TaskDataController\";\r\nimport store from \"../../modules/dataController/store\";\r\n\r\n\r\n\r\n\r\n// SectionButton refers to the arrow button to show taskslist when in mobile view.\r\n// This was considered for desktop and landscape view, but was difficult to\r\n// determine scroll length, so that was canned.\r\n\r\nfunction SectionButton(props) {\r\n\r\n    const isToggled = store.getState()\r\n\r\n    const icon = props.toggledState ? faAngleDown : faAngleRight\r\n\r\n\r\n    const ariaText = props.text ? props.text : \"an empty \"\r\n    // This was used for getting further parameters without a if else statement.\r\n\r\n\r\n    return (\r\n        <button class=\"drop-down\" onClick={(e) => handleOnClick(props.identifier)}\r\n            aria-label= {props.toggledState ? \"click to close\" + ariaText + \"section\": \"click to open \" + ariaText + \"section\"}\r\n            >\r\n            <FontAwesomeIcon icon={icon} />\r\n        </button>\r\n    )\r\n}   \r\n\r\n\r\n\r\n\r\nfunction handleOnClick(identifier) {\r\n    TaskDataController.toggleSection(identifier)\r\n}\r\n\r\n\r\n\r\nexport default SectionButton","import \"../../css/bar.css\"\r\nimport \"../../css/todo.css\"\r\nimport \"../../css/completed.css\"\r\n\r\nimport TaskDataController from \"../../modules/dataController/TaskDataController\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\"\r\nimport { faPlus } from \"@fortawesome/free-solid-svg-icons\"\r\nimport \"../../css/SectionAddTaskButton.css\"\r\n\r\n\r\nfunction SectionAddTaskButton(props) {\r\n\r\n    // This is a component inside a section's bar in mobile view that adds a task to the associated section.\r\n\r\n\r\n    // sectionText gets the text of the section, needed because sections are identified by a uuid.\r\n    // this is used to determine whether the sectionText is empty, because the screenreader needs to know\r\n    // if a section title is empty instead of just skipping over it.\r\n    const sectionText = props.sectionTitle\r\n\r\n        return (\r\n        <button\r\n            aria-label={sectionText ? \"Press to add a task to \" + sectionText : \"Press to add a task to an empty section\"}\r\n            class=\"add-task-button\"\r\n            onClick={ (e) => handleOnClick(props.identifier)}\r\n        >\r\n            <FontAwesomeIcon icon={faPlus} />\r\n        </button>\r\n    )\r\n}\r\n\r\nfunction handleOnClick(props) {\r\n    TaskDataController.createTask(props)\r\n}\r\n\r\nexport default SectionAddTaskButton","import \"../../css/prioritySortButton.css\"\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\"\r\nimport { faChartBar } from \"@fortawesome/free-solid-svg-icons\"\r\nimport \"../../css/SectionAddTaskButton.css\"\r\nimport AppDataController from \"../../modules/dataController/AppDataController\";\r\n\r\n\r\n// This is a button that opens the priority sort menu to sort a list of tasks in mobile view.\r\nfunction PrioritySortButton(props) {\r\n    const sectionText = props.sectionTitle\r\n\r\n    return (\r\n        <button\r\n            aria-label={sectionText ? \"Press to sort the tasks in \" + sectionText : \"Press to sort the tasks in an empty section\"}\r\n            class=\"prioritySortButton\"\r\n            onClick={ (e) => handleOnClick(props.identifier, props.sortType)}\r\n        >\r\n            <FontAwesomeIcon icon={faChartBar} />\r\n        </button>\r\n    )\r\n}\r\n\r\nfunction handleOnClick(identifier, sortType) {\r\n    AppDataController.pushSelectedSection(identifier, sortType)\r\n    AppDataController.showPriorityMenu()\r\n}\r\n\r\nexport default PrioritySortButton","import \"../../css/prioritySortButton.css\"\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\"\r\nimport { faShareAlt } from \"@fortawesome/free-solid-svg-icons\"\r\nimport \"../../css/SectionAddTaskButton.css\"\r\nimport AppDataController from \"../../modules/dataController/AppDataController\";\r\n\r\n\r\n// This is a button that opens the share section menu to share a section.\r\nfunction ShareSectionButton(props) {\r\n    const sectionText = props.sectionTitle\r\n\r\n    return (\r\n        <button\r\n            aria-label={sectionText ? \"Press to share the section \" + sectionText : \"Press to share the unnamed section\"}\r\n            class=\"shareSectionButton\"\r\n            onClick={ (e) => handleOnClick(props.identifier, props.sharedWith)}\r\n        >\r\n            <FontAwesomeIcon icon={faShareAlt} />\r\n        </button>\r\n    )\r\n}\r\n\r\nfunction handleOnClick(identifier, sharedWith) {\r\n    AppDataController.pushSelectedSection(identifier, sharedWith)\r\n    AppDataController.toggleShareMenu()\r\n}\r\n\r\nexport default ShareSectionButton","import \"../../css/prioritySortButton.css\"\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\"\r\nimport { faMinus } from \"@fortawesome/free-solid-svg-icons\"\r\nimport \"../../css/SectionAddTaskButton.css\"\r\nimport AppDataController from \"../../modules/dataController/AppDataController\";\r\n\r\n// This is a button that opens the remove Section menu to remove your access to a section.\r\nfunction RemoveSectionSharedButton(props) {\r\n    const sectionText = props.sectionTitle\r\n\r\n    return (\r\n        <button\r\n            aria-label={sectionText ? \"Press to share the section \" + sectionText : \"Press to share the unnamed section\"}\r\n            class=\"shareSectionButton\"\r\n            onClick={ (e) => handleOnClick(props.identifier, props.sharedWith)}\r\n        >\r\n            <FontAwesomeIcon icon={faMinus} />\r\n        </button>\r\n    )\r\n}\r\n\r\nfunction handleOnClick(identifier, sharedWith) {\r\n    AppDataController.pushSelectedSection(identifier, sharedWith)\r\n    AppDataController.toggleShowRemove()\r\n}\r\n\r\nexport default RemoveSectionSharedButton","import \"../../css/bar.css\"\r\nimport SectionButton from \"./SectionButton\"\r\nimport TaskDataController from \"../../modules/dataController/TaskDataController\";\r\nimport SectionAddTaskButton from \"./sectionAddTask\";\r\nimport PrioritySortButton from \"./priorityButton\";\r\nimport ShareSectionButton from \"./shareSectionButton\";\r\nimport \"../../css/shareGui.css\"\r\nimport RemoveSectionSharedButton from \"./removeSharedButton\";\r\n\r\n\r\n// This is the section bar, it contains a button for showing tasklists, an input for editing the section title, and\r\n// a button to add tasks.\r\n// A task Add button was considered for the completed tasks section, but this turned out to be a headache\r\n// as completed tasks when checked uncompleted would return to it's origin, the completed tasks section.\r\n    // a uncompleted task in a completed task section.\r\n\r\nexport default function SectionBar(props) {\r\n    let cssID;\r\n\r\n    //CssID will tell if the section is owned by the user.\r\n\r\n    let classes = `bar ${props.identifier}`\r\n    if (props.identifier !== 'toDo' && props.identifier !== 'completed'){\r\n        cssID = \"otherSections\";\r\n    }\r\n    else{\r\n        cssID = props.identifier;\r\n    }\r\n\r\n    if(!props.isOwned){\r\n        cssID = \"otherSectionsSHARED\"\r\n        classes = 'barotherSectionsSHARED'\r\n    }\r\n\r\n\r\n\r\n    // This will return a section bar, containing a button to open and close the tasks,\r\n    // the section's input box itself.\r\n    // The share or remove section button,\r\n    // The priority sort button to sort tasks by priority\r\n    // the add task button to add tasks to the section\r\n    return (\r\n        <div class={classes} id={\"bar\"+cssID + props.identifier}>\r\n            <SectionButton identifier = {props.identifier}\r\n                           toggledState = {props.isToggled}\r\n                            text = {props.sectionTitle}/>\r\n            <input\r\n                aria-label={props.sectionTitle ? \"Edit the section title of\" + props.sectionTitle : \"Edit the title of an empty section\"}\r\n                class=\"bar-title\"\r\n                id={cssID}\r\n                type='text'\r\n                alt='task text'\r\n                onChange= { (e) => handleTextEvent(props.identifier,e)}\r\n                value={props.sectionTitle}\r\n            />\r\n            <div className=\"sectionBarButtons\">\r\n            {props.isOwned && <ShareSectionButton\r\n                sharedWith = {props.sharedWith}\r\n                identifier = {props.identifier}/>}\r\n            {!props.isOwned && <RemoveSectionSharedButton\r\n                sharedWith = {props.sharedWith}\r\n                identifier = {props.identifier}/>}\r\n\r\n\r\n            {/*The code below determines whether the section is completed, and will hide the addTaskButton if it is.*/}\r\n            <PrioritySortButton\r\n                identifier = {props.identifier}\r\n                sectionTitle = {props.sectionTitle}\r\n                sortType = {props.sortType}/>\r\n            {<SectionAddTaskButton\r\n                isOwned = {props.isOwned}\r\n                identifier = {props.identifier}\r\n                sectionTitle = {props.sectionTitle}/>}\r\n        </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nfunction handleTextEvent(id,event) {\r\n    const text = event.currentTarget.value\r\n    TaskDataController.updateSectionText(id,text)\r\n}","import TaskList from \"../Tasks/TaskList.js\"\r\nimport SectionBar from \"./SectionBar.js\"\r\nimport {connect} from \"react-redux\";\r\nimport TaskDataController from \"../../modules/dataController/TaskDataController\";\r\nimport {collectionName, database} from \"../../modules/dataController/firestore\";\r\nimport {useCollection} from \"react-firebase-hooks/firestore\";\r\nimport store from \"../../modules/dataController/store\";\r\n\r\n\r\n\r\n/*\r\nprops:\r\n    This will take in:\r\n    - identifier: A random uuidv4 for added sections, for To do it's 'toDo', for completed: 'completed'\r\n    - text: A title, by default it's null, for to do and completed... yeah.\r\n    - isToggled: false or true, will toggle viewing the tasks\r\n    - tasks: The list of tasks assigned to each section.\r\n */\r\n\r\n\r\n\r\n// I am truly embarassed and deeply concerned for what this is.\r\n// The long list of code below sorts the tasks by whatever sortType\r\n// is selected. This needs to be done before the tasks are put into\r\n// the taskList, so below is a long list of all that.\r\n// Not only that, tasks as well as completed tasks are pushed to the state.\r\n// This is done so that in clearing all sections and tasks, instead of making\r\n// many queries, we already have all tasks and sections we need to clear in\r\n// the state.\r\n// And then, once that's done, this will return a given section\r\n\r\nfunction SectionContainer(props) {\r\n\r\n    const isToggled = (props.isToggledList.includes(props.identifier))\r\n\r\n    const taskRef = database.collection(collectionName).doc(props.identifier).collection('tasks')\r\n    const [value, loading, error] = useCollection(taskRef);\r\n    let fireStoreList = null;\r\n    let fireStoreCompletedList = null;\r\n    let stateCompletedList = null;\r\n\r\n    // The code above gets the data from firestore for the section's tasks.\r\n\r\n    if (value) {\r\n        fireStoreList = value.docs.map((doc) => {\r\n            return {...doc.data()}\r\n        });\r\n\r\n        const allTasks = store.getState().taskStack.map(x => x).filter(task => task.sectionIdentifier !== props.identifier).concat(fireStoreList)\r\n        TaskDataController.setTasksToStack(allTasks)\r\n\r\n        const fireStoreCompletedList = fireStoreList.map(x => x).filter(task => task.isCompleted === true)\r\n        stateCompletedList = store.getState().completedTasks.map(x => x).filter(task => task.sectionIdentifier !== props.identifier).concat(fireStoreCompletedList)\r\n        TaskDataController.pushCompletedTask(stateCompletedList)\r\n\r\n        // The code above will push tasks to state. This allows for showing copmpleted tasks, as well as clearing all tasks without any bugs or duplicate tasks.\r\n\r\n\r\n        //This handles sorting tasks by sort type.\r\n        // 7: No sorting\r\n        // 6: sort by priority descending\r\n        //  5: sort by priority ascending\r\n        // 4: sort by time made descending\r\n        //  3: sort by time made ascending\r\n        // 2: sort alphabetically descending\r\n        //  1: sort by alphabetically ascending\r\n\r\n        if(props.sortType < 7){\r\n            if(props.sortType === 1){\r\n                fireStoreList.sort(function(task1, task2) {\r\n                    let task1Text = task1.text.toUpperCase();\r\n                    let task2Text = task2.text.toUpperCase();\r\n                    return (task1Text < task2Text) ? -1 : (task1Text > task2Text) ? 1 : 0;\r\n                });\r\n            }\r\n            else if(props.sortType === 2){\r\n                fireStoreList.sort(function(task1, task2) {\r\n                    let task1Text = task1.text.toUpperCase();\r\n                    let task2Text = task2.text.toUpperCase();\r\n                    return (task1Text > task2Text) ? -1 : (task1Text > task2Text) ? 1 : 0;\r\n                });\r\n            }\r\n            else if(props.sortType === 3) {\r\n                    fireStoreList.sort(function(task1, task2) {\r\n                        let task1date = task1.timeMade;\r\n                        let task2date = task2.timeMade;\r\n                        return (task1date < task2date) ? -1 : (task1date > task2date) ? 1 : 0;\r\n                    });\r\n                }\r\n            else if(props.sortType === 4){\r\n                fireStoreList.sort(function(task1, task2) {\r\n                    let task1date = task1.timeMade;\r\n                    let task2date = task2.timeMade;\r\n                    return (task1date > task2date) ? -1 : (task1date > task2date) ? 1 : 0;\r\n                });\r\n            }\r\n            else if(props.sortType === 5){\r\n                fireStoreList.sort(function(task1, task2) {\r\n                    let task1priority = task1.priority;\r\n                    let task2priority = task2.priority;\r\n                    return (task1priority > task2priority) ? -1 : (task1priority > task2priority) ? 1 : 0;\r\n                });\r\n            }\r\n            else if(props.sortType === 6){\r\n                fireStoreList.sort(function(task1, task2) {\r\n                    let task1priority = task1.priority;\r\n                    let task2priority = task2.priority;\r\n                    return (task1priority < task2priority) ? -1 : (task1priority > task2priority) ? 1 : 0;\r\n                });\r\n            }\r\n        }\r\n\r\n\r\n\r\n    }\r\n\r\n\r\n\r\n    return (\r\n        <div>\r\n            {fireStoreList && <SectionBar\r\n                sectionTitle = {props.title}\r\n                className={props.identifier}\r\n                identifier ={props.identifier}\r\n                sortType = {props.sortType}\r\n                isToggled ={isToggled}\r\n                sharedWith ={props.sharedWith}\r\n                isOwned = {props.owner === store.getState().userID}\r\n                />}\r\n            { isToggled && fireStoreList &&\r\n                <TaskList tasks={fireStoreList}/>}\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\nfunction mapToState(state, ownProps) {\r\n     return {\r\n         isToggledList: store.getState().sectionsToggled,\r\n     }\r\n }\r\n\r\nexport default connect(mapToState)(SectionContainer)\r\n\r\n\r\n","import TaskDataController from \"../../modules/dataController/TaskDataController\"\r\n\r\n/*\r\nprops: {\r\n    text:string;\r\n    isCompleted:boolean\r\n    id:string\r\n}\r\n*/\r\n\r\n// This creates the individual completed task for mobile view.\r\n// much of this is duplicate code that needs to be separate from\r\n// the default task type, due to being a special completed task.\r\n\r\nexport default function CompletedSectionTask(props) {\r\n    const classes = `task-item`\r\n    const cssID = props.isCompleted ? 'completedTask' : ''\r\n\r\n\r\n\r\n    // Why hello ugly getAria functions that are 80 lines long! I would love to make these cleaner, but currently\r\n    // they do what they need to with getting what needs to be returned to the screenReader, and I have one hour\r\n    // left to turn this in so there it is!\r\n\r\n    function getAriaCheckbox(){\r\n        const currentSectionText = props.text\r\n        if (currentSectionText){\r\n            if (props.text){\r\n                if (props.isCompleted){\r\n                    return \"This is the checked checkbox for the task \" + props.text + \" in\" + currentSectionText\r\n                }\r\n                else{\r\n                    return \"This is the unchecked checkbox for the task \" + props.text + \" in\" + currentSectionText\r\n                }\r\n            }\r\n            else{\r\n                if (props.isCompleted){\r\n                    return \"This is the checked checkbox for an empty task in\" + currentSectionText\r\n                }\r\n                else{\r\n                    return \"This is the unchecked checkbox for an empty task in\" + currentSectionText\r\n                }\r\n            }\r\n        }\r\n        else{\r\n            if (props.text){\r\n                if (props.isCompleted){\r\n                    return \"This is the checked checkbox for the task \" + props.text + \" in an empty section.\"\r\n                }\r\n                else{\r\n                    return \"This is the unchecked checkbox for the task \" + props.text + \" in an empty section.\"\r\n                }\r\n            }\r\n            else{\r\n                if (props.isCompleted){\r\n                    return \"This is the checked checkbox for an empty task in in an empty section.\"\r\n                }\r\n                else{\r\n                    return \"This is the unchecked checkbox for an empty task in an empty section.\"\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    function getAriaTask(){\r\n        const currentSectionText = props.text\r\n        if (currentSectionText){\r\n            if (props.text){\r\n                if (props.isCompleted){\r\n                    return \"edit the completed task \" + props.text + \" in\" + currentSectionText + \".\"\r\n                }\r\n                else{\r\n                    return \"edit the uncompleted task \" + props.text + \" in\" + currentSectionText + \".\"\r\n                }\r\n            }\r\n            else{\r\n                if (props.isCompleted){\r\n                    return \"edit the completed empty task in\" + currentSectionText + \".\"\r\n                }\r\n                else{\r\n                    return \"edit the uncompleted empty task  in\" + currentSectionText + \".\"\r\n                }\r\n            }\r\n        }\r\n        else{\r\n            if (props.text){\r\n                if (props.isCompleted){\r\n                    return \"edit the completed task \" + props.text + \" in an empty section.\"\r\n                }\r\n                else{\r\n                    return \"edit the uncompleted task \" + props.text + \" in an empty section.\"\r\n                }\r\n            }\r\n            else{\r\n                if (props.isCompleted){\r\n                    return \"edit a completed empty task in in an empty section.\"\r\n                }\r\n                else{\r\n                    return \"edit a uncompleted empty task in an empty section.\"\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n    return (\r\n        <div class={classes} id = {\"markedCompleted\"}>\r\n            <input\r\n                aria-label= {getAriaCheckbox()}\r\n                alt='task completion status'\r\n                class='checkbox'\r\n                type=\"checkbox\"\r\n                value={ props.isCompleted}\r\n                onChange= {(e) => handleCheckBoxEvent(props.id, props.sectionIdentifier, props.isCompleted)}\r\n                checked= {props.isCompleted}\r\n            />\r\n            <input\r\n                aria-label={getAriaTask()}\r\n                class='task-text'\r\n                type='text'\r\n                alt='task text'\r\n                onChange= { (e) => handleTextEvent(props.id, props.sectionIdentifier,e)}\r\n                value={props.text}\r\n            />\r\n        </div>\r\n    )\r\n\r\n}\r\n\r\nfunction handleTextEvent(id, identifier, event) {\r\n\r\n    const newText = event.currentTarget.value\r\n\r\n    TaskDataController.updateTaskText(id, identifier, newText)\r\n}\r\n\r\nfunction handleCheckBoxEvent(id, identifier, isToggled) {\r\n    TaskDataController.toggleTaskCompletion(id, identifier, isToggled)\r\n}","import CompletedSectionTask from \"./completedSectionTask\";\r\n\r\n\r\n\r\n\r\n\r\n/*\r\nprops:{\r\n    tasks: TaskItem[]\r\n\r\n}\r\n*/\r\n\r\n// creates the list of completed Tasks for the completed tasks list\r\n\r\nexport default function CompletedSectionsTaskList(props) {\r\n\r\n    return (\r\n        <div class='container'>\r\n            {\r\n                props.tasks.map(task => {\r\n                    return <CompletedSectionTask\r\n                        {...task}\r\n                        key={task.id}\r\n                    />\r\n                })\r\n            }\r\n        </div>\r\n    )}\r\n","import SectionContainer from \"./SectionContainer\";\r\nimport { connect } from \"react-redux\"\r\nimport React, { useEffect, useState } from 'react';\r\nimport CompletedSection from \"./completedSection\";\r\nimport store from \"../../modules/dataController/store\";\r\nimport CompletedSectionsTaskList from \"./completedSectionsTaskList\";\r\n\r\n/*\r\nprops:{\r\n    sections: Section\r\n\r\n */\r\n// Returns a list of sections\r\n\r\n// CompletedSectionsTaskList and completed section is also returned, as the two are\r\n// separate from normal sections\r\nfunction SectionList(props){\r\n    if (props.sections){\r\n        return(\r\n            <div class='sectionsContainer'>\r\n                {\r\n                    props.sections.map(section => {\r\n                        return <SectionContainer\r\n                            {...section}\r\n                            key={section.identifier}\r\n                        />\r\n                    })\r\n                }\r\n            <CompletedSection/>\r\n            { props.isCompletedTasksToggled &&\r\n            <CompletedSectionsTaskList tasks={props.completedTasks}/>}\r\n            </div>\r\n        )\r\n    }\r\n    else{\r\n        return null\r\n    }\r\n}\r\n\r\n// export default SectionList\r\n\r\n\r\nfunction mapStateToProps(state){\r\n    return{\r\n        isCompletedTasksToggled: store.getState().showCompletedTasks,\r\n        completedTasks: store.getState().completedTasks}\r\n}\r\n\r\nexport default connect(mapStateToProps)(SectionList)","import { faAngleRight } from \"@fortawesome/free-solid-svg-icons\"\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\"\r\nimport \"../../css/sidebar.css\"\r\n\r\n\r\n// The components in otherDisplays are visible when the display is in landscape or in desktop view.\r\n\r\n\r\n\r\nfunction SideBarButton(props) {\r\n    // Sidebar button is treated similarly to SectionButton in newSection,  but does not rotate and will instead\r\n    // scroll to the Section element in sideList\r\n\r\n    const currentSectionText = props.title\r\n        //another currentSectionText for aria-label!!!\r\n\r\n    const icon = faAngleRight\r\n\r\n    return (\r\n        <button class=\"SideBarButton\" onClick={(e) => handleOnClick(props.identifier)}\r\n        aria-label={currentSectionText ? \"Press to scroll to \" + currentSectionText : \"Press to scroll to a section without a title\"}\r\n        aria-hidden=\"false\">\r\n            <FontAwesomeIcon icon={icon} />\r\n        </button>\r\n    )\r\n}\r\n\r\n\r\n\r\n\r\nfunction handleOnClick(identifier) {\r\n    // handles scrolling to the element, uses scrollIntoView to acomplish this.\r\n    // this should work on all popular platforms minus internet explorer, and\r\n    // safari won't support the options like smooth, block, and inline.\r\n    let sectionToScrollTo = document.getElementById(identifier+\"list\");\r\n    sectionToScrollTo.scrollIntoView({behavior: \"smooth\", block: \"start\", inline: \"start\"})\r\n}\r\n\r\n\r\n\r\nexport default SideBarButton","import \"../../css/sidebar.css\"\r\nimport SideBarButton from \"./sideBarButton\";\r\nimport TaskDataController from \"../../modules/dataController/TaskDataController\";\r\nimport SectionAddTaskButton from \"../newSection/sectionAddTask\";\r\nimport PrioritySortButton from \"../newSection/priorityButton\";\r\nimport store from \"../../modules/dataController/store\";\r\nimport ShareSectionButton from \"../newSection/shareSectionButton\";\r\nimport RemoveSectionSharedButton from \"../newSection/removeSharedButton\";\r\n\r\n// Will create the Individual elements inside the sideBarlist.\r\n// contains a sideBarButton, an input field for the section title, a share or remove section button,\r\n// a sort button, and a add task button for the section\r\n\r\nexport default function SideBarElement(props) {\r\n    // cssID determines whether the sidebar is shared or owned by the user.\r\n\r\n    let cssID\r\n    let classes = \"sideBarElement\"\r\n    if (props.identifier !== 'toDo' && props.identifier !== 'completed'){\r\n        cssID = \"otherSectionssideBar\";\r\n    }\r\n\r\n\r\n\r\n\r\n    const isOwned  = props.owner === store.getState().userID\r\n\r\n    if(!isOwned){\r\n        cssID = 'sideBarElementSHARED'\r\n    }\r\n\r\n    return(\r\n        <div\r\n            class=\"sideBarElement\"\r\n            id={cssID}>\r\n            <SideBarButton\r\n                identifier = {props.identifier}\r\n                title = {props.title}/>\r\n            <input\r\n                aria-label={props.title ? \"edit the title for the section \" + props.title : \"edit the title for a section with an empty title\"}\r\n                class=\"side-bar-title\"\r\n                id={cssID}\r\n                // class=\"bar-title\"\r\n                type='text'\r\n                alt='task text'\r\n                // alt='Section text'\r\n                onChange= { (e) => handleTextEvent(props.identifier,e)}\r\n                value={props.title}/>\r\n            <div className=\"sideBarButtons\">\r\n            {isOwned && <ShareSectionButton\r\n                sharedWith = {props.sharedWith}\r\n                identifier = {props.identifier}/>}\r\n            {!isOwned && <RemoveSectionSharedButton\r\n                sharedWith = {props.sharedWith}\r\n                identifier = {props.identifier}/>}\r\n\r\n            <PrioritySortButton\r\n                identifier = {props.identifier}\r\n                sectionTitle = {props.title}\r\n                sortType = {props.sortType}/>\r\n            <SectionAddTaskButton\r\n                identifier = {props.identifier}/>\r\n            </div>\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\nfunction handleTextEvent(id,event) {\r\n    const text = event.currentTarget.value\r\n    TaskDataController.updateSectionText(id,text)\r\n}","import \"../../css/sidebar.css\"\r\nimport SideBarButton from \"./sideBarButton\";\r\n\r\n\r\n// Will create the completed section inside the sidebar on the left.\r\n// contains a sideBarButton.\r\n\r\nexport default function SideBarCompletedSection(props) {\r\n    // cssID given to properly identify the section\r\n\r\n    let cssID = \"completedsideBar\"\r\n\r\n\r\n\r\n\r\n    return(\r\n        <div\r\n            class=\"sideBarElement\"\r\n            id={cssID}>\r\n            <SideBarButton\r\n                identifier = \"completedSectionHeader\"\r\n                title = \"Completed\"/>\r\n            <div\r\n                aria-label=\"This is the Completed Section Text\"\r\n                class=\"bar-title\"\r\n                id=\"completedsideBar1\"\r\n                // class=\"bar-title\"\r\n                type='text'\r\n                alt='task text'\r\n                // alt='Section text'\r\n                value=\"Completed\">Completed</div>\r\n        </div>\r\n    )\r\n}\r\n","import { connect} from \"react-redux\";\r\nimport TaskDataController from \"../../modules/dataController/TaskDataController\";\r\nimport \"../../css/sidebar.css\"\r\nimport SideBarElement from \"./sideBarElement\";\r\nimport SideBarCompletedSection from \"./sideBarCompletedSection\";\r\n\r\n\r\n// Creates the sidebar on the left side of the viewport in desktop/portrait view.\r\n// contains a list of sidebar elements from sideBarElement.\r\n\r\nfunction Sidebar(props) {\r\n    if (props.sections) {\r\n        return (\r\n            <div class=\"SideBarcontainer\">\r\n                {\r\n                    props.sections.map(section => {\r\n                        return <SideBarElement\r\n                            {...section}\r\n                            key={section.identifier}\r\n                        />\r\n                    })\r\n                }\r\n                <SideBarCompletedSection/>\r\n            </div>\r\n        )\r\n    }\r\n    else{\r\n        return null\r\n    }\r\n}\r\n\r\nexport default Sidebar","import TaskDataController from \"../../modules/dataController/TaskDataController\"\r\nimport \"../../css/sideList.css\"\r\nimport store from \"../../modules/dataController/store\";\r\nimport TaskPriorityButton from \"../newSection/taskPriorityButton\";\r\nimport SelectionMaintainingInput from \"../../modules/dataController/SelectionMaintainingInput\";\r\n\r\n/*\r\nprops: {\r\n    text:string;\r\n    isCompleted:boolean\r\n    id:string\r\n}\r\n*/\r\n\r\n// this is the sidelistelementtask, which creates the tasks inside the sidelist.\r\n\r\nexport default function SideListElementTask(props) {\r\n    const cssID = props.isCompleted ? 'completedTask' : ''\r\n\r\n\r\n    //I felt that, as messy as this code is, I needed to account for any variables when running a screenReader.\r\n    // For instance, if a task was empty, was there another way to identify it? Shouldn't the section name also\r\n    // be returned when using a screen reader?\r\n    // While very ugly, this means that almost all possible cases have been accounted for.\r\n\r\n    function getAriaCheckbox(){\r\n        // returns what should be said in the screenReader when the checkbox is focused.\r\n\r\n        const currentSectionText = props.text\r\n        if (currentSectionText){\r\n            if (props.text){\r\n                if (props.isCompleted){\r\n                    return \"This is the checked checkbox for the task \" + props.text + \" in\" + currentSectionText\r\n                }\r\n                else{\r\n                    return \"This is the unchecked checkbox for the task \" + props.text + \" in\" + currentSectionText\r\n                }\r\n            }\r\n            else{\r\n                if (props.isCompleted){\r\n                    return \"This is the checked checkbox for an empty task in\" + currentSectionText\r\n                }\r\n                else{\r\n                    return \"This is the unchecked checkbox for an empty task in\" + currentSectionText\r\n                }\r\n            }\r\n        }\r\n        else{\r\n            if (props.text){\r\n                if (props.isCompleted){\r\n                    return \"This is the checked checkbox for the task \" + props.text + \" in an empty section.\"\r\n                }\r\n                else{\r\n                    return \"This is the unchecked checkbox for the task \" + props.text + \" in an empty section.\"\r\n                }\r\n            }\r\n            else{\r\n                if (props.isCompleted){\r\n                    return \"This is the checked checkbox for an empty task in in an empty section.\"\r\n                }\r\n                else{\r\n                    return \"This is the unchecked checkbox for an empty task in an empty section.\"\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    function getAriaTask(){\r\n        // returns what should be said in the screenReader when the task input text is focused.\r\n\r\n        const currentSectionText = props.text\r\n        if (currentSectionText){\r\n            if (props.text){\r\n                if (props.isCompleted){\r\n                    return \"edit the completed task \" + props.text + \" in\" + currentSectionText + \".\"\r\n                }\r\n                else{\r\n                    return \"edit the uncompleted task \" + props.text + \" in\" + currentSectionText + \".\"\r\n                }\r\n            }\r\n            else{\r\n                if (props.isCompleted){\r\n                    return \"edit the completed empty task in\" + currentSectionText + \".\"\r\n                }\r\n                else{\r\n                    return \"edit the uncompleted empty task  in\" + currentSectionText + \".\"\r\n                }\r\n            }\r\n        }\r\n        else{\r\n            if (props.text){\r\n                if (props.isCompleted){\r\n                    return \"edit the completed task \" + props.text + \" in an empty section.\"\r\n                }\r\n                else{\r\n                    return \"edit the uncompleted task \" + props.text + \" in an empty section.\"\r\n                }\r\n            }\r\n            else{\r\n                if (props.isCompleted){\r\n                    return \"edit a completed empty task in in an empty section.\"\r\n                }\r\n                else{\r\n                    return \"edit a uncompleted empty task in an empty section.\"\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div class=\"SideListElementTask\" id = {cssID+\"markedCompleted\"}>\r\n            <input\r\n                aria-label= {getAriaCheckbox()}\r\n                alt='task completion status'\r\n                class='sideListCheckbox'\r\n                type=\"checkbox\"\r\n                value={ props.isCompleted}\r\n                onChange= {(e) => handleCheckBoxEvent(props.id, props.sectionIdentifier)}\r\n                checked= {props.isCompleted}\r\n            />\r\n            <TaskPriorityButton\r\n                sectionTitle = {props.text}\r\n                sectionIdentifier = {props.sectionIdentifier}\r\n                identifier = {props.id}\r\n                id = {props.id}\r\n                value = {props.priority}/>\r\n            <SelectionMaintainingInput\r\n                aria-label={getAriaTask()}\r\n                class='SideListElementTaskText'\r\n                type='text'\r\n                alt='task text'\r\n                id ={cssID}\r\n                onChange= { (e) => handleTextEvent(props.id, props.sectionIdentifier,e)}\r\n                value={props.text}\r\n            />\r\n        </div>\r\n    )\r\n\r\n}\r\n\r\nfunction handleTextEvent(id, identifier, event) {\r\n    const text = event.currentTarget.value\r\n    TaskDataController.updateTaskText(id, identifier, text)\r\n}\r\n\r\nfunction handleCheckBoxEvent(id, identifier, isToggled) {\r\n    TaskDataController.toggleTaskCompletion(id, identifier, isToggled)\r\n}","import TaskDataController from \"../../modules/dataController/TaskDataController\";\r\nimport \"../../css/sideList.css\"\r\nimport SideListElementTask from \"./sideListElementTask\";\r\nimport {collectionName, database} from \"../../modules/dataController/firestore\";\r\nimport {useCollection} from \"react-firebase-hooks/firestore\";\r\nimport store from \"../../modules/dataController/store\";\r\n\r\n\r\n\r\n// creates the element inside of sidelist, these will contain a section title, a task's checkbox, and a sidelistelement\r\n// task, which is basically a task but in desktop view.\r\n\r\n\r\n\r\n// HERES THE NIGHTMARISH SORTING AND GETTING TASKS AND PUSHING TASKS AND COMPLETED TASKS TO THE STATE AGAIN!\r\n// YAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAY YOU LOVE TO SEE DUPLICATED CODE, EXACTLY 66 LINES !\r\n\r\n// Creates the element inside sidelist that contains a section and it's tasks.\r\nexport default function SideListElement(props) {\r\n\r\n    const taskRef = database.collection(collectionName).doc(props.identifier).collection('tasks')\r\n    const [value, loading, error] = useCollection(taskRef);\r\n\r\n\r\n    let fireStoreList = null;\r\n    let fireStoreCompletedList = null;\r\n    let stateCompletedList = null;\r\n\r\n    if (value) {\r\n        fireStoreList = value.docs.map((doc) => {\r\n            return {...doc.data()}\r\n        });\r\n\r\n        const allTasks = store.getState().taskStack.map(x => x).filter(task => task.sectionIdentifier !== props.identifier).concat(fireStoreList)\r\n        TaskDataController.setTasksToStack(allTasks)\r\n\r\n        const fireStoreCompletedList = fireStoreList.map(x => x).filter(task => task.isCompleted === true)\r\n        stateCompletedList = store.getState().completedTasks.map(x => x).filter(task => task.sectionIdentifier !== props.identifier).concat(fireStoreCompletedList)\r\n        TaskDataController.pushCompletedTask(stateCompletedList)\r\n\r\n        if(props.sortType < 7){\r\n            if(props.sortType === 1){\r\n                fireStoreList.sort(function(task1, task2) {\r\n                    let task1Text = task1.text.toUpperCase();\r\n                    let task2Text = task2.text.toUpperCase();\r\n                    return (task1Text < task2Text) ? -1 : (task1Text > task2Text) ? 1 : 0;\r\n                });\r\n            }\r\n            else if(props.sortType === 2){\r\n                fireStoreList.sort(function(task1, task2) {\r\n                    let task1Text = task1.text.toUpperCase();\r\n                    let task2Text = task2.text.toUpperCase();\r\n                    return (task1Text > task2Text) ? -1 : (task1Text > task2Text) ? 1 : 0;\r\n                });\r\n            }\r\n            else if(props.sortType === 3) {\r\n                fireStoreList.sort(function(task1, task2) {\r\n                    let task1date = task1.timeMade;\r\n                    let task2date = task2.timeMade;\r\n                    return (task1date < task2date) ? -1 : (task1date > task2date) ? 1 : 0;\r\n                });\r\n            }\r\n            else if(props.sortType === 4){\r\n                fireStoreList.sort(function(task1, task2) {\r\n                    let task1date = task1.timeMade;\r\n                    let task2date = task2.timeMade;\r\n                    return (task1date > task2date) ? -1 : (task1date > task2date) ? 1 : 0;\r\n                });\r\n            }\r\n            else if(props.sortType === 5){\r\n                fireStoreList.sort(function(task1, task2) {\r\n                    let task1priority = task1.priority;\r\n                    let task2priority = task2.priority;\r\n                    return (task1priority > task2priority) ? -1 : (task1priority > task2priority) ? 1 : 0;\r\n                });\r\n            }\r\n            else if(props.sortType === 6){\r\n                fireStoreList.sort(function(task1, task2) {\r\n                    let task1priority = task1.priority;\r\n                    let task2priority = task2.priority;\r\n                    return (task1priority < task2priority) ? -1 : (task1priority > task2priority) ? 1 : 0;\r\n                });\r\n            }\r\n        }\r\n\r\n\r\n\r\n    }\r\n\r\n\r\n\r\n    return(\r\n        <div>\r\n            {fireStoreList &&\r\n        <div\r\n            class=\"SideListElement\"\r\n            aria-label={props.title ? \"this is the section for \" + props.title : \"this is a section without a title.\"}\r\n            id = {props.identifier+\"list\"}>\r\n            <input\r\n                aria-label={props.title ? \"Edit the title for section \" + props.title : \"edit the title for a section without a title.\"}\r\n                className=\"sideListTitle\"\r\n                // class=\"bar-title\"\r\n                type='text'\r\n                alt='task text'\r\n                // alt='Section text'\r\n                onChange={(e) => handleTextEvent(props.identifier, e)}\r\n                value={props.title}\r\n            />\r\n            <div class='sideListTask'>{\r\n                fireStoreList.map(task => {\r\n                    return <SideListElementTask\r\n                        {...task}\r\n                        key={task.id}\r\n                    />\r\n                })\r\n            }\r\n\r\n            </div>\r\n        </div>}\r\n        </div>\r\n    )\r\n}\r\n\r\nfunction handleTextEvent(id,event) {\r\n    const text = event.currentTarget.value\r\n    TaskDataController.updateSectionText(id,text)\r\n}\r\n","import TaskDataController from \"../../modules/dataController/TaskDataController\"\r\nimport \"../../css/sideList.css\"\r\n\r\n/*\r\nprops: {\r\n    text:string;\r\n    isCompleted:boolean\r\n    id:string\r\n}\r\n*/\r\n\r\n// these are the completed tasks in the side list completed section.\r\n// These also need to be read by screen readers, so there's a massive\r\n// list of stuff to read.\r\n// I debated whether or not to put priority sort inside the completed tasks\r\n// list, but I decided against it out of worrying about messing up\r\n// sorting in other sections.\r\n\r\nexport default function SideListCompletedSectionTask(props) {\r\n\r\n\r\n\r\n    //I felt that, as messy as this code is, I needed to account for any variables when running a screenReader.\r\n    // For instance, if a task was empty, was there another way to identify it? Shouldn't the section name also\r\n    // be returned when using a screen reader?\r\n    // While very ugly, this means that almost all possible cases have been accounted for.\r\n\r\n    function getAriaCheckbox(){\r\n        // returns what should be said in the screenReader when the checkbox is focused.\r\n\r\n        const currentSectionText = props.text\r\n        if (currentSectionText){\r\n            if (props.text){\r\n                if (props.isCompleted){\r\n                    return \"This is the checked checkbox for the task \" + props.text + \" in\" + currentSectionText\r\n                }\r\n                else{\r\n                    return \"This is the unchecked checkbox for the task \" + props.text + \" in\" + currentSectionText\r\n                }\r\n            }\r\n            else{\r\n                if (props.isCompleted){\r\n                    return \"This is the checked checkbox for an empty task in\" + currentSectionText\r\n                }\r\n                else{\r\n                    return \"This is the unchecked checkbox for an empty task in\" + currentSectionText\r\n                }\r\n            }\r\n        }\r\n        else{\r\n            if (props.text){\r\n                if (props.isCompleted){\r\n                    return \"This is the checked checkbox for the task \" + props.text + \" in an empty section.\"\r\n                }\r\n                else{\r\n                    return \"This is the unchecked checkbox for the task \" + props.text + \" in an empty section.\"\r\n                }\r\n            }\r\n            else{\r\n                if (props.isCompleted){\r\n                    return \"This is the checked checkbox for an empty task in in an empty section.\"\r\n                }\r\n                else{\r\n                    return \"This is the unchecked checkbox for an empty task in an empty section.\"\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    function getAriaTask(){\r\n        // returns what should be said in the screenReader when the task input text is focused.\r\n\r\n        const currentSectionText = props.text\r\n        if (currentSectionText){\r\n            if (props.text){\r\n                if (props.isCompleted){\r\n                    return \"edit the completed task \" + props.text + \" in\" + currentSectionText + \".\"\r\n                }\r\n                else{\r\n                    return \"edit the uncompleted task \" + props.text + \" in\" + currentSectionText + \".\"\r\n                }\r\n            }\r\n            else{\r\n                if (props.isCompleted){\r\n                    return \"edit the completed empty task in\" + currentSectionText + \".\"\r\n                }\r\n                else{\r\n                    return \"edit the uncompleted empty task  in\" + currentSectionText + \".\"\r\n                }\r\n            }\r\n        }\r\n        else{\r\n            if (props.text){\r\n                if (props.isCompleted){\r\n                    return \"edit the completed task \" + props.text + \" in an empty section.\"\r\n                }\r\n                else{\r\n                    return \"edit the uncompleted task \" + props.text + \" in an empty section.\"\r\n                }\r\n            }\r\n            else{\r\n                if (props.isCompleted){\r\n                    return \"edit a completed empty task in in an empty section.\"\r\n                }\r\n                else{\r\n                    return \"edit a uncompleted empty task in an empty section.\"\r\n                }\r\n            }\r\n        }\r\n    }\r\n    return (\r\n        <div class=\"SideListElementTask\">\r\n            <input\r\n                aria-label= {getAriaCheckbox()}\r\n                alt='task completion status'\r\n                class='sideListCheckbox'\r\n                type=\"checkbox\"\r\n                value={ props.isCompleted}\r\n                onChange= {(e) => handleCheckBoxEvent(props.id, props.sectionIdentifier, props.isCompleted)}\r\n                checked= {props.isCompleted}\r\n            />\r\n            <input\r\n                aria-label={getAriaTask()}\r\n                class='SideListElementTaskText'\r\n                type='text'\r\n                alt='task text'\r\n                id = 'completedSectionTaskText'\r\n                onChange= { (e) => handleTextEvent(props.id, props.sectionIdentifier,e)}\r\n                value={props.text}\r\n            />\r\n        </div>\r\n    )\r\n\r\n}\r\n\r\nfunction handleTextEvent(id, identifier, event) {\r\n    const text = event.currentTarget.value\r\n    TaskDataController.updateTaskText(id, identifier, text)\r\n}\r\n\r\nfunction handleCheckBoxEvent(id, identifier, isToggled) {\r\n    TaskDataController.toggleTaskCompletion(id, identifier, isToggled)\r\n}","import \"../../css/sideList.css\"\r\nimport store from \"../../modules/dataController/store\";\r\nimport {connect} from \"react-redux\";\r\nimport SideListCompletedSectionTask from \"./sideListCompletedSectionTask\";\r\n\r\n\r\n\r\n// creates the completed section and it's tasks in the right side list.\r\n\r\nfunction SideListCompletedSection(props) {\r\n\r\n        return (\r\n            <div\r\n                class=\"SideListElement\"\r\n                aria-label=\"This is a Completed Section Header\"\r\n                id = \"completedSectionHeaderlist\">\r\n                <div\r\n                    aria-label=\"This is the completed Section Header\"\r\n                    className=\"sideListTitle\"\r\n                    // class=\"bar-title\"\r\n                    type='text'\r\n                    alt='task text'\r\n                    // alt='Section text'\r\n                    value=\"Completed\"\r\n                >Completed</div>\r\n                <div>{\r\n                props.completedTasks.map(task => {\r\n                    return <SideListCompletedSectionTask\r\n                        {...task}\r\n                        key={task.id}\r\n                    />\r\n                })}\r\n                </div>\r\n            </div>\r\n        )\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nfunction mapStateToProps(state){\r\n    return{\r\n        completedTasks: store.getState().completedTasks}\r\n}\r\n\r\nexport default connect(mapStateToProps)(SideListCompletedSection)\r\n","import SideListElement from \"./sideListElement\";\r\nimport React, { useEffect, useState } from 'react';\r\nimport SideListCompletedSection from \"./sideListCompletedSection\";\r\n\r\n\r\n\r\n// Creates the scrollable list on the right side of the viewport made up of sideListElements\r\n// includes the completed special section as well\r\nfunction SideList(props) {\r\n    if (props.sections) {\r\n        return (\r\n            <div class='SideListContainer' id=\"theSideListContainer\">\r\n                {\r\n                    props.sections.map(section => {\r\n                        return <SideListElement\r\n                            {...section}\r\n                            key={section.identifier}\r\n                        />\r\n                    })\r\n                }\r\n                <SideListCompletedSection/>\r\n            </div>\r\n        )\r\n    }\r\n    else{\r\n        return null\r\n    }\r\n}\r\n\r\n\r\nexport default SideList","import \"../css/banner.css\"\r\n\r\n\r\n\r\n// This is the pink background for the sidebar.\r\nexport default function SideBarBackground(props) {\r\n\r\n    return (\r\n        <div class=\"SideBarBackground\">\r\n        </div>\r\n    )\r\n}","\r\n\r\n\r\n/*\r\n\r\n\r\nprops: {\r\n    text: string;\r\n    command: Function\r\n    parameters: string\r\n    icon: FontAwesomeIcon\r\n}\r\n*/\r\n\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\n\r\nexport default function PriorityMenuItem(props) {\r\n    // creates a button in the priority menu with a command from props.\r\n    return (\r\n        <button onClick={() => props.command(props)} class=\"action-item\"\r\n                aria-label={\"This is the\" + props.text + \"button in the action menu, Press to perform the action.\" }>\r\n            { props.icon && <FontAwesomeIcon className = \"priorityIcon\" icon= {props.icon}/> }\r\n            <div class=\"action-text\">\r\n                <p> {props.text} </p>\r\n            </div>\r\n        </button>\r\n    )\r\n}\r\n\r\n","import \"../../css/prioritySortButton.css\"\r\nimport TaskDataController from \"../../modules/dataController/TaskDataController.js\"\r\nimport { faMinus, faSortAmountUpAlt, faSortAmountDownAlt } from \"@fortawesome/free-solid-svg-icons\"\r\nimport AppDataController from \"../../modules/dataController/AppDataController.js\"\r\nimport store from \"../../modules/dataController/store\";\r\nimport {connect} from \"react-redux\";\r\nimport PriorityMenuItem from \"./priorityMenuItem\";\r\n\r\n// This file is a bit of a doozy.\r\n// Sort type function gets the current sort type from the state.\r\n// the state gets this from the current selected section\r\n// This is used to show how the section is being sorted.\r\n\r\nfunction sortType(){\r\n    return(store.getState().selectedSection.sortType)\r\n}\r\n\r\n// Alphasort, and datesort and the rest, are all used to sort\r\n// by specific parameters. Because the options to sort\r\n// ascending/descending are there but only if already sorted\r\n// by that type, we then check if that's the option being chosen.\r\n\r\nfunction alphaSort() {\r\n    let sortValue = store.getState().selectedSection.sortType\r\n    if(sortValue === 1){\r\n        TaskDataController.setSectionPriority(2)\r\n    }\r\n    else{\r\n        TaskDataController.setSectionPriority(1)\r\n    }\r\n}\r\n\r\nfunction dateSort() {\r\n    let sortValue = store.getState().selectedSection.sortType\r\n    if(sortValue === 3){\r\n        TaskDataController.setSectionPriority(4)\r\n    }\r\n    else{\r\n        TaskDataController.setSectionPriority(3)\r\n    }\r\n}\r\n\r\nfunction prioritySort() {\r\n    let sortValue = store.getState().selectedSection.sortType\r\n    if(sortValue === 5){\r\n        TaskDataController.setSectionPriority(6)\r\n    }\r\n    else{\r\n        TaskDataController.setSectionPriority(5)\r\n    }\r\n}\r\n\r\n\r\n// Resets sorting, in case you do not want any sorting.\r\nfunction resetSort() {\r\n    TaskDataController.setSectionPriority(7)\r\n}\r\n\r\n\r\n\r\n\r\n\r\n// Creates the priority sort menu, includes a list of options to choose from\r\n// includes a title as well to show what sorting is being used.\r\n\r\nfunction PriorityMenu(props, selectedSection) {\r\n\r\n    let menuItems = [\r\n        // Text, commands, and icons present in the action menu.\r\n        {text: \"Sort alphabetically\", command:alphaSort, icon: sortType() == 1 ? faSortAmountDownAlt: faSortAmountUpAlt},\r\n        {text: \"Sort by priority level\", command:prioritySort, icon: sortType() == 5 ? faSortAmountDownAlt: faSortAmountUpAlt},\r\n        {text: \"Sort by date created\", command: dateSort, icon: sortType() == 3 ? faSortAmountDownAlt: faSortAmountUpAlt},\r\n        {text: \"Reset Sort\", command: resetSort, icon: faMinus}\r\n    ]\r\n\r\n\r\n    function sortTitle(){\r\n        const currentSortType = store.getState().selectedSection.sortType\r\n        if (currentSortType === 7){\r\n            return \"not sorting\"\r\n        }\r\n        if (currentSortType === 6){\r\n            return \"Sorting by priority level descending\"\r\n        }\r\n        if (currentSortType === 5){\r\n            return \"Sorting by priority level ascending\"\r\n        }\r\n        if (currentSortType === 4){\r\n            return \"Sorting by date created ascending\"\r\n        }\r\n        if (currentSortType === 3){\r\n            return \"Sorting by date created descending\"\r\n        }\r\n        if (currentSortType === 2){\r\n            return \"Sorting in alphabetical order descending\"\r\n        }\r\n        if (currentSortType === 1){\r\n            return \"Sorting in alphabetical order ascending\"\r\n        }\r\n    }\r\n\r\n\r\n    // returns a component that contains the commands listed above.\r\n    return (\r\n        <button class='overlay'onClick= {AppDataController.hidePriorityMenu}\r\n                aria-label=\"Click here to exit the action menu.\">\r\n            <div class='priority-container'>\r\n                <div class ='priority-container-title'>{sortTitle()}</div>\r\n                { menuItems.map(menuItem => {\r\n                    return <PriorityMenuItem {...menuItem} key={menuItem.text}/>\r\n                })}\r\n            </div>\r\n        </button>\r\n\r\n    )\r\n}\r\n\r\nfunction mapStateToProps(state){\r\n    return{\r\n        selectedSection: store.getState().selectedSection,\r\n}}\r\n\r\nexport default connect(mapStateToProps)(PriorityMenu)","import \"../../css/prioritySortButton.css\"\r\nimport \"../../css/shareGui.css\"\r\nimport TaskDataController from \"../../modules/dataController/TaskDataController.js\"\r\nimport AppDataController from \"../../modules/dataController/AppDataController.js\"\r\nimport store from \"../../modules/dataController/store\";\r\nimport {connect} from \"react-redux\";\r\n\r\n// Creates the share menu, which gives some text, an input box,\r\n// and a button to share sections with an email.\r\n\r\nfunction ShareMenu(props, selectedSection) {\r\n    // Validation for emails are done in the reducer, checks if the email provided is a email and not some\r\n    // weird text.\r\n    return (\r\n        <div className=\"shareMenuOrientation\">\r\n            <div className=\"shareMenuContainer\">\r\n                {props.isValidEmail &&\r\n                !props.isPressed &&\r\n                <div className=\"shareTitle\">Share this section with another user!</div>}\r\n\r\n                {!props.isValidEmail &&\r\n                props.isPressed &&\r\n                <div className=\"shareTitle\">Please enter a valid email address!</div>}\r\n\r\n                {props.isValidEmail &&\r\n                props.isPressed &&\r\n                <div className=\"shareTitle\">The section has been shared with the user!</div>}\r\n\r\n\r\n                <input type=\"email\" placeholder=\"Recipient's email\" className=\"ShareInput\" id=\"EmailValue3\"/>\r\n                <button className=\"ShareButton\"\r\n                        onClick={() =>\r\n                            handleOnClick((document.getElementById('EmailValue3').value))}>\r\n                    Share!</button>\r\n            </div>\r\n            <div className=\"overlay\"\r\n                 onClick={() => AppDataController.toggleShareMenu()}></div>\r\n\r\n        </div>)\r\n\r\n\r\n\r\n\r\n    function handleOnClick(email) {\r\n        AppDataController.setValidShareEmail(email)\r\n        AppDataController.setSharedWithEmail(true)\r\n\r\n        if (store.getState().validShareEmail) {\r\n            TaskDataController.shareTask(email)\r\n            setTimeout(() => {\r\n                AppDataController.setValidShareEmail(\"ryderm123456@gmail.com\")\r\n                AppDataController.setSharedWithEmail(false)\r\n            }, 3000)\r\n        }\r\n        else{\r\n            setTimeout(() => {\r\n                AppDataController.setValidShareEmail(\"example@gmail.com\")\r\n                AppDataController.setSharedWithEmail(false)\r\n            }, 3000)\r\n        }\r\n    }\r\n\r\n\r\n}\r\n\r\nfunction mapStateToProps(state){\r\n    return{\r\n        isValidEmail: store.getState().validShareEmail,\r\n        isPressed: store.getState().shareEmailPressed}\r\n}\r\n\r\n\r\n\r\nexport default connect(mapStateToProps)(ShareMenu)","import \"../../css/prioritySortButton.css\"\r\nimport \"../../css/shareGui.css\"\r\nimport TaskDataController from \"../../modules/dataController/TaskDataController.js\"\r\nimport AppDataController from \"../../modules/dataController/AppDataController.js\"\r\n\r\n\r\n\r\n// Creates the remove section menu, includes a list of options to choose from\r\n// includes a title as well to show what sorting is being used.\r\n\r\n\r\nfunction RemoveSharedMenu(props, selectedSection) {\r\n\r\n    return (\r\n        <div className=\"shareMenuOrientation\">\r\n            <div className=\"shareMenuContainer\">\r\n                <div className=\"shareTitle\">Do you want to revoke your access to this section?</div>\r\n                <button className=\"ShareButton\"\r\n                        onClick={() =>\r\n                            handleOnClick(props, selectedSection)}>\r\n                    Yes</button>\r\n            </div>\r\n            <div className=\"overlay\"\r\n                 onClick={() => AppDataController.toggleShowRemove()}></div>\r\n\r\n        </div>)\r\n\r\n\r\n\r\n\r\n    function handleOnClick() {\r\n        TaskDataController.removeTask()\r\n        AppDataController.toggleShowRemove()\r\n    }\r\n\r\n\r\n}\r\n\r\n\r\n\r\n\r\nexport default RemoveSharedMenu","import \"./css/global.css\"\r\nimport \"./css/splashScreen.css\"\r\nimport \"./css/verifyEmail.css\"\r\nimport \"typeface-roboto\"\r\nimport ActionButton from \"./components/Action Commands/ActionButton\";\r\nimport AppDataController from \"./modules/dataController/AppDataController\";\r\nimport Header from './components/Header';\r\n\r\nimport ActionMenu from \"./components/Action Commands/ActionMenu\";\r\nimport { connect } from \"react-redux\";\r\nimport SectionList from \"./components/newSection/SectionList\";\r\n\r\n\r\nimport Sidebar from \"./components/otherDisplays/sideBarList\";\r\nimport SideList from \"./components/otherDisplays/sideList\";\r\n\r\nimport SideBarBackground from \"./components/SideBarBackground\";\r\n\r\n\r\nimport {useCollection} from \"react-firebase-hooks/firestore\";\r\nimport {database} from \"./modules/dataController/firestore\"\r\nimport {collectionName} from \"./modules/dataController/firestore\";\r\nimport PriorityMenu from \"./components/newSection/priorityMenu\";\r\nimport firebase from \"firebase/compat\";\r\nimport { sendEmailVerification } from \"firebase/auth\";\r\nimport {\r\n    useAuthState,\r\n    useCreateUserWithEmailAndPassword,\r\n    useSignInWithEmailAndPassword,\r\n} from 'react-firebase-hooks/auth';\r\nimport store from \"./modules/dataController/store\";\r\nimport ShareMenu from \"./components/newSection/shareMenu\";\r\nimport RemoveSharedMenu from \"./components/newSection/removeSharedMenu\";\r\n\r\n// The above contains lots of import statements from different components, stylesheets and libraries.\r\n\r\n\r\n\r\n\r\n\r\n\r\n// create the authorization in firebase\r\n// google log in/sign up functionality\r\n\r\nconst auth = firebase.auth();\r\nconst googleProvider = new firebase.auth.GoogleAuthProvider();\r\n\r\n// function to send verify emails.\r\n// currently it doesn't really do anything,\r\n// as firestore rules aren't implemented yet\r\n// to remove access from non-verified email users.\r\nfunction verifyEmail() {\r\n    console.log(auth.currentUser.email)\r\n    auth.currentUser.sendEmailVerification();\r\n}\r\n\r\n// App contains the many helper functions and components needed for the splash screen, as well as\r\n// much of the splash screen functionality.\r\n\r\nfunction App(props) {\r\n    const [user, loading, error] = useAuthState(auth);\r\n\r\n\r\n    // This will return a menu to sign up if the sign up button is pressed in the\r\n    // splash screen.\r\n\r\n    function SignUpMenu(){\r\n        return(\r\n            <div>\r\n                <div className=\"SignUpTitle\">Let's Get Started!</div>\r\n                <div className=\"SplashScreenBlurredBackground\"\r\n                     onClick={() => AppDataController.toggleSignUpMenu()}></div>\r\n                <input type=\"email\" placeholder=\"Your email\" className=\"EmailInput\" id=\"EmailValue\"/>\r\n                <input type=\"password\" placeholder=\"Your password\" className=\"EmailInput\" id=\"PasswordValue\"/>\r\n                <SignUp></SignUp>\r\n            </div>)\r\n    }\r\n\r\n    // This will return a menu to sign in if the sign up button is pressed in the\r\n    // splash screen.\r\n\r\n    function SignInMenu(){\r\n        return(\r\n            <div>\r\n                <div className=\"SignUpTitle\">Welcome Back!</div>\r\n                <div className=\"SplashScreenBlurredBackground\"\r\n                     onClick={() => AppDataController.toggleSignInMenu()}></div>\r\n                <input type=\"email\" placeholder=\"Your email\" className=\"EmailInput\" id=\"EmailValue\"/>\r\n                <input type=\"password\" placeholder=\"Your password\" className=\"EmailInput\" id=\"PasswordValue\"/>\r\n                <SignIn></SignIn>\r\n            </div>)\r\n\r\n    }\r\n\r\n    // This will create a small banner asking the user to verify their email in the signed in app\r\n    // if their email is not verified.\r\n\r\n    function VerifyYourEmail(props) {\r\n        return (\r\n            <div className=\"verifyEmailBanner\">\r\n                <button\r\n                    className=\"verifyEmailBanner\"\r\n                    onClick={verifyEmail}>\r\n                    You need to verify your email before accessing app features. Click here to send a verification email!\r\n                </button>\r\n            </div>\r\n\r\n        )\r\n    }\r\n\r\n\r\n\r\n    // gets the user authentication status, shows the app once signed in.\r\n    // also shows the verify email banner if you're not verified.\r\n    if (loading) {\r\n        return <p>Checking...</p>;\r\n\r\n    } else if (user) {\r\n        return <div>\r\n            <AppSignedIn {...props} user={user}/>\r\n            {!user.emailVerified && <VerifyYourEmail/>}\r\n        </div>\r\n    }\r\n\r\n    // This will show the result if you are not signed in and are at the splash screen.\r\n\r\n    else {\r\n\r\n        // used for creating a transparency layer which is clickable.\r\n\r\n        let cssTransparencyID\r\n        if(props.signInMenuStatus || props.signUpMenuStatus){\r\n            cssTransparencyID = \"toggledTransparency\"\r\n        }\r\n        else{\r\n            cssTransparencyID = \"notToggledTransparency\"\r\n        }\r\n\r\n\r\n        // splash screen itself.contains a sign in button, sign up button, a title and description and a google\r\n        // authentication button.\r\n        return <div className=\"SplashScreen\">\r\n\r\n            <div className=\"SplashScreenBackground\">\r\n            {error && <p>Error App: {error.message}</p>}\r\n\r\n                {props.signUpMenuStatus && <SignUpMenu/>\r\n\r\n                }\r\n\r\n\r\n                {props.signInMenuStatus && <SignInMenu></SignInMenu>}\r\n\r\n        <div className=\"titleAndSignInButtons\">\r\n            <div className=\"titleAndDescription\">\r\n                <div className=\"SplashScreenTitle\" id={cssTransparencyID}>Todoiz.IO</div>\r\n                <div className=\"SplashScreenDescription\" id={cssTransparencyID}>The British Indian Ocean Territory note taking app\r\n                    meant for you and your devices</div>\r\n            </div>\r\n\r\n            <div className=\"SplashScreenButtons\" id={cssTransparencyID}>\r\n                <button className=\"SplashScreenGoogle\" onClick={() =>\r\n                    auth.signInWithPopup(googleProvider)}>Sign in with Google now!\r\n                </button>\r\n\r\n                <button className=\"SplashScreenEmailSignUp\" onClick={() =>\r\n                    AppDataController.toggleSignUpMenu()}>Sign up with email and password!\r\n                </button>\r\n            </div>\r\n\r\n            </div>\r\n                <button className=\"SplashScreenEmailSignIn\" id={cssTransparencyID} onClick={() =>\r\n                    AppDataController.toggleSignInMenu()}>Already have an account? Sign in here with Email and Password\r\n                </button>\r\n\r\n        </div>\r\n        </div>\r\n    }\r\n}\r\n\r\n// function to handle signing in Contains an error message in case you aren't able to log in.\r\n\r\nfunction SignIn() {\r\n    const [\r\n        signInWithEmailAndPassword,\r\n        userCredential, loading, error\r\n    ] = useSignInWithEmailAndPassword(auth);\r\n\r\n    if (userCredential) {\r\n        return <div>Unexpectedly signed in already</div>\r\n    } else if (loading) {\r\n        return <p className=\"ErrorMessage\">Logging in…</p>\r\n    }\r\n    return <div>\r\n        <button className=\"SignUpButton\" onClick={() =>\r\n            signInWithEmailAndPassword((document.getElementById('EmailValue').value), (document.getElementById('PasswordValue').value))}>Login!\r\n        </button>\r\n        {error && <p className=\"ErrorMessage\">\"Error logging in: \" {error.message}</p>}\r\n    </div>\r\n}\r\n\r\n// function to handle signing up. Contains an error message in case the user can't sign up.\r\n\r\nfunction SignUp() {\r\n    const [\r\n        createUserWithEmailAndPassword,\r\n        userCredential, loading, error\r\n    ] = useCreateUserWithEmailAndPassword(auth);\r\n\r\n    if (userCredential) {\r\n        // Shouldn't happen because App should see that\r\n        // we are signed in.\r\n        return <div>Unexpectedly signed in already</div>\r\n    } else if (loading) {\r\n        return <p className=\"ErrorMessage\">Logging in…</p>\r\n    }\r\n    return <div>\r\n        <button className=\"SignUpButton\" onClick={() =>\r\n            createUserWithEmailAndPassword((document.getElementById('EmailValue').value), (document.getElementById('PasswordValue').value))\r\n        }>\r\n            Sign up!\r\n        </button>\r\n        {error && <p className=\"ErrorMessage\">\"Error signing up: \" {error.message}</p>}\r\n\r\n    </div>\r\n}\r\n\r\n\r\n\r\n// contains the app once signed in.\r\n\r\nfunction AppSignedIn(props) {\r\n    AppDataController.setUserId(props.user.uid)\r\n    AppDataController.setUserEmail(props.user.email)\r\n    // gets different menu's status's from the redux state\r\n    // Undo is not used at all.\r\n\r\n\r\n    // lines 240 - 249 handle getting section data from firestore. lines 251-256 handle sorting it into user owned/shared.\r\n    const sharedQuery = database.collection(collectionName).where('sharedWith', \"array-contains\", props.user.email);\r\n    const [valueShared, loadingShared, errorShared] = useCollection(sharedQuery);\r\n\r\n\r\n    let fireStoreList = null;\r\n    let sharedFireStoreList = null;\r\n\r\n    if (valueShared) {\r\n        sharedFireStoreList = valueShared.docs.map((doc) => {\r\n            return {...doc.data()}\r\n        });\r\n        sharedFireStoreList.sort(function(section1, section2) {\r\n            let section1Owner = section1.owner === store.getState().userID;\r\n            let section2Owner = section2.owner === store.getState().userID;\r\n            return (section1Owner > section2Owner) ? -1 : (section1Owner < section2Owner) ? 1 : 0;\r\n        });\r\n    }\r\n    // general layout for the app,\r\n    // contains different menus disabled by the state by default.\r\n    return (\r\n        <div>\r\n            <div class='hello'>\r\n                <Header/>\r\n                <SideBarBackground/>\r\n                <div className=\"wideScreenDisplay\">\r\n                    <div className=\"Sidebar\"><Sidebar sections={sharedFireStoreList}/></div>\r\n                    <div className=\"Sidelist\"><SideList sections={sharedFireStoreList}/></div>\r\n\r\n                </div>\r\n                <SectionList sections={sharedFireStoreList}/>\r\n                {props.menuIsActive && <ActionMenu/>}\r\n                {props.priorityMenuIsActive && <PriorityMenu/>}\r\n                {props.shareMenuStatus && <ShareMenu/>}\r\n                {props.removeMenuStatus && <RemoveSharedMenu/>}\r\n                <ActionButton/>\r\n            </div>\r\n        </div>);\r\n}\r\n\r\n\r\n// Getting those stuffs from the state.\r\nfunction mapToState(state) {\r\n\r\n        return {\r\n            removeMenuStatus: store.getState().showRemove,\r\n            shareMenuStatus: store.getState().showShareMenu,\r\n            signInMenuStatus: store.getState().showSignInMenu,\r\n            signUpMenuStatus: store.getState().showSignUpMenu,\r\n            menuIsActive: AppDataController.menuIsActive(),\r\n            showUndo: AppDataController.undoIsActive(),\r\n            priorityMenuIsActive: AppDataController.priorityMenuIsActive(),\r\n\r\n        }\r\n}\r\n\r\nexport default connect(mapToState)(App)\r\n\r\nexport {auth}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport { Provider } from \"react-redux\"\nimport store from \"./modules/dataController/store.js\"\n\nReactDOM.render(\n  <Provider store={store}>\n    <App/>\n  </Provider>,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}