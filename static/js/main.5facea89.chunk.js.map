{"version":3,"sources":["modules/dataController/actions.js","modules/dataController/firestore.js","modules/dataController/TaskDataController.js","modules/dataController/reducer.js","modules/dataController/store.js","modules/dataController/AppDataController.js","components/Action Commands/ActionButton.js","components/Header.js","components/Action Commands/ActionMenuItem.js","components/Action Commands/ActionMenu.js","components/newSection/taskPriorityButton.js","modules/dataController/SelectionMaintainingInput.js","components/Tasks/Task.js","components/newSection/completedSectionButton.js","components/newSection/completedSection.js","components/Tasks/TaskList.js","components/newSection/SectionButton.js","components/newSection/sectionAddTask.js","components/newSection/priorityButton.js","components/newSection/shareSectionButton.js","components/newSection/removeSharedButton.js","components/newSection/SectionBar.js","components/newSection/SectionContainer.js","components/newSection/completedSectionTask.js","components/newSection/completedSectionsTaskList.js","components/newSection/SectionList.js","components/otherDisplays/sideBarButton.js","components/otherDisplays/sideBarElement.js","components/otherDisplays/sideBarCompletedSection.js","components/otherDisplays/sideBarList.js","components/otherDisplays/sideListElementTask.js","components/otherDisplays/sideListElement.js","components/otherDisplays/sideListCompletedSectionTask.js","components/otherDisplays/sideListCompletedSection.js","components/otherDisplays/sideList.js","components/SideBarBackground.js","components/newSection/priorityMenuItem.js","components/newSection/priorityMenu.js","components/newSection/shareMenu.js","App.js","index.js"],"names":["CREATE_TASK","DELETE_TASK","UPDATE_TASK_TEXT","TOGGLE_TASK_COMPLETION","DELETE_ALL_COMPLETED_TASK","TOGGLE_TODO_LIST","TOGGLE_COMPLETED_LIST","SHOW_MENU","HIDE_MENU","UNDO_TASK","SHOW_UNDO","HIDE_UNDO","CREATE_SECTION","DELETE_SECTION","UPDATE_SECTION_TEXT","TOGGLE_SECTION","CLEAR_ALL","GET_TOGGLED","PUSH_COMPLETED_TASK","TOGGLE_COMPLETED_SECTION_BUTTON","SET_SECTION_TO_STACK","SET_TASKS_TO_STACK","UPDATE_TASK_PRIORITY","PUSH_SELECTED_SECTION_ACTION","SHOW_PRIORITY_MENU","HIDE_PRIORITY_MENU","SET_SECTION_PRIORITY","SET_USER_ID","SET_USER_EMAIL","TOGGLE_SIGNUP_MENU","TOGGLE_SIGN_IN_MENU","TOGGLE_SHARE_MENU","SHARE_TASK","REMOVE_TASK","firebase","initializeApp","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","database","firestore","collectionName","TaskDataController","id","identifier","newText","action","text","type","payload","updateTaskTextAction","store","dispatch","isToggled","toggleTaskCompletionAction","sectionIdentifier","createTaskAction","deleteTaskAction","getState","tasks","filter","task","isCompleted","sections","section","deleteSectionAction","updateSectionTextAction","toggleSectionAction","getToggledStatusAction","Task","pushCompletedTaskAction","stackList","setSectionToStackAction","taskList","setTasksToStackAction","value","updateTaskPriorityAction","setSectionPriorityAction","inputEmail","shareTaskAction","initialState","sectionStack","taskStack","sectionsToggled","completedTasks","showUndo","showMenu","showPriorityMenu","showCompletedTasks","selectedSection","userID","userEmail","showSignUpMenu","showSignInMenu","showShareMenu","createTask","state","uuidv4","collection","doc","set","timeMade","Date","priority","deleteTask","updateTaskText","update","toggleTaskCompletion","deleteAllCompletedTasks","map","x","index","delete","undoTask","stack","newSections","pop","toggleCompletedList","showCompleted","toggleToDoList","showTodo","hideMenu","hideUndo","createSection","console","log","sectionRef","title","sortType","owner","sharedWith","deleteSection","updateSectionText","toggleSection","newToggledSections","includes","taskIndex","indexOf","splice","push","clearAll","length","getToggledStatus","sectionWithId","find","pushCompletedTask","contents","toggleCompletedSection","newToggledStatus","setSectionToStack","setTasksToStack","updateTaskPriority","newValue","pushSelectedSection","hidePriorityMenu","setSectionPriority","setUserId","userId","setUserEmail","newuserEmail","toggleSignUpMenu","toggleSignInMenu","toggleShareMenu","shareTask","sharedWithList","removeTask","newList","email","createStore","AppDataController","pushSelectedSectionAction","setUserIdAction","setUserEmailAction","handleOnClick","ActionButton","class","onClick","icon","faPlus","Header","props","ActionMenuItem","command","className","fireStoreList","menuItems","deleteAllCompleted","faMinus","clearAllSectionsAndTasks","ActionMenu","query","useCollection","docs","data","closeMenu","menuItem","key","TaskPriorityButton","priorityIcon","sectionText","sectionTitle","faSortDown","faSort","faSortUp","e","SelectionMaintainingInput","onChange","rest","useState","cursor","setCursor","ref","useRef","useEffect","input","current","setSelectionRange","target","selectionStart","cssID","currentSectionText","getAriaCheckbox","alt","checked","getAriaTask","event","currentTarget","handleTextEvent","onFocus","connect","faAngleDown","faAngleRight","ariaText","toggledState","CompletedSection","TaskList","SectionButton","SectionAddTaskButton","PrioritySortButton","faChartBar","ShareSectionButton","faShareAlt","RemoveSectionSharedButton","SectionBar","classes","isOwned","ownProps","isToggledList","taskRef","stateCompletedList","allTasks","concat","fireStoreCompletedList","sort","task1","task2","task1Text","toUpperCase","task2Text","task1date","task2date","task1priority","task2priority","CompletedSectionTask","CompletedSectionsTaskList","isCompletedTasksToggled","SideBarButton","document","getElementById","scrollIntoView","behavior","block","inline","SideBarElement","SideBarCompletedSection","Sidebar","SideListElementTask","SideListElement","loading","error","SideListCompletedSectionTask","SideList","SideBarBackground","PriorityMenuItem","alphaSort","dateSort","prioritySort","resetSort","faSortAmountDownAlt","faSortAmountUpAlt","currentSortType","sortTitle","ShareMenu","placeholder","auth","googleProvider","GoogleAuthProvider","verifyEmail","currentUser","sendEmailVerification","SignIn","useSignInWithEmailAndPassword","signInWithEmailAndPassword","userCredential","message","SignUp","useCreateUserWithEmailAndPassword","createUserWithEmailAndPassword","AppSignedIn","user","uid","sharedQuery","where","valueShared","loadingShared","errorShared","sharedFireStoreList","menuIsActive","priorityMenuIsActive","shareMenuStatus","signInMenuStatus","signUpMenuStatus","undoIsActive","cssTransparencyID","useAuthState","SignUpMenu","SignInMenu","signOut","emailVerified","signInWithPopup","ReactDOM","render"],"mappings":"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","file":"static/js/main.5facea89.chunk.js","sourcesContent":["export const CREATE_TASK = \"createTask\"\r\nexport const DELETE_TASK = \"deleteTask\"\r\nexport const UPDATE_TASK_TEXT = \"updateTaskText\"\r\nexport const TOGGLE_TASK_COMPLETION = \"toggleTaskCompletion\"\r\nexport const DELETE_ALL_COMPLETED_TASK = \"deleteAllCompletedTasks\"\r\nexport const TOGGLE_TODO_LIST = \"toggleTodoList\"\r\nexport const TOGGLE_COMPLETED_LIST = \"toggleCompletedList\"\r\nexport const SHOW_MENU = \"showMenu\"\r\nexport const HIDE_MENU = \"hideMenu\"\r\nexport const UNDO_TASK = \"undoTask\"\r\nexport const SHOW_UNDO = \"showUndo\"\r\nexport const HIDE_UNDO = \"hideUndo\"\r\n\r\n\r\nexport const CREATE_SECTION = \"createSection\"\r\nexport const DELETE_SECTION = \"deleteSection\"\r\nexport const UPDATE_SECTION_TEXT = \"updateSectionText\"\r\nexport const TOGGLE_SECTION = \"toggleSection\"\r\n\r\nexport const CLEAR_ALL = \"clearAllSectionsAndTasks\"\r\n\r\nexport const GET_TOGGLED = \"getToggledStatus\"\r\n\r\n\r\nexport const PUSH_COMPLETED_TASK = \"pushCompletedTask\"\r\n\r\nexport const TOGGLE_COMPLETED_SECTION_BUTTON = \"toggleCompletedSection\"\r\n\r\nexport const SET_SECTION_TO_STACK = \"setSectionToStack\"\r\n\r\nexport const SET_TASKS_TO_STACK = \"setTasksToStack\"\r\n\r\nexport const UPDATE_TASK_PRIORITY = \"updateTaskPriority\"\r\n\r\nexport const PUSH_SELECTED_SECTION_ACTION = \"pushSelectedSectionAction\"\r\n\r\nexport const SHOW_PRIORITY_MENU = \"showPriorityMenu\"\r\n\r\nexport const HIDE_PRIORITY_MENU = \"hidePriorityMenu\"\r\n\r\nexport const SET_SECTION_PRIORITY = \"setSectionPriority\"\r\n\r\nexport const SET_USER_ID = \"setUserId\"\r\n\r\nexport const SET_USER_EMAIL = \"setUserEmail\"\r\n\r\nexport const TOGGLE_SIGNUP_MENU = \"toggleSignUpMenu\"\r\n\r\nexport const TOGGLE_SIGN_IN_MENU = \"toggleSignInMenu\"\r\n\r\nexport const TOGGLE_SHARE_MENU = \"showShareMenu\"\r\n\r\nexport const SHARE_TASK = \"shareTask\"\r\n\r\nexport const REMOVE_TASK = \"removeTask\"\r\n\r\n\r\n\r\n\r\nexport const showUndoAction = () => ({type:SHOW_UNDO})\r\nexport const hideUndoAction = () => ({type:HIDE_UNDO})\r\nexport const undoTaskAction = () => ({type:UNDO_TASK})\r\nexport const showMenuAction = () => ({type:SHOW_MENU})\r\nexport const hideMenuAction = () => ({type:HIDE_MENU})\r\nexport const createTaskAction = (sectionIdentifier) => ({type:CREATE_TASK, payload:{sectionIdentifier}})\r\nexport const deleteTaskAction = (id) => ({type:DELETE_TASK, payload:{id}})\r\nexport const updateTaskTextAction = (id, identifier, text) => ({type: UPDATE_TASK_TEXT,payload: {id, identifier, text}})\r\nexport const toggleTaskCompletionAction = (id, identifier, isToggled) => ({type: TOGGLE_TASK_COMPLETION,payload:{id, identifier, isToggled}})\r\nexport const deleteAllCompletedTasksAction = () => ({type: DELETE_ALL_COMPLETED_TASK})\r\nexport const toggleCompletedListAction = () => ({type:TOGGLE_COMPLETED_LIST})\r\nexport const toggleToDoListAction = () => ({type:TOGGLE_TODO_LIST})\r\n\r\n// functions for creating/deleting/editing section properties\r\n\r\nexport const createSectionAction = () => ({type: CREATE_SECTION})\r\nexport const deleteSectionAction = (sectionIdentifier) => ({type: DELETE_SECTION, payload: {sectionIdentifier}})\r\nexport const updateSectionTextAction = (sectionIdentifier,text) => ({type: UPDATE_SECTION_TEXT,payload: {sectionIdentifier, text}})\r\n\r\n// function for toggling a section by just taking in id\r\n\r\nexport const toggleSectionAction = (sectionIdentifier) => ({type: TOGGLE_SECTION, payload: {sectionIdentifier}})\r\n\r\n// function for clearing all sections and resetting all\r\n\r\nexport const clearAllSectionsAndTasksAction = () => ({type: CLEAR_ALL})\r\n\r\n// functions for showing tasks stored in firestore or getting section/task properties.\r\n\r\nexport const getToggledStatusAction = (sectionIdentifier) => ({type: GET_TOGGLED, payload: {sectionIdentifier}})\r\n\r\nexport const pushCompletedTaskAction = (Task) => ({type: PUSH_COMPLETED_TASK, payload:{Task}})\r\n\r\nexport const toggleCompletedSectionAction = () => ({type: TOGGLE_COMPLETED_SECTION_BUTTON})\r\n\r\n// functions for pushing tasks or sections to the state\r\n\r\nexport const setSectionToStackAction = (stackList) => ({type: SET_SECTION_TO_STACK, payload:{stackList}})\r\n\r\nexport const setTasksToStackAction = (taskList) => ({type: SET_TASKS_TO_STACK, payload:{taskList}})\r\n\r\n// functions for showing priority menu/hiding it/setting the priority/getting the current selected section\r\n\r\nexport const showPriorityMenuAction = () => ({type: SHOW_PRIORITY_MENU})\r\n\r\nexport const hidePriorityMenuAction = () => ({type: HIDE_PRIORITY_MENU})\r\n\r\nexport const pushSelectedSectionAction = (sectionIdentifier, sortType ) => ({type: PUSH_SELECTED_SECTION_ACTION, payload:{sectionIdentifier, sortType}})\r\n\r\nexport const updateTaskPriorityAction = (id, sectionIdentifier, value) => ({type: UPDATE_TASK_PRIORITY, payload:{id, sectionIdentifier, value}})\r\n\r\nexport const setSectionPriorityAction = (value) => ({type: SET_SECTION_PRIORITY, payload:{value}})\r\n\r\nexport const setUserIdAction = (userId) => ({type: SET_USER_ID, payload:{userId}})\r\n\r\nexport const setUserEmailAction = (userEmail) => ({type: SET_USER_EMAIL, payload:{userEmail}})\r\n\r\nexport const toggleSignUpMenuAction = () => ({type: TOGGLE_SIGNUP_MENU})\r\n\r\nexport const toggleSignInMenuAction = () => ({type: TOGGLE_SIGN_IN_MENU})\r\n\r\nexport const toggleShareMenuAction = () => ({type: TOGGLE_SHARE_MENU})\r\n\r\nexport const shareTaskAction = (inputEmail) => ({type: SHARE_TASK, payload:{inputEmail}})\r\n\r\nexport const removeTaskAction = () => ({type: REMOVE_TASK})\r\n\r\n\r\n","import firebase from \"firebase/compat\";\r\nimport {useCollection} from \"react-firebase-hooks/firestore\";\r\n\r\n// lab 3 work:\r\n\r\n// stuff for the firebase config\r\n\r\nconst firebaseConfig = {\r\n    apiKey: \"AIzaSyD8bEScFINGaDttxHPcnMbjIPmW64m-4SI\",\r\n    authDomain: \"rmitchellpitzer-hmc-tasks.firebaseapp.com\",\r\n    projectId: \"rmitchellpitzer-hmc-tasks\",\r\n    storageBucket: \"rmitchellpitzer-hmc-tasks.appspot.com\",\r\n    messagingSenderId: \"670939286123\",\r\n    appId: \"1:670939286123:web:3dd28bb7e5badcce873f2e\"\r\n};\r\n\r\nfirebase.initializeApp(firebaseConfig);\r\n\r\n\r\nexport const database = firebase.firestore();\r\nexport const collectionName = \"rmitchellPitzer-hmc-tasks-sectionList\";\r\n\r\n","import {\r\n    createTaskAction,\r\n    deleteAllCompletedTasksAction,\r\n    deleteTaskAction,\r\n    toggleTaskCompletionAction,\r\n    updateTaskTextAction,\r\n    createSectionAction,\r\n    deleteSectionAction,\r\n    updateSectionTextAction,\r\n    toggleSectionAction,\r\n    clearAllSectionsAndTasksAction,\r\n    getToggledStatusAction,\r\n    pushCompletedTaskAction,\r\n    setSectionToStackAction,\r\n    setTasksToStackAction,\r\n    updateTaskPriorityAction,\r\n    setSectionPriorityAction, shareTaskAction, removeTaskAction\r\n} from \"./actions\"\r\nimport store from \"./store.js\"\r\nclass TaskDataController {\r\n    static updateTaskText(id, identifier, newText) {\r\n            const action = updateTaskTextAction(id, identifier ,newText)\r\n            store.dispatch(action)\r\n    }\r\n\r\n    static toggleTaskCompletion(id, identifier, isToggled) {\r\n        const action = toggleTaskCompletionAction(id, identifier, isToggled)\r\n        store.dispatch(action)\r\n    }\r\n\r\n    static createTask(sectionIdentifier) {\r\n        const action = createTaskAction(sectionIdentifier)\r\n        store.dispatch(action)\r\n    }\r\n\r\n    static deleteTask(id) {\r\n        const action = deleteTaskAction(id)\r\n        store.dispatch(action)\r\n    }\r\n\r\n\r\n    static deleteAllCompleted() {\r\n        const action = deleteAllCompletedTasksAction()\r\n        store.dispatch(action)\r\n    }\r\n\r\n    static todo() {\r\n        return store.getState()\r\n        .tasks.filter(task => task.isCompleted === false)\r\n    }\r\n\r\n    static completed() {\r\n        return store.getState()\r\n        .tasks.filter(task => task.isCompleted === true)\r\n    }\r\n\r\n    // new function to return general tasks, not finished yet\r\n\r\n    static getTasks(identifier) {\r\n        return store.getState().sections.filter(section => section.identifier === identifier)\r\n    }\r\n\r\n    // new function to get sections\r\n\r\n    static getSections() {\r\n        return store.getState().sections\r\n    }\r\n\r\n\r\n    static createSection() {\r\n        const action = createSectionAction()\r\n        store.dispatch(action)\r\n    }\r\n\r\n    static deleteSection(sectionIdentifier) {\r\n        const action = deleteSectionAction(sectionIdentifier)\r\n        store.dispatch(action)\r\n    }\r\n\r\n    static updateSectionText(sectionIdentifier,text) {\r\n        const action = updateSectionTextAction(sectionIdentifier,text)\r\n        store.dispatch(action)\r\n    }\r\n\r\n    static toggleSection(sectionIdentifier) {\r\n        const action = toggleSectionAction(sectionIdentifier)\r\n        store.dispatch(action)\r\n    }\r\n\r\n    static clearAllSectionsAndTasks() {\r\n        const action = clearAllSectionsAndTasksAction()\r\n        store.dispatch(action)\r\n    }\r\n\r\n    static getToggledStatus(sectionIdentifier){\r\n        const action = getToggledStatusAction(sectionIdentifier)\r\n        store.dispatch(action)\r\n    }\r\n\r\n    static pushCompletedTask(Task) {\r\n\r\n        const action = pushCompletedTaskAction(Task)\r\n        store.dispatch(action)\r\n    }\r\n\r\n    static setSectionToStack(stackList){\r\n        const action = setSectionToStackAction(stackList)\r\n        store.dispatch(action)\r\n    }\r\n\r\n    static setTasksToStack(taskList){\r\n        const action = setTasksToStackAction(taskList)\r\n        store.dispatch(action)\r\n    }\r\n\r\n    static updateTaskPriority(id, sectionIdentifier, value){\r\n        const action = updateTaskPriorityAction(id, sectionIdentifier, value)\r\n        store.dispatch(action)\r\n    }\r\n\r\n    static setSectionPriority(value){\r\n        const action = setSectionPriorityAction(value)\r\n        store.dispatch(action)\r\n    }\r\n\r\n    static shareTask(inputEmail){\r\n        const action = shareTaskAction(inputEmail)\r\n        store.dispatch(action)\r\n    }\r\n\r\n    static removeTask(){\r\n        const action = removeTaskAction()\r\n        store.dispatch(action)\r\n    }\r\n\r\n\r\n};\r\n\r\n\r\nexport default TaskDataController","/* eslint-disable no-lone-blocks */\r\nimport { v4 as uuidv4 } from 'uuid';\r\nimport {\r\n    CREATE_TASK,\r\n    DELETE_ALL_COMPLETED_TASK,\r\n    DELETE_TASK,\r\n    HIDE_MENU,\r\n    HIDE_UNDO,\r\n    SHOW_MENU,\r\n    SHOW_UNDO,\r\n    TOGGLE_COMPLETED_LIST,\r\n    TOGGLE_TASK_COMPLETION,\r\n    TOGGLE_TODO_LIST,\r\n    TOGGLE_UNDO,\r\n    UNDO_TASK,\r\n    UPDATE_TASK_TEXT,\r\n    CREATE_SECTION,\r\n    DELETE_SECTION,\r\n    UPDATE_SECTION_TEXT,\r\n    TOGGLE_SECTION,\r\n    CLEAR_ALL,\r\n    GET_TOGGLED,\r\n    PUSH_COMPLETED_TASK,\r\n    TOGGLE_COMPLETED_SECTION_BUTTON,\r\n    SET_SECTION_TO_STACK,\r\n    SET_TASKS_TO_STACK,\r\n    UPDATE_TASK_PRIORITY,\r\n    PUSH_SELECTED_SECTION_ACTION, SHOW_PRIORITY_MENU, HIDE_PRIORITY_MENU, SET_SECTION_PRIORITY,\r\n    SET_USER_ID, TOGGLE_SIGNUP_MENU, TOGGLE_SIGN_IN_MENU, SET_USER_EMAIL, TOGGLE_SHARE_MENU, SHARE_TASK, REMOVE_TASK,\r\n} from './actions';\r\n\r\nimport {database} from \"./firestore\";\r\nimport {collectionName} from \"./firestore\";\r\nimport TaskDataController from \"./TaskDataController\";\r\nimport store from \"./store\";\r\n\r\n\r\n\r\n// Initial state,\r\n// sectionStack is used to keep track of sections\r\n// taskStack is used for deleting tasks instead of querying\r\n// sections toggled, keeps track of which sections in mobile view are\r\n// currently being shown\r\n// show undo, show menu, show... just show what their name is.\r\n// selectedSection: will contain a section's identifier and name when\r\n// the priority sort button is pressed, pushing it to the stack so it\r\n// can be read by other components and altered.\r\nconst initialState = {\r\n    sectionStack:[],\r\n    taskStack: [],\r\n    sectionsToggled: [],\r\n    completedTasks: [],\r\n    showUndo: false,\r\n    showMenu: false,\r\n    showPriorityMenu: false,\r\n    showCompletedTasks: false,\r\n    selectedSection: [],\r\n    userID: \"\",\r\n    userEmail: \"\",\r\n    showSignUpMenu: false,\r\n    showSignInMenu: false,\r\n    showShareMenu: false\r\n}\r\n\r\n\r\n\r\n// creates a task using firestore\r\nfunction createTask(state, sectionIdentifier) {\r\n    const identifier = uuidv4()\r\n    const taskRef = database.collection(collectionName).doc(sectionIdentifier).collection('tasks').doc(identifier)\r\n\r\n    taskRef.set({\r\n        id: identifier,\r\n        sectionIdentifier: sectionIdentifier,\r\n        isCompleted: false,\r\n        text: \"\",\r\n        timeMade: new Date(),\r\n        priority: 2\r\n    })\r\n    return{\r\n        ...state\r\n    }\r\n}\r\n\r\n// Deletes a task with the given id, although I don't think this is used at all.\r\n// Don't want to delete it yet out of fear of messing up the reducer\r\nfunction deleteTask(state,id) {\r\n    const tasks = state.tasks.filter(task => task.id !== id)\r\n    return {\r\n        ...state,\r\n        tasks\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n// Updates a task's text given it's id, section identifier, and text to update it to.\r\n// uses firestore.\r\nfunction updateTaskText(state,{id, identifier,text}) {\r\n    const taskRef = database.collection(collectionName).doc(identifier).collection('tasks').doc(id)\r\n    taskRef.update({\r\n        text: text\r\n        }\r\n    )\r\n    return{\r\n        ...state\r\n    }\r\n}\r\n\r\n\r\n// Hey this is no longer 100 lines of code!\r\n// Just gets the task being marked completed, sets it to the opposite of what it's completed status is.\r\nfunction toggleTaskCompletion(state,{id, identifier, isToggled}) {\r\n    const taskRef = database.collection(collectionName).doc(identifier).collection('tasks').doc(id)\r\n    taskRef.update({\r\n        isCompleted: (!isToggled)\r\n    })\r\n    return{\r\n        ...state\r\n    }\r\n}\r\n\r\n// deletes all tasks that are marked completed.\r\n// updates firestore\r\n\r\nfunction deleteAllCompletedTasks(state) {\r\n    const completedTasks = state.completedTasks.map(x => x)\r\n    for (const index in completedTasks){\r\n        const taskToDelete = database.collection(collectionName).doc(completedTasks[index].sectionIdentifier).collection('tasks').doc(completedTasks[index].id);\r\n        taskToDelete.delete()\r\n\r\n    }\r\n        return {\r\n       ...state\r\n   }\r\n}\r\n\r\n// it do not exist.\r\n// We will no longer be afraid of commitment. What ever happened to\r\n// pressing an action button, and meaning it, knowing there was no\r\n// going back? Today, well tonight, well today it's 7 am I need to sleep,\r\n// Today, we conquer our fears of commitment that have held us back,\r\n// and proudly remove a requested feature from our app: The undo button.\r\n\r\nfunction undoTask(state) {\r\n    const stack = state.stack.map(x => x)\r\n    const newSections = stack.pop()\r\n    return {\r\n        ...state,\r\n        sections: newSections,\r\n        stack\r\n    }\r\n}\r\n\r\n\r\nfunction toggleCompletedList(state) {\r\n    return {\r\n        ...state,\r\n        showCompleted: !state.showCompleted\r\n    }\r\n}\r\n\r\nfunction toggleToDoList(state) {\r\n    return {\r\n        ...state,\r\n        showTodo: !state.showTodo \r\n    }\r\n}\r\n\r\nfunction showMenu(state) {\r\n    return {\r\n        ...state,\r\n        showMenu: true \r\n        }\r\n}\r\n\r\nfunction hideMenu(state) {\r\n    return {\r\n        ...state,\r\n        showMenu:false \r\n    }\r\n}\r\n\r\nfunction showUndo(state) {\r\n    return {\r\n        ...state,\r\n        showUndo: true\r\n    }\r\n}\r\n\r\nfunction hideUndo(state) {\r\n    return {\r\n        ...state,\r\n        showUndo: false \r\n    }\r\n}\r\n\r\n\r\n// function for creating a section, this will push a new empty section onto the state's sections.\r\n\r\nfunction createSection(state) {\r\n    console.log(\"Trying to create a section\")\r\n    console.log(state.userID)\r\n    // first part creates a new section in firestore.\r\n    const identifier = uuidv4()\r\n    const sectionRef = database.collection(collectionName).doc(identifier)\r\n    console.log(identifier)\r\n    console.log(state.userID)\r\n    console.log(state.userEmail)\r\n    sectionRef.set({\r\n        identifier: identifier,\r\n        title: \"\",\r\n        sortType: 7,\r\n        owner: state.userID,\r\n        sharedWith: [state.userEmail]\r\n    })\r\n\r\n\r\n    return{\r\n        ...state\r\n    }\r\n}\r\n\r\n\r\n// it's unneccessary code again.\r\n// pushing removing a lot of this to lab5 due to time constraints.\r\n// I would rather have a working app than an app that doesn't work, but has cleaner\r\n// code.\r\n\r\nfunction deleteSection(state, sectionIdentifier) {\r\n    const sections = state.sections.filter(sections => sections.identifier !== sectionIdentifier)\r\n    return {\r\n        ...state,\r\n        sections\r\n    }\r\n}\r\n\r\n\r\n// Similar to updating a task's text, updates a section's text with help from it's sectionIdentifier.\r\n\r\nfunction updateSectionText(state,{sectionIdentifier,text}){\r\n    const sectionToUpdate = database.collection(collectionName).doc(sectionIdentifier);\r\n    sectionToUpdate.update({\r\n        title: text\r\n\r\n    })\r\n    return{\r\n        ...state\r\n    }\r\n}\r\n\r\n// This will toggle whether the section's button is pressed or not, and will show the tasklist or hide it\r\n// depending on whether it's toggled or not.\r\n// Also pushes that identifier to the stack if it's toggled, or removes it from it if it isn't toggled.\r\n\r\nfunction toggleSection(state, sectionIdentifier) {\r\n\r\n\r\n    const newToggledSections = state.sectionsToggled.map(x => x)\r\n    if(newToggledSections.includes(sectionIdentifier)){\r\n        let taskIndex = newToggledSections.indexOf(sectionIdentifier)\r\n        newToggledSections.splice(taskIndex, 1)\r\n\r\n\r\n\r\n    }\r\n    else{\r\n        newToggledSections.push(sectionIdentifier)\r\n    }\r\n\r\n    return {\r\n        ...state,\r\n        sectionsToggled: newToggledSections\r\n    }\r\n}\r\n\r\n// Clears all tasks and sections except one, which it will reset the text and tasks of.\r\n// This is to avoid a weird thing where sections show up after a short delay.\r\n\r\nfunction clearAll(state){\r\n    const stackList = state.sectionStack\r\n    const taskList = state.taskStack\r\n    for (const index in taskList){\r\n        const taskToDelete = database.collection(collectionName).doc(taskList[index].sectionIdentifier).collection('tasks').doc(taskList[index].id)\r\n        taskToDelete.delete()\r\n    }\r\n    for (const index in stackList){\r\n        console.log(stackList)\r\n        if(index == (stackList.length - 1)){\r\n\r\n\r\n\r\n            const sectionToModify = database.collection(collectionName).doc(stackList[index].identifier)\r\n            sectionToModify.update({\r\n\r\n                title: \"\",\r\n                sortType: 7,\r\n                owner: state.userID,\r\n                sharedWith: [state.userEmail]}\r\n            )\r\n        }\r\n        else{\r\n            const sectionToDelete = database.collection(collectionName).doc(stackList[index].identifier)\r\n            sectionToDelete.delete()\r\n        }\r\n    }\r\n\r\n    return{\r\n        ...state,\r\n        sectionsToggled: []\r\n    }\r\n}\r\n\r\n\r\n// it do not matter.\r\n\r\nfunction getToggledStatus(state, sectionIdentifier){\r\n    const newSections = state.sections.map(x => x)\r\n    const sectionWithId = newSections.find(section => section.identifier === sectionIdentifier)\r\n    if (!sectionWithId){\r\n        return null\r\n    }\r\n    return sectionWithId.isToggled\r\n}\r\n\r\n// Pushes a task to the state, this command will only be used if the task is marked completed.\r\nfunction pushCompletedTask(state, contents){\r\n    return{\r\n        ...state,\r\n        completedTasks: contents.Task\r\n    }\r\n}\r\n\r\n// function to set the completed section's toggle status in mobile view.\r\nfunction toggleCompletedSection(state){\r\n    const newToggledStatus = (!state.showCompletedTasks)\r\n    return{\r\n        ...state,\r\n        showCompletedTasks: newToggledStatus\r\n    }\r\n}\r\n\r\n// function to update the stack with a list of sections.\r\nfunction setSectionToStack(state, stackList){\r\n    return{\r\n        ...state,\r\n        sectionStack: stackList\r\n    }\r\n}\r\n\r\n//refer to line 327, but replace sections with tasks.\r\nfunction setTasksToStack(state, taskList){\r\n    return{\r\n        ...state,\r\n        taskStack: taskList\r\n    }\r\n}\r\n\r\n// Updates the priority of a task.\r\n// First part is telling if the priority status is at it's limit, and then setting it to the lowest value.\r\n// Second part is updating the firestore db\r\nfunction updateTaskPriority(state, {id, sectionIdentifier, value}){\r\n    let newValue = 0\r\n    if(value > 2){\r\n        newValue = 1\r\n    }\r\n    else{\r\n        newValue = value + 1\r\n    }\r\n    const TaskRef = database.collection(collectionName).doc(sectionIdentifier).collection('tasks').doc(id)\r\n    TaskRef.update({\r\n        priority: newValue\r\n    })\r\n    return{\r\n        ...state\r\n    }\r\n}\r\n\r\n// pushing the section whose tasks are being sorted to the stack to keep track of.\r\nfunction pushSelectedSection(state, {sectionIdentifier, sortType}){\r\n    return{\r\n        ...state,\r\n        selectedSection: {sectionIdentifier, sortType}\r\n    }\r\n}\r\n\r\n// show priority menu, (state)\r\nfunction showPriorityMenu(state){\r\n    return {\r\n        ...state,\r\n        showPriorityMenu: true\r\n    }\r\n}\r\n\r\n// same thing, except this resets the selected section as none are being shown.\r\nfunction hidePriorityMenu(state){\r\n    return {\r\n        ...state,\r\n        selectedSection: [],\r\n        showPriorityMenu: false\r\n    }\r\n}\r\n// Updates the selected Section's priority sort type. Also resets selected section.\r\nfunction setSectionPriority(state, value){\r\n    const sectionRef = database.collection(collectionName).doc(state.selectedSection.sectionIdentifier)\r\n    sectionRef.update({\r\n        sortType: value\r\n    })\r\n    return{\r\n        ...state,\r\n        selectedSection: [],\r\n        showPriorityMenu: false\r\n    }\r\n}\r\n\r\nfunction setUserId(state, userId){\r\n    return{\r\n        ...state,\r\n        userID: userId\r\n    }\r\n}\r\n\r\nfunction setUserEmail(state, newuserEmail){\r\n    return{\r\n        ...state,\r\n        userEmail: newuserEmail\r\n    }\r\n}\r\n\r\n\r\nfunction toggleSignUpMenu(state){\r\n    return{\r\n        ...state,\r\n        showSignUpMenu: !(state.showSignUpMenu)\r\n    }\r\n}\r\n\r\nfunction toggleSignInMenu(state){\r\n    return{\r\n        ...state,\r\n        showSignInMenu: !(state.showSignInMenu)\r\n    }\r\n}\r\n\r\nfunction toggleShareMenu(state){\r\n    return{\r\n        ...state,\r\n        showShareMenu: !(state.showShareMenu)\r\n    }\r\n}\r\n\r\nfunction shareTask(state, inputEmail){\r\n    const sharedWithList = state.selectedSection.sortType.map(x => x)\r\n    sharedWithList.push(inputEmail)\r\n    console.log(sharedWithList)\r\n    console.log(\"The shared list!\")\r\n    console.log(state.selectedSection.sectionIdentifier)\r\n    const sectionRef = database.collection(collectionName).doc(state.selectedSection.sectionIdentifier)\r\n    sectionRef.update({\r\n            sharedWith: sharedWithList\r\n        }\r\n    )\r\n    return{\r\n        ...state\r\n    }\r\n}\r\n\r\n\r\nfunction removeTask(state){\r\n    const sharedWithList = state.selectedSection.sortType.map(x => x)\r\n    const newList = sharedWithList.filter(email => email !== state.userEmail)\r\n\r\n    const sectionRef = database.collection(collectionName).doc(state.selectedSection.sectionIdentifier)\r\n    sectionRef.update({\r\n            sharedWith: newList\r\n        }\r\n    )\r\n    return{\r\n        ...state\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\n\r\nexport default function toDoReducer(state = initialState, action){\r\n    switch (action.type){\r\n        case CREATE_TASK: return createTask(state, action.payload.sectionIdentifier)\r\n        case DELETE_TASK: return deleteTask(state,action.payload.id)\r\n        case UPDATE_TASK_TEXT: return updateTaskText(state,action.payload)\r\n        case TOGGLE_TASK_COMPLETION: return toggleTaskCompletion(state,action.payload)\r\n        case DELETE_ALL_COMPLETED_TASK: return deleteAllCompletedTasks(state)\r\n        case TOGGLE_TODO_LIST: return toggleToDoList(state)\r\n        case TOGGLE_COMPLETED_LIST: return toggleCompletedList(state)\r\n        case SHOW_MENU: return showMenu(state)\r\n        case HIDE_MENU: return hideMenu(state)\r\n        case UNDO_TASK: return undoTask(state)\r\n        case SHOW_UNDO: return showUndo(state)\r\n        case HIDE_UNDO: return hideUndo(state)\r\n        case CREATE_SECTION: return createSection(state)\r\n        case DELETE_SECTION: return deleteSection(state,action.payload.sectionIdentifier)\r\n        case UPDATE_SECTION_TEXT: return updateSectionText(state, action.payload)\r\n        case TOGGLE_SECTION: return toggleSection(state, action.payload.sectionIdentifier)\r\n        case CLEAR_ALL: return clearAll(state)\r\n        case GET_TOGGLED: return getToggledStatus(state, action.payload.sectionIdentifier)\r\n        case PUSH_COMPLETED_TASK: return pushCompletedTask(state, action.payload)\r\n        case TOGGLE_COMPLETED_SECTION_BUTTON: return toggleCompletedSection(state)\r\n        case SET_SECTION_TO_STACK: return setSectionToStack(state, action.payload.stackList)\r\n        case SET_TASKS_TO_STACK: return setTasksToStack(state, action.payload.taskList)\r\n        case UPDATE_TASK_PRIORITY: return updateTaskPriority(state, action.payload)\r\n        case PUSH_SELECTED_SECTION_ACTION: return pushSelectedSection(state, action.payload)\r\n        case SHOW_PRIORITY_MENU: return showPriorityMenu(state)\r\n        case HIDE_PRIORITY_MENU: return hidePriorityMenu(state)\r\n        case SET_SECTION_PRIORITY: return setSectionPriority(state, action.payload.value)\r\n        case SET_USER_ID: return setUserId(state, action.payload.userId)\r\n        case SET_USER_EMAIL: return setUserEmail(state, action.payload.userEmail)\r\n        case TOGGLE_SIGNUP_MENU: return toggleSignUpMenu(state)\r\n        case TOGGLE_SIGN_IN_MENU: return toggleSignInMenu(state)\r\n        case TOGGLE_SHARE_MENU: return toggleShareMenu(state)\r\n        case SHARE_TASK: return shareTask(state, action.payload.inputEmail)\r\n        case REMOVE_TASK: return removeTask(state)\r\n\r\n        default:\r\n            return state \r\n    }\r\n\r\n\r\n}","import {createStore} from \"redux\"\nimport rootReducer  from \"./reducer\"\n\nconst store = createStore(rootReducer)\nexport default store ","import {\n    hideMenuAction,\n    hideUndoAction,\n    showMenuAction,\n    showUndoAction,\n    toggleCompletedListAction,\n    toggleToDoListAction,\n    toggleUndoAction,\n    undoTaskAction,\n    toggleCompletedSectionAction,\n    pushSelectedSectionAction,\n    showPriorityMenuAction,\n    hidePriorityMenuAction,\n    setUserIdAction,\n    toggleSignUpMenuAction,\n    toggleSignInMenuAction,\n    setUserEmailAction,\n    toggleShareMenuAction\n} from \"./actions.js\"\nimport store from \"./store.js\"\n\nexport default class AppDataController {\n\n    static toggleTodoList() {\n        const action = toggleToDoListAction()\n        store.dispatch(action)\n    }\n\n    static showToDo() {\n        return store.getState().showTodo \n    }\n    \n    static showCompleted() {\n        return store.getState().showCompleted \n    }\n\n    static showMenu() {\n        const action = showMenuAction()\n        store.dispatch(action)\n    }\n\n    static closeMenu() {\n        const action = hideMenuAction()\n        store.dispatch(action)\n    }\n\n    static menuIsActive() {\n        return store.getState().showMenu\n    }\n\n    static toggleCompletedList() {\n        const action = toggleCompletedListAction()\n        store.dispatch(action)\n    }\n\n    static showUndo() {\n        const action = showUndoAction()\n        store.dispatch(action)\n    }\n\n    static hideUndo() {\n        const action = hideUndoAction()\n        store.dispatch(action)\n    }\n\n    static undoTask() {\n        const action = undoTaskAction()\n        store.dispatch(action)\n    }\n\n    static undoIsActive() {\n        return store.getState().showUndo \n    }\n\n    static toggleCompletedSection() {\n        const action =  toggleCompletedSectionAction()\n        store.dispatch(action)\n    }\n\n    static pushSelectedSection(sectionIdentifier, sortType){\n        const action =  pushSelectedSectionAction(sectionIdentifier, sortType)\n        store.dispatch(action)\n    }\n\n    static priorityMenuIsActive() {\n        return store.getState().showPriorityMenu\n    }\n\n    static showPriorityMenu() {\n        const action = showPriorityMenuAction()\n        store.dispatch(action)\n    }\n\n    static hidePriorityMenu() {\n        const action = hidePriorityMenuAction()\n        store.dispatch(action)\n    }\n\n    static setUserId(userId) {\n        const action = setUserIdAction(userId)\n        store.dispatch(action)\n    }\n\n    static setUserEmail(userEmail) {\n        const action = setUserEmailAction(userEmail)\n        store.dispatch(action)\n    }\n\n    static toggleSignUpMenu(){\n        const action = toggleSignUpMenuAction()\n        store.dispatch(action)\n    }\n\n    static toggleSignInMenu(){\n        const action = toggleSignInMenuAction()\n        store.dispatch(action)\n    }\n\n    static toggleShareMenu(){\n        const action = toggleShareMenuAction()\n        store.dispatch(action)\n    }\n\n}","import AppDataController from \"../../modules/dataController/AppDataController\"\r\nimport \"../../css/action_button.css\"\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\"\r\nimport { faPlus } from \"@fortawesome/free-solid-svg-icons\"\r\n\r\nfunction handleOnClick() {\r\n    AppDataController.showMenu()\r\n}\r\n\r\n// Action button in the bottom right corner, allows access to adding sections, clearing completed tasks, or\r\n    // resetting the sections and tasks.\r\n\r\nexport default function ActionButton() {\r\n    return (\r\n        <button\r\n            aria-label=\"Click here to hear more options.\"\r\n            class=\"action-button\"\r\n            onClick={handleOnClick}\r\n        >\r\n        <FontAwesomeIcon icon={faPlus} />\r\n        </button>\r\n    )\r\n}\r\n\r\n","import \"../css/banner.css\"\r\n\r\n\r\n\r\n// Just a silly banner for the top of the page that shows a play on \"toDos\"\r\nexport default function Header(props) {\r\n\r\n    return (\r\n        <div class=\"banner\">\r\n            <h1 class=\"title\"> Todoiz.IO</h1>\r\n        </div>\r\n    )\r\n}","\r\n\r\n\r\n/* \r\n\r\n\r\nprops: {\r\n    text: string;\r\n    command: Function\r\n    parameters: string\r\n    icon: FontAwesomeIcon\r\n}\r\n*/\r\n\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\n\r\nexport default function ActionMenuItem(props) {\r\n    // creates a button in the action menu with a command from props.\r\n    return (\r\n        <button onClick={() => props.command(props)} class=\"action-item\"\r\n            aria-label={\"This is the\" + props.text + \"button in the action menu, Press to perform the action.\" }>\r\n            { props.icon && <FontAwesomeIcon className = \"ActionIcon\" icon= {props.icon}/> }\r\n            <div class=\"action-text\">\r\n                <p> {props.text} </p>\r\n            </div>\r\n        </button>\r\n    )\r\n}\r\n\r\n","import ActionMenuItem from \"./ActionMenuItem.js\"\r\nimport \"../../css/action_list.css\"\r\nimport TaskDataController from \"../../modules/dataController/TaskDataController.js\"\r\nimport { faMinus, faPlus } from \"@fortawesome/free-solid-svg-icons\"\r\nimport AppDataController from \"../../modules/dataController/AppDataController.js\"\r\nimport {collectionName, database} from \"../../modules/dataController/firestore\";\r\nimport {useCollection} from \"react-firebase-hooks/firestore\";\r\n\r\n\r\n\r\nlet fireStoreList = null;\r\n\r\n/*\r\nprops: {\r\n    menuItems: MenuItem[]\r\n}\r\n\r\nmenuItem {\r\n    text: string;\r\n\r\n    command: Function\r\n}\r\n*/\r\n\r\n\r\nfunction deleteAll() {\r\n    // deletes all completed Tasks\r\n    TaskDataController.deleteAllCompleted()\r\n}\r\n\r\nfunction ClearAll() {\r\n    // Resets all sections and tasks, gives an empty section\r\n    TaskDataController.clearAllSectionsAndTasks()\r\n\r\n}\r\n\r\n\r\nconst menuItems = [\r\n    // Text, commands, and icons present in the action menu.\r\n    {text: \"Add New Section\", command: TaskDataController.createSection, icon: faPlus},\r\n    {text: \"Clear Completed Tasks\", command:deleteAll, icon: faMinus},\r\n    {text: \"Clear All Sections And Tasks\", command: ClearAll, icon: faMinus}\r\n]\r\n\r\nexport default function ActionMenu(props) {\r\n\r\n    const query = database.collection(collectionName);\r\n    const [value, loading, error] = useCollection(query);\r\n    if (value) {\r\n        fireStoreList = value.docs.map((doc) => {\r\n            return {...doc.data()}});\r\n        TaskDataController.setSectionToStack(fireStoreList)\r\n    }\r\n\r\n\r\n\r\n    // returns a component that contains the commands listed above.\r\n    return (\r\n        <button class='overlay'onClick= {AppDataController.closeMenu}\r\n            aria-label=\"Click here to exit the action menu.\">\r\n            <div class='action-container'>\r\n                { menuItems.map(menuItem => {\r\n                    return <ActionMenuItem {...menuItem} key={menuItem.text}/>\r\n                })}\r\n            </div>\r\n        </button>\r\n     \r\n    )\r\n}","import \"../../css/prioritySortButton.css\"\r\n\r\nimport TaskDataController from \"../../modules/dataController/TaskDataController\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\"\r\nimport { faSort, faSortDown, faSortUp } from \"@fortawesome/free-solid-svg-icons\"\r\nimport \"../../css/SectionAddTaskButton.css\"\r\n\r\n// The button to change a task's priority level.\r\nfunction TaskPriorityButton(props) {\r\n    //\r\n    const sectionText = props.sectionTitle\r\n    let priorityIcon\r\n    if(props.value == 1){\r\n        priorityIcon = faSortDown\r\n    }\r\n    else if (props.value == 2){\r\n        priorityIcon = faSort\r\n    }\r\n    else {\r\n        priorityIcon = faSortUp\r\n    }\r\n\r\n    return (\r\n        <button\r\n            aria-label={sectionText ? \"Press to change the priority of the tasks in \" + sectionText : \"Press to change the priority of the tasks in an empty section\"}\r\n            class=\"TaskPriorityButton\"\r\n            onClick={ (e) => handleOnClick(props.identifier, props.sectionIdentifier, props.value)}\r\n        >\r\n            <FontAwesomeIcon icon={priorityIcon} />\r\n        </button>\r\n    )\r\n}\r\n\r\nfunction handleOnClick(id, sectionIdentifier, value) {\r\n    TaskDataController.updateTaskPriority(id, sectionIdentifier, value)\r\n}\r\n\r\nexport default TaskPriorityButton","import { useEffect, useRef, useState } from 'react';\r\n\r\nfunction SelectionMaintainingInput(props) {\r\n    const { value, onChange, ...rest } = props;\r\n    const [cursor, setCursor] = useState(null);\r\n    const ref = useRef(null);\r\n\r\n    useEffect(() => {\r\n        const input = ref.current;\r\n        if (input) input.setSelectionRange(cursor, cursor);\r\n    }, [ref, cursor, value]);\r\n\r\n    const handleChange = (e) => {\r\n        setCursor(e.target.selectionStart);\r\n        onChange && onChange(e);\r\n    };\r\n\r\n    return <input ref={ref} value={value} onChange={handleChange} {...rest} />;\r\n}\r\n\r\nexport default SelectionMaintainingInput;","import \"../../css/task.css\"\r\nimport TaskDataController from \"../../modules/dataController/TaskDataController\"\r\nimport store from \"../../modules/dataController/store\";\r\nimport TaskPriorityButton from \"../newSection/taskPriorityButton\";\r\nimport SelectionMaintainingInput from \"../../modules/dataController/SelectionMaintainingInput\";\r\n\r\n/*\r\nprops: {\r\n    text:string;\r\n    isCompleted:boolean\r\n    id:string \r\n}\r\n*/\r\n\r\n// This creates the individual task for use on mobile displays. It contains a checkbox, and a input text\r\n\r\nexport default function Task(props) {\r\n\r\n\r\n\r\n    const classes = `task-item`\r\n    const cssID = props.isCompleted ? 'completedTask' : ''\r\n\r\n\r\n\r\n    // Why hello ugly getAria functions that are 80 lines long! I would love to make these cleaner, but currently\r\n    // they do what they need to with getting what needs to be returned to the screenReader, and I have one hour\r\n    // left to turn this in so there it is!\r\n\r\n    function getAriaCheckbox(){\r\n        const currentSectionText = props.text\r\n        if (currentSectionText){\r\n            if (props.text){\r\n                if (props.isCompleted){\r\n                    return \"This is the checked checkbox for the task \" + props.text + \" in\" + currentSectionText\r\n                }\r\n                else{\r\n                    return \"This is the unchecked checkbox for the task \" + props.text + \" in\" + currentSectionText\r\n                }\r\n            }\r\n            else{\r\n                if (props.isCompleted){\r\n                    return \"This is the checked checkbox for an empty task in\" + currentSectionText\r\n                }\r\n                else{\r\n                    return \"This is the unchecked checkbox for an empty task in\" + currentSectionText\r\n                }\r\n            }\r\n        }\r\n        else{\r\n            if (props.text){\r\n                if (props.isCompleted){\r\n                    return \"This is the checked checkbox for the task \" + props.text + \" in an empty section.\"\r\n                }\r\n                else{\r\n                    return \"This is the unchecked checkbox for the task \" + props.text + \" in an empty section.\"\r\n                }\r\n            }\r\n            else{\r\n                if (props.isCompleted){\r\n                    return \"This is the checked checkbox for an empty task in in an empty section.\"\r\n                }\r\n                else{\r\n                    return \"This is the unchecked checkbox for an empty task in an empty section.\"\r\n                }\r\n            }\r\n        }\r\n        }\r\n\r\n    function getAriaTask(){\r\n        const currentSectionText = props.text\r\n        if (currentSectionText){\r\n            if (props.text){\r\n                if (props.isCompleted){\r\n                    return \"edit the completed task \" + props.text + \" in\" + currentSectionText + \".\"\r\n                }\r\n                else{\r\n                    return \"edit the uncompleted task \" + props.text + \" in\" + currentSectionText + \".\"\r\n                }\r\n            }\r\n            else{\r\n                if (props.isCompleted){\r\n                    return \"edit the completed empty task in\" + currentSectionText + \".\"\r\n                }\r\n                else{\r\n                    return \"edit the uncompleted empty task  in\" + currentSectionText + \".\"\r\n                }\r\n            }\r\n        }\r\n        else{\r\n            if (props.text){\r\n                if (props.isCompleted){\r\n                    return \"edit the completed task \" + props.text + \" in an empty section.\"\r\n                }\r\n                else{\r\n                    return \"edit the uncompleted task \" + props.text + \" in an empty section.\"\r\n                }\r\n            }\r\n            else{\r\n                if (props.isCompleted){\r\n                    return \"edit a completed empty task in in an empty section.\"\r\n                }\r\n                else{\r\n                    return \"edit a uncompleted empty task in an empty section.\"\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n    return (\r\n        <div class={classes} id = {cssID+\"markedCompleted\"}>\r\n            <input\r\n                aria-label= {getAriaCheckbox()}\r\n                alt='task completion status' \r\n                class='checkbox' \r\n                type=\"checkbox\"\r\n                value={ props.isCompleted}\r\n                onChange= {(e) => handleCheckBoxEvent(props.id, props.sectionIdentifier, props.isCompleted)}\r\n                checked= {props.isCompleted}\r\n            />\r\n            <SelectionMaintainingInput\r\n                aria-label={getAriaTask()}\r\n                class='task-text' \r\n                type='text' \r\n                alt='task text'\r\n\r\n                id ={cssID}\r\n                onChange= { (e) => handleTextEvent(props.id, props.sectionIdentifier,e)}\r\n                value={props.text}\r\n                onFocus={(e)=>e.currentTarget.value = props.text}\r\n            />\r\n            <TaskPriorityButton\r\n                sectionTitle = {props.text}\r\n                sectionIdentifier = {props.sectionIdentifier}\r\n                identifier = {props.id}\r\n                value = {props.priority}/>\r\n        </div>\r\n    )\r\n\r\n}\r\n\r\n\r\n\r\nfunction handleTextEvent(id, identifier, event) {\r\n    const newText = event.currentTarget.value\r\n    TaskDataController.updateTaskText(id, identifier, newText)\r\n}\r\n\r\nfunction handleCheckBoxEvent(id, identifier, isToggled) {\r\n    TaskDataController.toggleTaskCompletion(id, identifier, isToggled)\r\n}","import { faAngleDown, faAngleRight } from \"@fortawesome/free-solid-svg-icons\"\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\"\r\nimport store from \"../../modules/dataController/store\";\r\nimport AppDataController from \"../../modules/dataController/AppDataController\";\r\nimport { connect } from \"react-redux\"\r\n\r\n\r\n\r\n// SectionButton refers to the arrow button to show taskslist when in mobile view.\r\n// This was considered for desktop and landscape view, but difficult would\r\n// be an understatement in trying to determine scroll length, so that was canned.\r\n\r\nfunction CompletedSectionButton(props) {\r\n\r\n    const isToggled = store.getState().showCompletedTasks\r\n\r\n    const icon = isToggled ? faAngleDown : faAngleRight\r\n\r\n    // // Once again, sectionText is used for the aria-label.\r\n\r\n    const ariaText = props.text ? props.text : \"an empty \"\r\n    // This was used for getting further parameters without a if else statement.\r\n\r\n\r\n    return (\r\n        <button class=\"drop-down\" onClick={(e) => handleOnClick()}\r\n                aria-label= {props.toggledState ? \"click to close\" + ariaText + \"section\": \"click to open \" + ariaText + \"section\"}\r\n        >\r\n            <FontAwesomeIcon icon={icon} />\r\n        </button>\r\n    )\r\n}\r\n\r\n\r\n\r\n\r\nfunction handleOnClick() {\r\n    AppDataController.toggleCompletedSection()\r\n}\r\n\r\nfunction mapStateToProps(state){\r\n    return{\r\n        isToggled: store.getState().showCompletedTasks}\r\n}\r\n\r\nexport default connect(mapStateToProps)(CompletedSectionButton)\r\n","import \"../../css/bar.css\"\r\nimport CompletedSectionButton from \"./completedSectionButton\";\r\n\r\n\r\n// This displays the completed section in portrait view.\r\n// Needs to be a separate section due to it's unique nature.\r\nfunction CompletedSection(props) {\r\n    let cssID = \"completedSectionText\";\r\n    return (\r\n        <div class={\"barCompleted\"} id={\"bar\" + cssID}>\r\n            <CompletedSectionButton text = {props.sectionTitle}/>\r\n            <div\r\n                aria-label={props.sectionTitle ? \"Edit the section title of\" + props.sectionTitle : \"Edit the title of an empty section\"}\r\n                class=\"bar-title\"\r\n                id={cssID}\r\n                type='text'\r\n                alt='Completed text'\r\n                value=\"Completed\"\r\n            >Completed</div>\r\n        </div>)\r\n}\r\n\r\n\r\nexport default CompletedSection","import Task from \"./Task\";\r\nimport CompletedSection from \"../newSection/completedSection\";\r\n\r\n\r\n\r\n\r\n\r\n/*\r\nprops:{\r\n    tasks: TaskItem[]\r\n\r\n}\r\n*/\r\n\r\n// creates the list of tasks within each section visible in mobile view.\r\n\r\nexport default function TaskList(props) {\r\n\r\n    return (\r\n        <div class='container'>\r\n            {\r\n            props.tasks.map(task => {\r\n            return <Task \r\n                        {...task}\r\n                        key={task.id}\r\n                    />\r\n            })\r\n            }\r\n        </div>   \r\n    )\r\n    \r\n}","import { faAngleDown, faAngleRight } from \"@fortawesome/free-solid-svg-icons\"\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\"\r\nimport TaskDataController from \"../../modules/dataController/TaskDataController\";\r\nimport store from \"../../modules/dataController/store\";\r\n\r\n\r\n\r\n\r\n// SectionButton refers to the arrow button to show taskslist when in mobile view.\r\n// This was considered for desktop and landscape view, but difficult would\r\n// be an understatement in trying to determine scroll length, so that was canned.\r\n\r\nfunction SectionButton(props) {\r\n\r\n    const isToggled = store.getState()\r\n\r\n    const icon = props.toggledState ? faAngleDown : faAngleRight\r\n\r\n\r\n    const ariaText = props.text ? props.text : \"an empty \"\r\n    // This was used for getting further parameters without a if else statement.\r\n\r\n\r\n    return (\r\n        <button class=\"drop-down\" onClick={(e) => handleOnClick(props.identifier)}\r\n            aria-label= {props.toggledState ? \"click to close\" + ariaText + \"section\": \"click to open \" + ariaText + \"section\"}\r\n            >\r\n            <FontAwesomeIcon icon={icon} />\r\n        </button>\r\n    )\r\n}   \r\n\r\n\r\n\r\n\r\nfunction handleOnClick(identifier) {\r\n    TaskDataController.toggleSection(identifier)\r\n}\r\n\r\n\r\n\r\nexport default SectionButton","import \"../../css/bar.css\"\r\nimport \"../../css/todo.css\"\r\nimport \"../../css/completed.css\"\r\n\r\nimport TaskDataController from \"../../modules/dataController/TaskDataController\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\"\r\nimport { faPlus } from \"@fortawesome/free-solid-svg-icons\"\r\nimport \"../../css/SectionAddTaskButton.css\"\r\n\r\n\r\nfunction SectionAddTaskButton(props) {\r\n    // This is a component inside a section's bar in mobile view that adds a task to the associated section.\r\n\r\n\r\n    // sectionText gets the text of the section, needed because sections are identified by a uuid.\r\n    // this is used to determine whether the sectionText is empty, because the screenreader needs to know\r\n    // if a section title is empty instead of just skipping over it.\r\n    const sectionText = props.sectionTitle\r\n\r\n        return (\r\n        <button\r\n            aria-label={sectionText ? \"Press to add a task to \" + sectionText : \"Press to add a task to an empty section\"}\r\n            class=\"add-task-button\"\r\n            onClick={ (e) => handleOnClick(props.identifier)}\r\n        >\r\n            <FontAwesomeIcon icon={faPlus} />\r\n        </button>\r\n    )\r\n}\r\n\r\nfunction handleOnClick(props) {\r\n    TaskDataController.createTask(props)\r\n}\r\n\r\nexport default SectionAddTaskButton","import \"../../css/prioritySortButton.css\"\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\"\r\nimport { faChartBar } from \"@fortawesome/free-solid-svg-icons\"\r\nimport \"../../css/SectionAddTaskButton.css\"\r\nimport AppDataController from \"../../modules/dataController/AppDataController\";\r\n\r\n\r\n// This is a button that opens the priority sort menu to sort a list of tasks in mobile view.\r\nfunction PrioritySortButton(props) {\r\n    const sectionText = props.sectionTitle\r\n\r\n    return (\r\n        <button\r\n            aria-label={sectionText ? \"Press to sort the tasks in \" + sectionText : \"Press to sort the tasks in an empty section\"}\r\n            class=\"prioritySortButton\"\r\n            onClick={ (e) => handleOnClick(props.identifier, props.sortType)}\r\n        >\r\n            <FontAwesomeIcon icon={faChartBar} />\r\n        </button>\r\n    )\r\n}\r\n\r\nfunction handleOnClick(identifier, sortType) {\r\n    AppDataController.pushSelectedSection(identifier, sortType)\r\n    AppDataController.showPriorityMenu()\r\n}\r\n\r\nexport default PrioritySortButton","import \"../../css/prioritySortButton.css\"\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\"\r\nimport { faShareAlt } from \"@fortawesome/free-solid-svg-icons\"\r\nimport \"../../css/SectionAddTaskButton.css\"\r\nimport AppDataController from \"../../modules/dataController/AppDataController\";\r\n\r\n\r\n// This is a button that opens the priority sort menu to sort a list of tasks in mobile view.\r\nfunction ShareSectionButton(props) {\r\n    console.log(\"These are the props!\")\r\n    console.log(props)\r\n    const sectionText = props.sectionTitle\r\n\r\n    return (\r\n        <button\r\n            aria-label={sectionText ? \"Press to share the section \" + sectionText : \"Press to share the unnamed section\"}\r\n            class=\"shareSectionButton\"\r\n            onClick={ (e) => handleOnClick(props.identifier, props.sharedWith)}\r\n        >\r\n            <FontAwesomeIcon icon={faShareAlt} />\r\n        </button>\r\n    )\r\n}\r\n\r\nfunction handleOnClick(identifier, sharedWith) {\r\n    AppDataController.pushSelectedSection(identifier, sharedWith)\r\n    AppDataController.toggleShareMenu()\r\n}\r\n\r\nexport default ShareSectionButton","import \"../../css/prioritySortButton.css\"\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\"\r\nimport { faMinus } from \"@fortawesome/free-solid-svg-icons\"\r\nimport \"../../css/SectionAddTaskButton.css\"\r\nimport AppDataController from \"../../modules/dataController/AppDataController\";\r\nimport TaskDataController from \"../../modules/dataController/TaskDataController\";\r\n\r\n\r\n// This is a button that opens the priority sort menu to sort a list of tasks in mobile view.\r\nfunction RemoveSectionSharedButton(props) {\r\n    console.log(\"These are the props!\")\r\n    console.log(props)\r\n    const sectionText = props.sectionTitle\r\n\r\n    return (\r\n        <button\r\n            aria-label={sectionText ? \"Press to share the section \" + sectionText : \"Press to share the unnamed section\"}\r\n            class=\"shareSectionButton\"\r\n            onClick={ (e) => handleOnClick(props.identifier, props.sharedWith)}\r\n        >\r\n            <FontAwesomeIcon icon={faMinus} />\r\n        </button>\r\n    )\r\n}\r\n\r\nfunction handleOnClick(identifier, sharedWith) {\r\n    AppDataController.pushSelectedSection(identifier, sharedWith)\r\n    TaskDataController.removeTask()\r\n}\r\n\r\nexport default RemoveSectionSharedButton","import \"../../css/bar.css\"\r\nimport SectionButton from \"./SectionButton\"\r\nimport TaskDataController from \"../../modules/dataController/TaskDataController\";\r\nimport SectionAddTaskButton from \"./sectionAddTask\";\r\nimport PrioritySortButton from \"./priorityButton\";\r\nimport ShareSectionButton from \"./shareSectionButton\";\r\nimport \"../../css/shareGui.css\"\r\nimport removeSectionSharedButton from \"./removeSharedButton\";\r\nimport RemoveSectionSharedButton from \"./removeSharedButton\";\r\n\r\n\r\n// This is the section bar, it contains a button for showing tasklists, an input for editing the section title, and\r\n// a button to add tasks.\r\n// A task Add button was considered for the completed tasks section, but this turned out to be a logistical headache\r\n// as completed tasks when checked uncompleted would return to it's origin, the completed tasks section.\r\n    // a uncompleted task in a completed task section.\r\n\r\nexport default function SectionBar(props) {\r\n    let cssID;\r\n\r\n    // cssID determines if the section is the To do section, completed section, or an added section.\r\n    // lab3 update: There is so much redundant code here and I have 2 days to finish lab5 and I am\r\n    // Worried I will not have time to clean this up later so, whatever!\r\n\r\n    let classes = `bar ${props.identifier}`\r\n    if (props.identifier !== 'toDo' && props.identifier !== 'completed'){\r\n        cssID = \"otherSections\";\r\n    }\r\n    else{\r\n        cssID = props.identifier; // props.identifier contains either \"toDo\", \"completed\", or some uuid string.\r\n    }\r\n\r\n    if(!props.isOwned){\r\n        cssID = \"otherSectionsSHARED\"\r\n        classes = 'barotherSectionsSHARED'\r\n    }\r\n\r\n    console.log(\"The cssID\")\r\n    console.log(cssID)\r\n    console.log(\"bar\"+cssID)\r\n\r\n\r\n\r\n    // This will return a section bar, containing a button to open and close the tasks,\r\n    // the section's input box itself.\r\n    // The priority sort button to sort tasks by priority\r\n    // the add task button to add tasks to the section\r\n    return (\r\n        <div class={classes} id={\"bar\"+cssID + props.identifier}>\r\n            <SectionButton identifier = {props.identifier}\r\n                           toggledState = {props.isToggled}\r\n                            text = {props.sectionTitle}/>\r\n            <input\r\n                aria-label={props.sectionTitle ? \"Edit the section title of\" + props.sectionTitle : \"Edit the title of an empty section\"}\r\n                class=\"bar-title\"\r\n                id={cssID}\r\n                type='text'\r\n                alt='task text'\r\n                onChange= { (e) => handleTextEvent(props.identifier,e)}\r\n                value={props.sectionTitle}\r\n            />\r\n            {props.isOwned && <ShareSectionButton\r\n                sharedWith = {props.sharedWith}\r\n                identifier = {props.identifier}/>}\r\n            {!props.isOwned && <RemoveSectionSharedButton\r\n                sharedWith = {props.sharedWith}\r\n                identifier = {props.identifier}/>}\r\n\r\n\r\n            {/*The code below determines whether the section is completed, and will hide the addTaskButton if it is.*/}\r\n            <PrioritySortButton\r\n                identifier = {props.identifier}\r\n                sectionTitle = {props.sectionTitle}\r\n                sortType = {props.sortType}/>\r\n            {<SectionAddTaskButton\r\n                identifier = {props.identifier}\r\n                sectionTitle = {props.sectionTitle}/>}\r\n        </div>  \r\n    )\r\n}\r\n\r\nfunction handleTextEvent(id,event) {\r\n    const text = event.currentTarget.value\r\n    TaskDataController.updateSectionText(id,text)\r\n}","import TaskList from \"../Tasks/TaskList.js\"\r\nimport SectionBar from \"./SectionBar.js\"\r\nimport AppDataController from \"../../modules/dataController/AppDataController\";\r\nimport {connect} from \"react-redux\";\r\nimport TaskDataController from \"../../modules/dataController/TaskDataController\";\r\nimport {collectionName, database} from \"../../modules/dataController/firestore\";\r\nimport {useCollection} from \"react-firebase-hooks/firestore\";\r\nimport store from \"../../modules/dataController/store\";\r\nimport CompletedSection from \"./completedSection\";\r\n\r\n\r\n\r\n/*\r\nprops:\r\n    This will take in:\r\n    - identifier: A random uuidv4 for added sections, for To do it's 'toDo', for completed: 'completed'\r\n    - text: A title, by default it's null, for to do and completed... yeah.\r\n    - isToggled: false or true, will toggle viewing the tasks\r\n    - tasks: The list of tasks assigned to each section.\r\n */\r\n\r\n\r\n\r\n// I am truly embarassed and deeply concerned for what this is.\r\n// The long list of code below sorts the tasks by whatever sortType\r\n// is selected. This needs to be done before the tasks are put into\r\n// the taskList, so below is a long list of all that.\r\n// Not only that, tasks as well as completed tasks are pushed to the state.\r\n// This is done so that in clearing all sections and tasks, instead of making\r\n// many queries, we already have all tasks and sections we need to clear in\r\n// the state.\r\n// And then, once that's done, this will return a given section\r\nfunction SectionContainer(props) {\r\n    const isToggled = (props.isToggledList.includes(props.identifier))\r\n\r\n    const taskRef = database.collection(collectionName).doc(props.identifier).collection('tasks')\r\n    const [value, loading, error] = useCollection(taskRef);\r\n    let fireStoreList = null;\r\n    let fireStoreCompletedList = null;\r\n    let stateCompletedList = null;\r\n\r\n    console.log(\"Hopefully this shows the owner!\")\r\n    console.log(props.owner)\r\n\r\n    if (value) {\r\n        fireStoreList = value.docs.map((doc) => {\r\n            return {...doc.data()}\r\n        });\r\n\r\n        const allTasks = store.getState().taskStack.map(x => x).filter(task => task.sectionIdentifier !== props.identifier).concat(fireStoreList)\r\n        TaskDataController.setTasksToStack(allTasks)\r\n\r\n        const fireStoreCompletedList = fireStoreList.map(x => x).filter(task => task.isCompleted === true)\r\n        stateCompletedList = store.getState().completedTasks.map(x => x).filter(task => task.sectionIdentifier !== props.identifier).concat(fireStoreCompletedList)\r\n        TaskDataController.pushCompletedTask(stateCompletedList)\r\n\r\n        if(props.sortType < 7){\r\n            if(props.sortType === 1){\r\n                fireStoreList.sort(function(task1, task2) {\r\n                    let task1Text = task1.text.toUpperCase();\r\n                    let task2Text = task2.text.toUpperCase();\r\n                    return (task1Text < task2Text) ? -1 : (task1Text > task2Text) ? 1 : 0;\r\n                });\r\n            }\r\n            else if(props.sortType === 2){\r\n                fireStoreList.sort(function(task1, task2) {\r\n                    let task1Text = task1.text.toUpperCase();\r\n                    let task2Text = task2.text.toUpperCase();\r\n                    return (task1Text > task2Text) ? -1 : (task1Text > task2Text) ? 1 : 0;\r\n                });\r\n            }\r\n            else if(props.sortType === 3) {\r\n                    fireStoreList.sort(function(task1, task2) {\r\n                        let task1date = task1.timeMade;\r\n                        let task2date = task2.timeMade;\r\n                        return (task1date < task2date) ? -1 : (task1date > task2date) ? 1 : 0;\r\n                    });\r\n                }\r\n            else if(props.sortType === 4){\r\n                fireStoreList.sort(function(task1, task2) {\r\n                    let task1date = task1.timeMade;\r\n                    let task2date = task2.timeMade;\r\n                    return (task1date > task2date) ? -1 : (task1date > task2date) ? 1 : 0;\r\n                });\r\n            }\r\n            else if(props.sortType === 5){\r\n                fireStoreList.sort(function(task1, task2) {\r\n                    let task1priority = task1.priority;\r\n                    let task2priority = task2.priority;\r\n                    return (task1priority > task2priority) ? -1 : (task1priority > task2priority) ? 1 : 0;\r\n                });\r\n            }\r\n            else if(props.sortType === 6){\r\n                fireStoreList.sort(function(task1, task2) {\r\n                    let task1priority = task1.priority;\r\n                    let task2priority = task2.priority;\r\n                    return (task1priority < task2priority) ? -1 : (task1priority > task2priority) ? 1 : 0;\r\n                });\r\n            }\r\n        }\r\n\r\n\r\n\r\n    }\r\n\r\n    console.log(\"Is owned\")\r\n    console.log(props.owner === store.getState().userID)\r\n    return (\r\n        <div>\r\n            {fireStoreList && <SectionBar\r\n                sectionTitle = {props.title}\r\n                className={props.identifier}\r\n                identifier ={props.identifier}\r\n                sortType = {props.sortType}\r\n                isToggled ={isToggled}\r\n                sharedWith ={props.sharedWith}\r\n                isOwned = {props.owner === store.getState().userID}\r\n                />}\r\n            { isToggled && fireStoreList &&\r\n                <TaskList tasks={fireStoreList}/>}\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\nfunction mapToState(state, ownProps) {\r\n     return {\r\n         isToggledList: store.getState().sectionsToggled,\r\n     }\r\n }\r\n\r\nexport default connect(mapToState)(SectionContainer)\r\n\r\n\r\n","import TaskDataController from \"../../modules/dataController/TaskDataController\"\r\n\r\n/*\r\nprops: {\r\n    text:string;\r\n    isCompleted:boolean\r\n    id:string\r\n}\r\n*/\r\n\r\n// This creates the individual completed task for mobile view.\r\n// much of this is duplicate code that needs to be separate from\r\n// the default task type, due to being a special completed task.\r\n\r\nexport default function CompletedSectionTask(props) {\r\n    const classes = `task-item`\r\n    const cssID = props.isCompleted ? 'completedTask' : ''\r\n\r\n\r\n\r\n    // Why hello ugly getAria functions that are 80 lines long! I would love to make these cleaner, but currently\r\n    // they do what they need to with getting what needs to be returned to the screenReader, and I have one hour\r\n    // left to turn this in so there it is!\r\n\r\n    function getAriaCheckbox(){\r\n        const currentSectionText = props.text\r\n        if (currentSectionText){\r\n            if (props.text){\r\n                if (props.isCompleted){\r\n                    return \"This is the checked checkbox for the task \" + props.text + \" in\" + currentSectionText\r\n                }\r\n                else{\r\n                    return \"This is the unchecked checkbox for the task \" + props.text + \" in\" + currentSectionText\r\n                }\r\n            }\r\n            else{\r\n                if (props.isCompleted){\r\n                    return \"This is the checked checkbox for an empty task in\" + currentSectionText\r\n                }\r\n                else{\r\n                    return \"This is the unchecked checkbox for an empty task in\" + currentSectionText\r\n                }\r\n            }\r\n        }\r\n        else{\r\n            if (props.text){\r\n                if (props.isCompleted){\r\n                    return \"This is the checked checkbox for the task \" + props.text + \" in an empty section.\"\r\n                }\r\n                else{\r\n                    return \"This is the unchecked checkbox for the task \" + props.text + \" in an empty section.\"\r\n                }\r\n            }\r\n            else{\r\n                if (props.isCompleted){\r\n                    return \"This is the checked checkbox for an empty task in in an empty section.\"\r\n                }\r\n                else{\r\n                    return \"This is the unchecked checkbox for an empty task in an empty section.\"\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    function getAriaTask(){\r\n        const currentSectionText = props.text\r\n        if (currentSectionText){\r\n            if (props.text){\r\n                if (props.isCompleted){\r\n                    return \"edit the completed task \" + props.text + \" in\" + currentSectionText + \".\"\r\n                }\r\n                else{\r\n                    return \"edit the uncompleted task \" + props.text + \" in\" + currentSectionText + \".\"\r\n                }\r\n            }\r\n            else{\r\n                if (props.isCompleted){\r\n                    return \"edit the completed empty task in\" + currentSectionText + \".\"\r\n                }\r\n                else{\r\n                    return \"edit the uncompleted empty task  in\" + currentSectionText + \".\"\r\n                }\r\n            }\r\n        }\r\n        else{\r\n            if (props.text){\r\n                if (props.isCompleted){\r\n                    return \"edit the completed task \" + props.text + \" in an empty section.\"\r\n                }\r\n                else{\r\n                    return \"edit the uncompleted task \" + props.text + \" in an empty section.\"\r\n                }\r\n            }\r\n            else{\r\n                if (props.isCompleted){\r\n                    return \"edit a completed empty task in in an empty section.\"\r\n                }\r\n                else{\r\n                    return \"edit a uncompleted empty task in an empty section.\"\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n    return (\r\n        <div class={classes} id = {\"markedCompleted\"}>\r\n            <input\r\n                aria-label= {getAriaCheckbox()}\r\n                alt='task completion status'\r\n                class='checkbox'\r\n                type=\"checkbox\"\r\n                value={ props.isCompleted}\r\n                onChange= {(e) => handleCheckBoxEvent(props.id, props.sectionIdentifier, props.isCompleted)}\r\n                checked= {props.isCompleted}\r\n            />\r\n            <input\r\n                aria-label={getAriaTask()}\r\n                class='task-text'\r\n                type='text'\r\n                alt='task text'\r\n                onChange= { (e) => handleTextEvent(props.id, props.sectionIdentifier,e)}\r\n                value={props.text}\r\n            />\r\n        </div>\r\n    )\r\n\r\n}\r\n\r\nfunction handleTextEvent(id, identifier, event) {\r\n\r\n    const newText = event.currentTarget.value\r\n\r\n    TaskDataController.updateTaskText(id, identifier, newText)\r\n}\r\n\r\nfunction handleCheckBoxEvent(id, identifier, isToggled) {\r\n    TaskDataController.toggleTaskCompletion(id, identifier, isToggled)\r\n}","import CompletedSectionTask from \"./completedSectionTask\";\r\n\r\n\r\n\r\n\r\n\r\n/*\r\nprops:{\r\n    tasks: TaskItem[]\r\n\r\n}\r\n*/\r\n\r\n// creates the list of completed Tasks for the completed tasks list\r\n\r\nexport default function CompletedSectionsTaskList(props) {\r\n\r\n    return (\r\n        <div class='container'>\r\n            {\r\n                props.tasks.map(task => {\r\n                    return <CompletedSectionTask\r\n                        {...task}\r\n                        key={task.id}\r\n                    />\r\n                })\r\n            }\r\n        </div>\r\n    )}\r\n","import SectionContainer from \"./SectionContainer\";\r\nimport { connect } from \"react-redux\"\r\nimport React, { useEffect, useState } from 'react';\r\nimport CompletedSection from \"./completedSection\";\r\nimport store from \"../../modules/dataController/store\";\r\nimport CompletedSectionsTaskList from \"./completedSectionsTaskList\";\r\n\r\n/*\r\nprops:{\r\n    sections: Section\r\n\r\n */\r\n// Returns a list of sections\r\nfunction SectionList(props){\r\n    if (props.sections){\r\n        return(\r\n            <div class='container'>\r\n                {\r\n                    props.sections.map(section => {\r\n                        return <SectionContainer\r\n                            {...section}\r\n                            key={section.identifier}\r\n                        />\r\n                    })\r\n                }\r\n            <CompletedSection/>\r\n            { props.isCompletedTasksToggled &&\r\n            <CompletedSectionsTaskList tasks={props.completedTasks}/>}\r\n            </div>\r\n        )\r\n    }\r\n    else{\r\n        return null\r\n    }\r\n}\r\n\r\n// export default SectionList\r\n\r\n\r\nfunction mapStateToProps(state){\r\n    return{\r\n        isCompletedTasksToggled: store.getState().showCompletedTasks,\r\n        completedTasks: store.getState().completedTasks}\r\n}\r\n\r\nexport default connect(mapStateToProps)(SectionList)","import { faAngleRight } from \"@fortawesome/free-solid-svg-icons\"\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\"\r\nimport \"../../css/sidebar.css\"\r\n\r\n\r\n// The components in otherDisplays are visible when the display is in landscape or in desktop view.\r\n\r\n\r\n\r\nfunction SideBarButton(props) {\r\n    // Sidebar button is treated similarly to SectionButton in newSection,  but does not rotate and will instead\r\n    // scroll to the Section element in sideList\r\n\r\n    const currentSectionText = props.title\r\n        //another currentSectionText for aria-label!!!\r\n\r\n    const icon = faAngleRight\r\n\r\n    return (\r\n        <button class=\"SideBarButton\" onClick={(e) => handleOnClick(props.identifier)}\r\n        aria-label={currentSectionText ? \"Press to scroll to \" + currentSectionText : \"Press to scroll to a section without a title\"}\r\n        aria-hidden=\"false\">\r\n            <FontAwesomeIcon icon={icon} />\r\n        </button>\r\n    )\r\n}\r\n\r\n\r\n\r\n\r\nfunction handleOnClick(identifier) {\r\n    // handles scrolling to the element, uses scrollIntoView to acomplish this.\r\n    // this should work on all popular platforms minus internet explorer, and\r\n    // safari won't support the options like smooth, block, and inline.\r\n    let sectionToScrollTo = document.getElementById(identifier+\"list\");\r\n    sectionToScrollTo.scrollIntoView({behavior: \"smooth\", block: \"start\", inline: \"start\"})\r\n}\r\n\r\n\r\n\r\nexport default SideBarButton","import \"../../css/sidebar.css\"\r\nimport SideBarButton from \"./sideBarButton\";\r\nimport TaskDataController from \"../../modules/dataController/TaskDataController\";\r\nimport SectionAddTaskButton from \"../newSection/sectionAddTask\";\r\nimport PrioritySortButton from \"../newSection/priorityButton\";\r\nimport store from \"../../modules/dataController/store\";\r\nimport ShareSectionButton from \"../newSection/shareSectionButton\";\r\nimport RemoveSectionSharedButton from \"../newSection/removeSharedButton\";\r\n\r\n\r\n\r\n// Will create the Individual elements inside the sideBarlist.\r\n// contains a sideBarButton, an input field for the section title, and a add task button for the section\r\n\r\nexport default function SideBarElement(props) {\r\n    console.log(props)\r\n    console.log(\"PLEASE OWNER\")\r\n    // cssID determines whether the sidebar is todo, completed, or a added section.\r\n\r\n    let cssID\r\n    let classes = \"sideBarElement\"\r\n    if (props.identifier !== 'toDo' && props.identifier !== 'completed'){\r\n        cssID = \"otherSectionssideBar\";\r\n    }\r\n    // else{\r\n    //     cssID = props.identifier + \"sideBar\";\r\n    // }\r\n\r\n    console.log(cssID)\r\n\r\n\r\n\r\n    const isOwned  = props.owner === store.getState().userID\r\n\r\n    if(!isOwned){\r\n        cssID = 'sideBarElementSHARED'\r\n    }\r\n    console.log(\"THE CLASS NAME\")\r\n    console.log(\"sideBarElement\"+!isOwned)\r\n\r\n    return(\r\n        <div\r\n            class=\"sideBarElement\"\r\n            id={cssID}>\r\n            <SideBarButton\r\n                identifier = {props.identifier}\r\n                title = {props.title}/>\r\n            <input\r\n                aria-label={props.title ? \"edit the title for the section \" + props.title : \"edit the title for a section with an empty title\"}\r\n                class=\"bar-title\"\r\n                id={cssID}\r\n                // class=\"bar-title\"\r\n                type='text'\r\n                alt='task text'\r\n                // alt='Section text'\r\n                onChange= { (e) => handleTextEvent(props.identifier,e)}\r\n                value={props.title}/>\r\n\r\n            {isOwned && <ShareSectionButton\r\n                sharedWith = {props.sharedWith}\r\n                identifier = {props.identifier}/>}\r\n            {!isOwned && <RemoveSectionSharedButton\r\n                sharedWith = {props.sharedWith}\r\n                identifier = {props.identifier}/>}\r\n\r\n            <PrioritySortButton\r\n                identifier = {props.identifier}\r\n                sectionTitle = {props.title}\r\n                sortType = {props.sortType}/>\r\n            <SectionAddTaskButton\r\n                identifier = {props.identifier}/>\r\n\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\nfunction handleTextEvent(id,event) {\r\n    const text = event.currentTarget.value\r\n    TaskDataController.updateSectionText(id,text)\r\n}","import \"../../css/sidebar.css\"\r\nimport SideBarButton from \"./sideBarButton\";\r\n\r\n\r\n// Will create the completed section inside the sidebar on the left.\r\n// contains a sideBarButton.\r\n\r\nexport default function SideBarCompletedSection(props) {\r\n    // cssID determines whether the sidebar is todo, completed, or a added section.\r\n\r\n    let cssID = \"completedsideBar\"\r\n\r\n\r\n\r\n\r\n    return(\r\n        <div\r\n            class=\"sideBarElement\"\r\n            id={cssID}>\r\n            <SideBarButton\r\n                identifier = \"completedSectionHeader\"\r\n                title = \"Completed\"/>\r\n            <div\r\n                aria-label=\"This is the Completed Section Text\"\r\n                class=\"bar-title\"\r\n                id=\"completedsideBar1\"\r\n                // class=\"bar-title\"\r\n                type='text'\r\n                alt='task text'\r\n                // alt='Section text'\r\n                value=\"Completed\">Completed</div>\r\n        </div>\r\n    )\r\n}\r\n","import { connect} from \"react-redux\";\r\nimport TaskDataController from \"../../modules/dataController/TaskDataController\";\r\nimport \"../../css/sidebar.css\"\r\nimport SideBarElement from \"./sideBarElement\";\r\nimport SideBarCompletedSection from \"./sideBarCompletedSection\";\r\n\r\n\r\n// Creates the sidebar on the left side of the viewport in desktop/portrait view.\r\n// contains a list of sidebar elements from sideBarElement.\r\n\r\nfunction Sidebar(props) {\r\n    if (props.sections) {\r\n        return (\r\n            <div class=\"SideBarcontainer\">\r\n                {\r\n                    props.sections.map(section => {\r\n                        return <SideBarElement\r\n                            {...section}\r\n                            key={section.identifier}\r\n                        />\r\n                    })\r\n                }\r\n                <SideBarCompletedSection/>\r\n            </div>\r\n        )\r\n    }\r\n    else{\r\n        return null\r\n    }\r\n}\r\n\r\nexport default Sidebar","import TaskDataController from \"../../modules/dataController/TaskDataController\"\r\nimport \"../../css/sideList.css\"\r\nimport store from \"../../modules/dataController/store\";\r\nimport TaskPriorityButton from \"../newSection/taskPriorityButton\";\r\nimport SelectionMaintainingInput from \"../../modules/dataController/SelectionMaintainingInput\";\r\n\r\n/*\r\nprops: {\r\n    text:string;\r\n    isCompleted:boolean\r\n    id:string\r\n}\r\n*/\r\n\r\n// this is the sidelistelementtask, which creates the tasks inside the sidelist.\r\n\r\nexport default function SideListElementTask(props) {\r\n    const cssID = props.isCompleted ? 'completedTask' : ''\r\n\r\n\r\n    //I felt that, as messy as this code is, I needed to account for any variables when running a screenReader.\r\n    // For instance, if a task was empty, was there another way to identify it? Shouldn't the section name also\r\n    // be returned when using a screen reader?\r\n    // While very ugly, this means that almost all possible cases have been accounted for.\r\n\r\n    function getAriaCheckbox(){\r\n        // returns what should be said in the screenReader when the checkbox is focused.\r\n\r\n        const currentSectionText = props.text\r\n        if (currentSectionText){\r\n            if (props.text){\r\n                if (props.isCompleted){\r\n                    return \"This is the checked checkbox for the task \" + props.text + \" in\" + currentSectionText\r\n                }\r\n                else{\r\n                    return \"This is the unchecked checkbox for the task \" + props.text + \" in\" + currentSectionText\r\n                }\r\n            }\r\n            else{\r\n                if (props.isCompleted){\r\n                    return \"This is the checked checkbox for an empty task in\" + currentSectionText\r\n                }\r\n                else{\r\n                    return \"This is the unchecked checkbox for an empty task in\" + currentSectionText\r\n                }\r\n            }\r\n        }\r\n        else{\r\n            if (props.text){\r\n                if (props.isCompleted){\r\n                    return \"This is the checked checkbox for the task \" + props.text + \" in an empty section.\"\r\n                }\r\n                else{\r\n                    return \"This is the unchecked checkbox for the task \" + props.text + \" in an empty section.\"\r\n                }\r\n            }\r\n            else{\r\n                if (props.isCompleted){\r\n                    return \"This is the checked checkbox for an empty task in in an empty section.\"\r\n                }\r\n                else{\r\n                    return \"This is the unchecked checkbox for an empty task in an empty section.\"\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    function getAriaTask(){\r\n        // returns what should be said in the screenReader when the task input text is focused.\r\n\r\n        const currentSectionText = props.text\r\n        if (currentSectionText){\r\n            if (props.text){\r\n                if (props.isCompleted){\r\n                    return \"edit the completed task \" + props.text + \" in\" + currentSectionText + \".\"\r\n                }\r\n                else{\r\n                    return \"edit the uncompleted task \" + props.text + \" in\" + currentSectionText + \".\"\r\n                }\r\n            }\r\n            else{\r\n                if (props.isCompleted){\r\n                    return \"edit the completed empty task in\" + currentSectionText + \".\"\r\n                }\r\n                else{\r\n                    return \"edit the uncompleted empty task  in\" + currentSectionText + \".\"\r\n                }\r\n            }\r\n        }\r\n        else{\r\n            if (props.text){\r\n                if (props.isCompleted){\r\n                    return \"edit the completed task \" + props.text + \" in an empty section.\"\r\n                }\r\n                else{\r\n                    return \"edit the uncompleted task \" + props.text + \" in an empty section.\"\r\n                }\r\n            }\r\n            else{\r\n                if (props.isCompleted){\r\n                    return \"edit a completed empty task in in an empty section.\"\r\n                }\r\n                else{\r\n                    return \"edit a uncompleted empty task in an empty section.\"\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div class=\"SideListElementTask\" id = {cssID+\"markedCompleted\"}>\r\n            <input\r\n                aria-label= {getAriaCheckbox()}\r\n                alt='task completion status'\r\n                class='sideListCheckbox'\r\n                type=\"checkbox\"\r\n                value={ props.isCompleted}\r\n                onChange= {(e) => handleCheckBoxEvent(props.id, props.sectionIdentifier)}\r\n                checked= {props.isCompleted}\r\n            />\r\n            <TaskPriorityButton\r\n                sectionTitle = {props.text}\r\n                sectionIdentifier = {props.sectionIdentifier}\r\n                identifier = {props.id}\r\n                id = {props.id}\r\n                value = {props.priority}/>\r\n            <SelectionMaintainingInput\r\n                aria-label={getAriaTask()}\r\n                class='SideListElementTaskText'\r\n                type='text'\r\n                alt='task text'\r\n                id ={cssID}\r\n                onChange= { (e) => handleTextEvent(props.id, props.sectionIdentifier,e)}\r\n                value={props.text}\r\n            />\r\n        </div>\r\n    )\r\n\r\n}\r\n\r\nfunction handleTextEvent(id, identifier, event) {\r\n    const text = event.currentTarget.value\r\n    TaskDataController.updateTaskText(id, identifier, text)\r\n}\r\n\r\nfunction handleCheckBoxEvent(id, identifier, isToggled) {\r\n    TaskDataController.toggleTaskCompletion(id, identifier, isToggled)\r\n}","import TaskDataController from \"../../modules/dataController/TaskDataController\";\r\nimport \"../../css/sideList.css\"\r\nimport SideListElementTask from \"./sideListElementTask\";\r\nimport {collectionName, database} from \"../../modules/dataController/firestore\";\r\nimport {useCollection} from \"react-firebase-hooks/firestore\";\r\nimport store from \"../../modules/dataController/store\";\r\n\r\n\r\n\r\n// creates the element inside of sidelist, these will contain a section title, a task's checkbox, and a sidelistelement\r\n// task, which is basically a task but in desktop view.\r\n\r\n\r\n\r\n// HERES THE NIGHTMARISH SORTING AND GETTING TASKS AND PUSHING TASKS AND COMPLETED TASKS TO THE STATE AGAIN!\r\n// YAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAY YOU LOVE TO SEE DUPLICATED CODE, EXACTLY 66 LINES !\r\n\r\n// Creates the element inside sidelist that contains a section and it's tasks.\r\nexport default function SideListElement(props) {\r\n\r\n    const taskRef = database.collection(collectionName).doc(props.identifier).collection('tasks')\r\n    const [value, loading, error] = useCollection(taskRef);\r\n\r\n    console.log(props)\r\n    console.log(value)\r\n    console.log(loading)\r\n    console.log(error)\r\n\r\n    let fireStoreList = null;\r\n    let fireStoreCompletedList = null;\r\n    let stateCompletedList = null;\r\n\r\n    if (value) {\r\n        fireStoreList = value.docs.map((doc) => {\r\n            return {...doc.data()}\r\n        });\r\n\r\n        const allTasks = store.getState().taskStack.map(x => x).filter(task => task.sectionIdentifier !== props.identifier).concat(fireStoreList)\r\n        TaskDataController.setTasksToStack(allTasks)\r\n\r\n        const fireStoreCompletedList = fireStoreList.map(x => x).filter(task => task.isCompleted === true)\r\n        stateCompletedList = store.getState().completedTasks.map(x => x).filter(task => task.sectionIdentifier !== props.identifier).concat(fireStoreCompletedList)\r\n        TaskDataController.pushCompletedTask(stateCompletedList)\r\n\r\n        if(props.sortType < 7){\r\n            if(props.sortType === 1){\r\n                fireStoreList.sort(function(task1, task2) {\r\n                    let task1Text = task1.text.toUpperCase();\r\n                    let task2Text = task2.text.toUpperCase();\r\n                    return (task1Text < task2Text) ? -1 : (task1Text > task2Text) ? 1 : 0;\r\n                });\r\n            }\r\n            else if(props.sortType === 2){\r\n                fireStoreList.sort(function(task1, task2) {\r\n                    let task1Text = task1.text.toUpperCase();\r\n                    let task2Text = task2.text.toUpperCase();\r\n                    return (task1Text > task2Text) ? -1 : (task1Text > task2Text) ? 1 : 0;\r\n                });\r\n            }\r\n            else if(props.sortType === 3) {\r\n                fireStoreList.sort(function(task1, task2) {\r\n                    let task1date = task1.timeMade;\r\n                    let task2date = task2.timeMade;\r\n                    return (task1date < task2date) ? -1 : (task1date > task2date) ? 1 : 0;\r\n                });\r\n            }\r\n            else if(props.sortType === 4){\r\n                fireStoreList.sort(function(task1, task2) {\r\n                    let task1date = task1.timeMade;\r\n                    let task2date = task2.timeMade;\r\n                    return (task1date > task2date) ? -1 : (task1date > task2date) ? 1 : 0;\r\n                });\r\n            }\r\n            else if(props.sortType === 5){\r\n                fireStoreList.sort(function(task1, task2) {\r\n                    let task1priority = task1.priority;\r\n                    let task2priority = task2.priority;\r\n                    return (task1priority > task2priority) ? -1 : (task1priority > task2priority) ? 1 : 0;\r\n                });\r\n            }\r\n            else if(props.sortType === 6){\r\n                fireStoreList.sort(function(task1, task2) {\r\n                    let task1priority = task1.priority;\r\n                    let task2priority = task2.priority;\r\n                    return (task1priority < task2priority) ? -1 : (task1priority > task2priority) ? 1 : 0;\r\n                });\r\n            }\r\n        }\r\n\r\n\r\n\r\n    }\r\n\r\n\r\n\r\n    return(\r\n        <div>\r\n            {fireStoreList &&\r\n        <div\r\n            class=\"SideListElement\"\r\n            aria-label={props.title ? \"this is the section for \" + props.title : \"this is a section without a title.\"}\r\n            id = {props.identifier+\"list\"}>\r\n            <input\r\n                aria-label={props.title ? \"Edit the title for section \" + props.title : \"edit the title for a section without a title.\"}\r\n                className=\"sideListTitle\"\r\n                // class=\"bar-title\"\r\n                type='text'\r\n                alt='task text'\r\n                // alt='Section text'\r\n                onChange={(e) => handleTextEvent(props.identifier, e)}\r\n                value={props.title}\r\n            />\r\n            <div class='sideListTask'>{\r\n                fireStoreList.map(task => {\r\n                    return <SideListElementTask\r\n                        {...task}\r\n                        key={task.id}\r\n                    />\r\n                })\r\n            }\r\n\r\n            </div>\r\n        </div>}\r\n        </div>\r\n    )\r\n}\r\n\r\nfunction handleTextEvent(id,event) {\r\n    const text = event.currentTarget.value\r\n    TaskDataController.updateSectionText(id,text)\r\n}\r\n","import TaskDataController from \"../../modules/dataController/TaskDataController\"\r\nimport \"../../css/sideList.css\"\r\n\r\n/*\r\nprops: {\r\n    text:string;\r\n    isCompleted:boolean\r\n    id:string\r\n}\r\n*/\r\n\r\n// these are the completed tasks in the side list completed section.\r\n// These also need to be read by screen readers, so there's a massive\r\n// list of stuff to read.\r\n// I debated whether or not to put priority sort inside the completed tasks\r\n// list, but I decided against it out of worrying about messing up\r\n// sorting in other sections.\r\n\r\nexport default function SideListCompletedSectionTask(props) {\r\n\r\n\r\n\r\n    //I felt that, as messy as this code is, I needed to account for any variables when running a screenReader.\r\n    // For instance, if a task was empty, was there another way to identify it? Shouldn't the section name also\r\n    // be returned when using a screen reader?\r\n    // While very ugly, this means that almost all possible cases have been accounted for.\r\n\r\n    function getAriaCheckbox(){\r\n        // returns what should be said in the screenReader when the checkbox is focused.\r\n\r\n        const currentSectionText = props.text\r\n        if (currentSectionText){\r\n            if (props.text){\r\n                if (props.isCompleted){\r\n                    return \"This is the checked checkbox for the task \" + props.text + \" in\" + currentSectionText\r\n                }\r\n                else{\r\n                    return \"This is the unchecked checkbox for the task \" + props.text + \" in\" + currentSectionText\r\n                }\r\n            }\r\n            else{\r\n                if (props.isCompleted){\r\n                    return \"This is the checked checkbox for an empty task in\" + currentSectionText\r\n                }\r\n                else{\r\n                    return \"This is the unchecked checkbox for an empty task in\" + currentSectionText\r\n                }\r\n            }\r\n        }\r\n        else{\r\n            if (props.text){\r\n                if (props.isCompleted){\r\n                    return \"This is the checked checkbox for the task \" + props.text + \" in an empty section.\"\r\n                }\r\n                else{\r\n                    return \"This is the unchecked checkbox for the task \" + props.text + \" in an empty section.\"\r\n                }\r\n            }\r\n            else{\r\n                if (props.isCompleted){\r\n                    return \"This is the checked checkbox for an empty task in in an empty section.\"\r\n                }\r\n                else{\r\n                    return \"This is the unchecked checkbox for an empty task in an empty section.\"\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    function getAriaTask(){\r\n        // returns what should be said in the screenReader when the task input text is focused.\r\n\r\n        const currentSectionText = props.text\r\n        if (currentSectionText){\r\n            if (props.text){\r\n                if (props.isCompleted){\r\n                    return \"edit the completed task \" + props.text + \" in\" + currentSectionText + \".\"\r\n                }\r\n                else{\r\n                    return \"edit the uncompleted task \" + props.text + \" in\" + currentSectionText + \".\"\r\n                }\r\n            }\r\n            else{\r\n                if (props.isCompleted){\r\n                    return \"edit the completed empty task in\" + currentSectionText + \".\"\r\n                }\r\n                else{\r\n                    return \"edit the uncompleted empty task  in\" + currentSectionText + \".\"\r\n                }\r\n            }\r\n        }\r\n        else{\r\n            if (props.text){\r\n                if (props.isCompleted){\r\n                    return \"edit the completed task \" + props.text + \" in an empty section.\"\r\n                }\r\n                else{\r\n                    return \"edit the uncompleted task \" + props.text + \" in an empty section.\"\r\n                }\r\n            }\r\n            else{\r\n                if (props.isCompleted){\r\n                    return \"edit a completed empty task in in an empty section.\"\r\n                }\r\n                else{\r\n                    return \"edit a uncompleted empty task in an empty section.\"\r\n                }\r\n            }\r\n        }\r\n    }\r\n    return (\r\n        <div class=\"SideListElementTask\">\r\n            <input\r\n                aria-label= {getAriaCheckbox()}\r\n                alt='task completion status'\r\n                class='sideListCheckbox'\r\n                type=\"checkbox\"\r\n                value={ props.isCompleted}\r\n                onChange= {(e) => handleCheckBoxEvent(props.id, props.sectionIdentifier, props.isCompleted)}\r\n                checked= {props.isCompleted}\r\n            />\r\n            <input\r\n                aria-label={getAriaTask()}\r\n                class='SideListElementTaskText'\r\n                type='text'\r\n                alt='task text'\r\n                id = 'completedSectionTaskText'\r\n                onChange= { (e) => handleTextEvent(props.id, props.sectionIdentifier,e)}\r\n                value={props.text}\r\n            />\r\n        </div>\r\n    )\r\n\r\n}\r\n\r\nfunction handleTextEvent(id, identifier, event) {\r\n    const text = event.currentTarget.value\r\n    TaskDataController.updateTaskText(id, identifier, text)\r\n}\r\n\r\nfunction handleCheckBoxEvent(id, identifier, isToggled) {\r\n    TaskDataController.toggleTaskCompletion(id, identifier, isToggled)\r\n}","import \"../../css/sideList.css\"\r\nimport store from \"../../modules/dataController/store\";\r\nimport {connect} from \"react-redux\";\r\nimport SideListCompletedSectionTask from \"./sideListCompletedSectionTask\";\r\n\r\n\r\n\r\n// creates the completed section and it's tasks in the right side list.\r\n\r\nfunction SideListCompletedSection(props) {\r\n\r\n        return (\r\n            <div\r\n                class=\"SideListElement\"\r\n                aria-label=\"This is a Completed Section Header\"\r\n                id = \"completedSectionHeaderlist\">\r\n                <div\r\n                    aria-label=\"This is the completed Section Header\"\r\n                    className=\"sideListTitle\"\r\n                    // class=\"bar-title\"\r\n                    type='text'\r\n                    alt='task text'\r\n                    // alt='Section text'\r\n                    value=\"Completed\"\r\n                >Completed</div>\r\n                <div>{\r\n                props.completedTasks.map(task => {\r\n                    return <SideListCompletedSectionTask\r\n                        {...task}\r\n                        key={task.id}\r\n                    />\r\n                })}\r\n                </div>\r\n            </div>\r\n        )\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nfunction mapStateToProps(state){\r\n    return{\r\n        completedTasks: store.getState().completedTasks}\r\n}\r\n\r\nexport default connect(mapStateToProps)(SideListCompletedSection)\r\n","import { connect } from \"react-redux\"\r\nimport TaskDataController from \"../../modules/dataController/TaskDataController\"\r\nimport SideListElement from \"./sideListElement\";\r\nimport React, { useEffect, useState } from 'react';\r\nimport SideListCompletedSection from \"./sideListCompletedSection\";\r\n\r\n\r\n\r\n// Creates the scrollable list on the right side of the viewport made up of sideListElements\r\n// includes the completed special section as well\r\nfunction SideList(props) {\r\n    console.log(\"These are the elements for sidelist\")\r\n    console.log(props)\r\n    if (props.sections) {\r\n        return (\r\n            <div class='SideListContainer' id=\"theSideListContainer\">\r\n                {\r\n                    props.sections.map(section => {\r\n                        return <SideListElement\r\n                            {...section}\r\n                            key={section.identifier}\r\n                        />\r\n                    })\r\n                }\r\n                <SideListCompletedSection/>\r\n            </div>\r\n        )\r\n    }\r\n    else{\r\n        return null\r\n    }\r\n}\r\n\r\n\r\nexport default SideList","import \"../css/banner.css\"\r\n\r\n\r\n\r\n// This is the pink background for the sidebar.\r\nexport default function SideBarBackground(props) {\r\n\r\n    return (\r\n        <div class=\"SideBarBackground\">\r\n        </div>\r\n    )\r\n}","\r\n\r\n\r\n/*\r\n\r\n\r\nprops: {\r\n    text: string;\r\n    command: Function\r\n    parameters: string\r\n    icon: FontAwesomeIcon\r\n}\r\n*/\r\n\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\n\r\nexport default function PriorityMenuItem(props) {\r\n    // creates a button in the action menu with a command from props.\r\n    return (\r\n        <button onClick={() => props.command(props)} class=\"action-item\"\r\n                aria-label={\"This is the\" + props.text + \"button in the action menu, Press to perform the action.\" }>\r\n            { props.icon && <FontAwesomeIcon className = \"priorityIcon\" icon= {props.icon}/> }\r\n            <div class=\"action-text\">\r\n                <p> {props.text} </p>\r\n            </div>\r\n        </button>\r\n    )\r\n}\r\n\r\n","import \"../../css/prioritySortButton.css\"\r\nimport TaskDataController from \"../../modules/dataController/TaskDataController.js\"\r\nimport { faMinus, faSortAmountUpAlt, faSortAmountDownAlt } from \"@fortawesome/free-solid-svg-icons\"\r\nimport AppDataController from \"../../modules/dataController/AppDataController.js\"\r\nimport store from \"../../modules/dataController/store\";\r\nimport {connect} from \"react-redux\";\r\nimport PriorityMenuItem from \"./priorityMenuItem\";\r\n\r\n// This file is a bit of a doozy.\r\n// Sort type function gets the current sort type from the state.\r\n// the state gets this from the current selected section\r\n// This is used to show how the section is being sorted.\r\n\r\nfunction sortType(){\r\n    return(store.getState().selectedSection.sortType)\r\n}\r\n\r\n// Alphasort, and datesort and the rest, are all used to sort\r\n// by specific parameters. Because the options to sort\r\n// ascending/descending are there but only if already sorted\r\n// by that type, we then check if that's the option being chosen.\r\n\r\nfunction alphaSort() {\r\n    let sortValue = store.getState().selectedSection.sortType\r\n    if(sortValue === 1){\r\n        TaskDataController.setSectionPriority(2)\r\n    }\r\n    else{\r\n        TaskDataController.setSectionPriority(1)\r\n    }\r\n}\r\n\r\nfunction dateSort() {\r\n    let sortValue = store.getState().selectedSection.sortType\r\n    if(sortValue === 3){\r\n        TaskDataController.setSectionPriority(4)\r\n    }\r\n    else{\r\n        TaskDataController.setSectionPriority(3)\r\n    }\r\n}\r\n\r\nfunction prioritySort() {\r\n    let sortValue = store.getState().selectedSection.sortType\r\n    if(sortValue === 5){\r\n        TaskDataController.setSectionPriority(6)\r\n    }\r\n    else{\r\n        TaskDataController.setSectionPriority(5)\r\n    }\r\n}\r\n\r\n\r\n// Resets sorting, in case you do not want any sorting.\r\nfunction resetSort() {\r\n    console.log(sortType())\r\n    TaskDataController.setSectionPriority(7)\r\n}\r\n\r\n\r\n\r\n\r\n\r\n// Creates the priority sort menu, includes a list of options to choose from\r\n// includes a title as well to show what sorting is being used.\r\n\r\nfunction PriorityMenu(props, selectedSection) {\r\n\r\n    let menuItems = [\r\n        // Text, commands, and icons present in the action menu.\r\n        {text: \"Sort alphabetically\", command:alphaSort, icon: sortType() == 1 ? faSortAmountDownAlt: faSortAmountUpAlt},\r\n        {text: \"Sort by priority level\", command:prioritySort, icon: sortType() == 5 ? faSortAmountDownAlt: faSortAmountUpAlt},\r\n        {text: \"Sort by date created\", command: dateSort, icon: sortType() == 3 ? faSortAmountDownAlt: faSortAmountUpAlt},\r\n        {text: \"Reset Sort\", command: resetSort, icon: faMinus}\r\n    ]\r\n\r\n\r\n    function sortTitle(){\r\n        const currentSortType = store.getState().selectedSection.sortType\r\n        if (currentSortType === 7){\r\n            return \"not sorting\"\r\n        }\r\n        if (currentSortType === 6){\r\n            return \"Sorting by priority level descending\"\r\n        }\r\n        if (currentSortType === 5){\r\n            return \"Sorting by priority level ascending\"\r\n        }\r\n        if (currentSortType === 4){\r\n            return \"Sorting by date created ascending\"\r\n        }\r\n        if (currentSortType === 3){\r\n            return \"Sorting by date created descending\"\r\n        }\r\n        if (currentSortType === 2){\r\n            return \"Sorting in alphabetical order descending\"\r\n        }\r\n        if (currentSortType === 1){\r\n            return \"Sorting in alphabetical order ascending\"\r\n        }\r\n    }\r\n\r\n\r\n    // returns a component that contains the commands listed above.\r\n    return (\r\n        <button class='overlay'onClick= {AppDataController.hidePriorityMenu}\r\n                aria-label=\"Click here to exit the action menu.\">\r\n            <div class='priority-container'>\r\n                <div class ='priority-container-title'>{sortTitle()}</div>\r\n                { menuItems.map(menuItem => {\r\n                    return <PriorityMenuItem {...menuItem} key={menuItem.text}/>\r\n                })}\r\n            </div>\r\n        </button>\r\n\r\n    )\r\n}\r\n\r\nfunction mapStateToProps(state){\r\n    return{\r\n        selectedSection: store.getState().selectedSection,\r\n}}\r\n\r\nexport default connect(mapStateToProps)(PriorityMenu)","import \"../../css/prioritySortButton.css\"\r\nimport \"../../css/shareGui.css\"\r\nimport TaskDataController from \"../../modules/dataController/TaskDataController.js\"\r\nimport { faMinus, faSortAmountUpAlt, faSortAmountDownAlt } from \"@fortawesome/free-solid-svg-icons\"\r\nimport AppDataController from \"../../modules/dataController/AppDataController.js\"\r\nimport store from \"../../modules/dataController/store\";\r\nimport {connect} from \"react-redux\";\r\nimport PriorityMenuItem from \"./priorityMenuItem\";\r\n\r\n\r\n// Creates the priority sort menu, includes a list of options to choose from\r\n// includes a title as well to show what sorting is being used.\r\n\r\nfunction ShareMenu(props, selectedSection) {\r\n\r\n\r\n    return (\r\n\r\n    <div>\r\n        <div className=\"shareTitle\">Share a section with a user</div>\r\n        <div className=\"shareMenuContainer\"></div>\r\n        <div className=\"sharedMenuOverlay\"\r\n             onClick={() => AppDataController.toggleShareMenu()}></div>\r\n        <input type=\"email\" placeholder=\"Recipient's email\" className=\"ShareInput\" id=\"EmailValue3\"/>\r\n        <button className=\"ShareButton\"\r\n                onClick={() => handleOnClick((document.getElementById('EmailValue3').value))}\r\n        >Share!</button>\r\n    </div>)\r\n\r\n}\r\n\r\nfunction handleOnClick(email) {\r\n    console.log(email)\r\n    console.log(\"The email it's being shared with\")\r\n    TaskDataController.shareTask(email)\r\n}\r\n\r\n\r\nexport default ShareMenu","import \"./css/global.css\"\r\nimport \"./css/splashScreen.css\"\r\nimport \"typeface-roboto\"\r\nimport ActionButton from \"./components/Action Commands/ActionButton\";\r\nimport AppDataController from \"./modules/dataController/AppDataController\";\r\nimport Header from './components/Header';\r\n\r\nimport ActionMenu from \"./components/Action Commands/ActionMenu\";\r\nimport { connect } from \"react-redux\";\r\nimport SectionList from \"./components/newSection/SectionList\";\r\n\r\n\r\nimport Sidebar from \"./components/otherDisplays/sideBarList\";\r\nimport SideList from \"./components/otherDisplays/sideList\";\r\n\r\nimport SideBarBackground from \"./components/SideBarBackground\";\r\n\r\n\r\nimport {useCollection} from \"react-firebase-hooks/firestore\";\r\nimport {database} from \"./modules/dataController/firestore\"\r\nimport {collectionName} from \"./modules/dataController/firestore\";\r\nimport PriorityMenu from \"./components/newSection/priorityMenu\";\r\nimport firebase from \"firebase/compat\";\r\n\r\nimport {\r\n    useAuthState,\r\n    useCreateUserWithEmailAndPassword,\r\n    useSignInWithEmailAndPassword\r\n} from 'react-firebase-hooks/auth';\r\nimport store from \"./modules/dataController/store\";\r\nimport SignUpMenu from \"./modules/dataController/signUpMenu\";\r\nimport ShareMenu from \"./components/newSection/shareMenu\";\r\n\r\nconst auth = firebase.auth();\r\nconst googleProvider = new firebase.auth.GoogleAuthProvider();\r\n\r\nfunction verifyEmail() {\r\n    auth.currentUser.sendEmailVerification();\r\n}\r\n\r\n\r\nfunction App(props) {\r\n    const [user, loading, error] = useAuthState(auth);\r\n\r\n\r\n    \r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n    function SignUpMenu(){\r\n        return(\r\n            <div>\r\n            <div className=\"SignUpTitle\">Let's Get Started!</div>\r\n        <div className=\"SplashScreenBlurredBackground\"\r\n                  onClick={() => AppDataController.toggleSignUpMenu()}></div>\r\n                <div className=\"SignUpTitleDescription\">\r\n                    We'll send you an email to confirm your account\r\n                </div>\r\n                <input type=\"email\" placeholder=\"Your email\" className=\"EmailInput\" id=\"EmailValue\"/>\r\n                <div className=\"SignUpPasswordDescription\">\r\n                                              Remember to choose a secure password\r\n                                          </div>\r\n                <input type=\"password\" placeholder=\"Your password\" className=\"EmailInput\" id=\"PasswordValue\"/>\r\n                <SignUp></SignUp>\r\n            </div>)\r\n\r\n    }\r\n\r\n    function SignInMenu(){\r\n        return(\r\n            <div>\r\n                <div className=\"SignUpTitle\">Welcome Back!</div>\r\n                <div className=\"SplashScreenBlurredBackground\"\r\n                     onClick={() => AppDataController.toggleSignInMenu()}></div>\r\n                <input type=\"email\" placeholder=\"Your email\" className=\"EmailInput\" id=\"EmailValue\"/>\r\n                <input type=\"password\" placeholder=\"Your password\" className=\"EmailInput\" id=\"PasswordValue\"/>\r\n                <SignIn></SignIn>\r\n            </div>)\r\n\r\n    }\r\n\r\n\r\n\r\n\r\n    if (loading) {\r\n        return <p>Checking...</p>;\r\n\r\n    } else if (user) {\r\n        return <div>\r\n            {/*{user.displayName || user.email}*/}\r\n            <AppSignedIn {...props} user={user}/>\r\n            <button type=\"button\" onClick={() => auth.signOut()}>Logout</button>\r\n            {!user.emailVerified && <button type=\"button\" onClick={verifyEmail}>Verify email</button>}\r\n        </div>\r\n    }\r\n\r\n    // else if (props.signUpMenuStatus){\r\n    //     return(<SignUp classname=\"SplashScreenSignUp\" key=\"Sign Up\"/>)\r\n    // }\r\n    //\r\n    // else if (props.signInMenuStatus){\r\n    //     return (<SignIn classname=\"SplashScreenSignIn\" key=\"Sign In\"/>)\r\n    // }\r\n\r\n\r\n\r\n    else {\r\n        let cssTransparencyID\r\n        if(props.signInMenuStatus || props.signUpMenuStatus){\r\n            cssTransparencyID = \"toggledTransparency\"\r\n        }\r\n        else{\r\n            cssTransparencyID = \"notToggledTransparency\"\r\n        }\r\n\r\n        return <div className=\"SplashScreen\">\r\n\r\n            <div className=\"SplashScreenBackground\">\r\n            {error && <p>Error App: {error.message}</p>}\r\n\r\n                {props.signUpMenuStatus && <SignUpMenu/>\r\n\r\n                }\r\n\r\n\r\n                {props.signInMenuStatus && <SignInMenu></SignInMenu>}\r\n\r\n\r\n\r\n            <div className=\"SplashScreenTitle\" id={cssTransparencyID}>Todoiz.IO</div>\r\n            <div className=\"SplashScreenDescription\" id={cssTransparencyID}>The British Indian Ocean Territory note taking app\r\n                meant for you and your devices</div>\r\n\r\n            <div className=\"SplashScreenButtons\" id={cssTransparencyID}>\r\n                <button className=\"SplashScreenGoogle\" onClick={() =>\r\n                    auth.signInWithPopup(googleProvider)}>Sign in with Google now!\r\n                </button>\r\n\r\n                <button className=\"SplashScreenEmailSignUp\" onClick={() =>\r\n                    AppDataController.toggleSignUpMenu()}>Sign up with email and password!\r\n                </button>\r\n\r\n                <button className=\"SplashScreenEmailSignIn\" onClick={() =>\r\n                    AppDataController.toggleSignInMenu()}>Already have an account? Sign in here with Email and Password\r\n                </button>\r\n            </div>\r\n        </div>\r\n        </div>\r\n    }\r\n}\r\n\r\n\r\nconst FAKE_EMAIL = 'foo@bar.com';\r\nconst FAKE_PASSWORD = 'xyzzyxx';\r\n\r\n\r\nfunction SignIn() {\r\n    const [\r\n        signInWithEmailAndPassword,\r\n        userCredential, loading, error\r\n    ] = useSignInWithEmailAndPassword(auth);\r\n\r\n    if (userCredential) {\r\n        // Shouldn't happen because App should see that\r\n        // we are signed in.\r\n        return <div>Unexpectedly signed in already</div>\r\n    } else if (loading) {\r\n        return <p className=\"ErrorMessage\">Logging in…</p>\r\n    }\r\n    return <div>\r\n        <button className=\"SignUpButton\" onClick={() =>\r\n            signInWithEmailAndPassword((document.getElementById('EmailValue').value), (document.getElementById('PasswordValue').value))}>Login!\r\n        </button>\r\n        {error && <p className=\"ErrorMessage\">\"Error logging in: \" {error.message}</p>}\r\n    </div>\r\n}\r\n\r\nfunction SignUp() {\r\n    const [\r\n        createUserWithEmailAndPassword,\r\n        userCredential, loading, error\r\n    ] = useCreateUserWithEmailAndPassword(auth);\r\n\r\n    if (userCredential) {\r\n        // Shouldn't happen because App should see that\r\n        // we are signed in.\r\n        return <div>Unexpectedly signed in already</div>\r\n    } else if (loading) {\r\n        return <p className=\"ErrorMessage\">Logging in…</p>\r\n    }\r\n    return <div>\r\n        <button className=\"SignUpButton\" onClick={() =>\r\n            createUserWithEmailAndPassword((document.getElementById('EmailValue').value), (document.getElementById('PasswordValue').value))\r\n        }>\r\n            Sign up!\r\n        </button>\r\n        {error && <p className=\"ErrorMessage\">\"Error signing up: \" {error.message}</p>}\r\n\r\n    </div>\r\n}\r\n\r\n{/*<SignIn classname=\"SplashScreenSignIn\" key=\"Sign In\"/>*/}\r\n{/*<SignUp classname=\"SplashScreenSignUp\" key=\"Sign Up\"/>*/}\r\n\r\n{/*<button alt=\"GoogleSignInButton\"*/}\r\n{/*    onClick={() => auth.signInWithPopup(googleProvider)}>Login with Google*/}\r\n{/*    text = \"Sign in with Google now!\"*/}\r\n{/*    />*/}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n//{menuIsActive, priorityMenuIsActive}\r\n\r\n\r\nfunction AppSignedIn(props) {\r\n    AppDataController.setUserId(props.user.uid)\r\n    console.log(\"HELLO EMAIL\")\r\n    console.log(props.user.email)\r\n    AppDataController.setUserEmail(props.user.email)\r\n    // gets different menu's status's from the redux state\r\n    // Undo is not used at all.\r\n\r\n    console.log(\"This is the userID\")\r\n    console.log(props.user.uid)\r\n    // Get the sections information from firestore\r\n    // const query = database.collection(collectionName).where('owner', \"==\", props.user.uid);\r\n    // const [value, loading, error] = useCollection(query);\r\n    // console.log(\"This is the value of value\")\r\n    // console.log(value)\r\n\r\n    const sharedQuery = database.collection(collectionName).where('sharedWith', \"array-contains\", props.user.email);\r\n    console.log(props.user.email)\r\n    const [valueShared, loadingShared, errorShared] = useCollection(sharedQuery);\r\n    console.log(\"This is the value of value shared\")\r\n    console.log(valueShared)\r\n        console.log(loadingShared)\r\n        console.log(errorShared)\r\n\r\n    let fireStoreList = null;\r\n    let sharedFireStoreList = null;\r\n    // if (value) {\r\n    //         fireStoreList = value.docs.map((doc) => {\r\n    //             return {...doc.data()}\r\n    //         });\r\n    //         console.log(\"This is the firestoreList\")\r\n    //         console.log(fireStoreList)\r\n    //     }\r\n    // console.log(value, loading, error)\r\n    // console.log(fireStoreList)\r\n\r\n    if (valueShared) {\r\n        console.log(\"This is the shared list\")\r\n        sharedFireStoreList = valueShared.docs.map((doc) => {\r\n            return {...doc.data()}\r\n        });\r\n        console.log(sharedFireStoreList)\r\n    }\r\n    console.log(sharedFireStoreList)\r\n\r\n    console.log(\"user id\")\r\n    console.log(props.user.uid)\r\n\r\n    return (\r\n        <div>\r\n            <div class='hello'>\r\n                <Header/>\r\n                <SideBarBackground/>\r\n                <div className=\"wideScreenDisplay\">\r\n                    <div className=\"Sidebar\"><Sidebar sections={sharedFireStoreList}/></div>\r\n                    <div className=\"Sidelist\"><SideList sections={sharedFireStoreList}/></div>\r\n\r\n                </div>\r\n                <SectionList sections={sharedFireStoreList}/>\r\n                {props.menuIsActive && <ActionMenu/>}\r\n                {props.priorityMenuIsActive && <PriorityMenu/>}\r\n                {props.shareMenuStatus && <ShareMenu/>}\r\n                <ActionButton/>\r\n            </div>\r\n        </div>);\r\n}\r\n\r\n// Getting those stuffs.\r\nfunction mapToState(state) {\r\n\r\n        return {\r\n            shareMenuStatus: store.getState().showShareMenu,\r\n            signInMenuStatus: store.getState().showSignInMenu,\r\n            signUpMenuStatus: store.getState().showSignUpMenu,\r\n            menuIsActive: AppDataController.menuIsActive(),\r\n            showUndo: AppDataController.undoIsActive(),\r\n            priorityMenuIsActive: AppDataController.priorityMenuIsActive(),\r\n\r\n        }\r\n}\r\n\r\nexport default connect(mapToState)(App)","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport { Provider } from \"react-redux\"\nimport store from \"./modules/dataController/store.js\"\n\nReactDOM.render(\n  <Provider store={store}>\n    <App/>\n  </Provider>,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}