{"version":3,"sources":["modules/dataController/actions.js","modules/dataController/firestore.js","modules/dataController/TaskDataController.js","modules/dataController/reducer.js","modules/dataController/store.js","modules/dataController/AppDataController.js","components/Action Commands/ActionButton.js","components/Header.js","components/Action Commands/ActionMenuItem.js","components/Action Commands/ActionMenu.js","components/newSection/taskPriorityButton.js","modules/dataController/SelectionMaintainingInput.js","components/Tasks/Task.js","components/newSection/completedSectionButton.js","components/newSection/completedSection.js","components/Tasks/TaskList.js","components/newSection/SectionButton.js","components/newSection/sectionAddTask.js","components/newSection/priorityButton.js","components/newSection/SectionBar.js","components/newSection/SectionContainer.js","components/newSection/completedSectionTask.js","components/newSection/completedSectionsTaskList.js","components/newSection/SectionList.js","components/otherDisplays/sideBarButton.js","components/otherDisplays/sideBarElement.js","components/otherDisplays/sideBarCompletedSection.js","components/otherDisplays/sideBarList.js","components/otherDisplays/sideListElementTask.js","components/otherDisplays/sideListElement.js","components/otherDisplays/sideListCompletedSectionTask.js","components/otherDisplays/sideListCompletedSection.js","components/otherDisplays/sideList.js","components/SideBarBackground.js","components/newSection/priorityMenuItem.js","components/newSection/priorityMenu.js","App.js","index.js"],"names":["CREATE_TASK","DELETE_TASK","UPDATE_TASK_TEXT","TOGGLE_TASK_COMPLETION","DELETE_ALL_COMPLETED_TASK","TOGGLE_TODO_LIST","TOGGLE_COMPLETED_LIST","SHOW_MENU","HIDE_MENU","UNDO_TASK","SHOW_UNDO","HIDE_UNDO","CREATE_SECTION","DELETE_SECTION","UPDATE_SECTION_TEXT","TOGGLE_SECTION","CLEAR_ALL","GET_TOGGLED","PUSH_COMPLETED_TASK","TOGGLE_COMPLETED_SECTION_BUTTON","SET_SECTION_TO_STACK","SET_TASKS_TO_STACK","UPDATE_TASK_PRIORITY","PUSH_SELECTED_SECTION_ACTION","SHOW_PRIORITY_MENU","HIDE_PRIORITY_MENU","SET_SECTION_PRIORITY","firebase","initializeApp","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","database","firestore","collectionName","TaskDataController","id","identifier","newText","action","text","type","payload","updateTaskTextAction","store","dispatch","isToggled","toggleTaskCompletionAction","sectionIdentifier","createTaskAction","deleteTaskAction","getState","tasks","filter","task","isCompleted","sections","section","deleteSectionAction","updateSectionTextAction","toggleSectionAction","getToggledStatusAction","Task","pushCompletedTaskAction","stackList","setSectionToStackAction","taskList","setTasksToStackAction","value","updateTaskPriorityAction","setSectionPriorityAction","initialState","sectionStack","taskStack","sectionsToggled","completedTasks","showUndo","showMenu","showPriorityMenu","showCompletedTasks","selectedSection","createTask","state","uuidv4","collection","doc","set","timeMade","Date","priority","deleteTask","updateTaskText","update","toggleTaskCompletion","deleteAllCompletedTasks","map","x","index","delete","undoTask","stack","newSections","pop","toggleCompletedList","showCompleted","toggleToDoList","showTodo","hideMenu","hideUndo","createSection","title","sortType","deleteSection","updateSectionText","toggleSection","newToggledSections","includes","taskIndex","indexOf","splice","push","clearAll","length","getToggledStatus","sectionWithId","find","pushCompletedTask","contents","toggleCompletedSection","newToggledStatus","setSectionToStack","setTasksToStack","updateTaskPriority","newValue","pushSelectedSection","hidePriorityMenu","setSectionPriority","createStore","AppDataController","pushSelectedSectionAction","handleOnClick","ActionButton","class","onClick","icon","faPlus","Header","props","ActionMenuItem","command","className","fireStoreList","menuItems","deleteAllCompleted","faMinus","clearAllSectionsAndTasks","ActionMenu","query","useCollection","docs","data","closeMenu","menuItem","key","TaskPriorityButton","priorityIcon","sectionText","sectionTitle","faSortDown","faSort","faSortUp","e","SelectionMaintainingInput","onChange","rest","useState","cursor","setCursor","ref","useRef","useEffect","input","current","setSelectionRange","target","selectionStart","cssID","currentSectionText","getAriaCheckbox","alt","checked","getAriaTask","event","currentTarget","handleTextEvent","onFocus","connect","faAngleDown","faAngleRight","ariaText","toggledState","CompletedSection","TaskList","SectionButton","SectionAddTaskButton","PrioritySortButton","faChartBar","SectionBar","classes","ownProps","isToggledList","taskRef","stateCompletedList","allTasks","concat","fireStoreCompletedList","sort","task1","task2","task1Text","toUpperCase","task2Text","task1date","task2date","task1priority","task2priority","CompletedSectionTask","CompletedSectionsTaskList","isCompletedTasksToggled","SideBarButton","document","getElementById","scrollIntoView","behavior","block","inline","SideBarElement","SideBarCompletedSection","Sidebar","SideListElementTask","SideListElement","SideListCompletedSectionTask","SideList","SideBarBackground","PriorityMenuItem","alphaSort","dateSort","prioritySort","resetSort","console","log","faSortAmountDownAlt","faSortAmountUpAlt","currentSortType","sortTitle","menuIsActive","undoIsActive","priorityMenuIsActive","ReactDOM","render"],"mappings":"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","file":"static/js/main.3c8eb8c1.chunk.js","sourcesContent":["export const CREATE_TASK = \"createTask\"\r\nexport const DELETE_TASK = \"deleteTask\"\r\nexport const UPDATE_TASK_TEXT = \"updateTaskText\"\r\nexport const TOGGLE_TASK_COMPLETION = \"toggleTaskCompletion\"\r\nexport const DELETE_ALL_COMPLETED_TASK = \"deleteAllCompletedTasks\"\r\nexport const TOGGLE_TODO_LIST = \"toggleTodoList\"\r\nexport const TOGGLE_COMPLETED_LIST = \"toggleCompletedList\"\r\nexport const SHOW_MENU = \"showMenu\"\r\nexport const HIDE_MENU = \"hideMenu\"\r\nexport const UNDO_TASK = \"undoTask\"\r\nexport const SHOW_UNDO = \"showUndo\"\r\nexport const HIDE_UNDO = \"hideUndo\"\r\n\r\n\r\nexport const CREATE_SECTION = \"createSection\"\r\nexport const DELETE_SECTION = \"deleteSection\"\r\nexport const UPDATE_SECTION_TEXT = \"updateSectionText\"\r\nexport const TOGGLE_SECTION = \"toggleSection\"\r\n\r\nexport const CLEAR_ALL = \"clearAllSectionsAndTasks\"\r\n\r\nexport const GET_TOGGLED = \"getToggledStatus\"\r\n\r\n\r\nexport const PUSH_COMPLETED_TASK = \"pushCompletedTask\"\r\n\r\nexport const TOGGLE_COMPLETED_SECTION_BUTTON = \"toggleCompletedSection\"\r\n\r\nexport const SET_SECTION_TO_STACK = \"setSectionToStack\"\r\n\r\nexport const SET_TASKS_TO_STACK = \"setTasksToStack\"\r\n\r\nexport const UPDATE_TASK_PRIORITY = \"updateTaskPriority\"\r\n\r\nexport const PUSH_SELECTED_SECTION_ACTION = \"pushSelectedSectionAction\"\r\n\r\nexport const SHOW_PRIORITY_MENU = \"showPriorityMenu\"\r\n\r\nexport const HIDE_PRIORITY_MENU = \"hidePriorityMenu\"\r\n\r\nexport const SET_SECTION_PRIORITY = \"setSectionPriority\"\r\n\r\nexport const showUndoAction = () => ({type:SHOW_UNDO})\r\nexport const hideUndoAction = () => ({type:HIDE_UNDO})\r\nexport const undoTaskAction = () => ({type:UNDO_TASK})\r\nexport const showMenuAction = () => ({type:SHOW_MENU})\r\nexport const hideMenuAction = () => ({type:HIDE_MENU})\r\nexport const createTaskAction = (sectionIdentifier) => ({type:CREATE_TASK, payload:{sectionIdentifier}})\r\nexport const deleteTaskAction = (id) => ({type:DELETE_TASK, payload:{id}})\r\nexport const updateTaskTextAction = (id, identifier, text) => ({type: UPDATE_TASK_TEXT,payload: {id, identifier, text}})\r\nexport const toggleTaskCompletionAction = (id, identifier, isToggled) => ({type: TOGGLE_TASK_COMPLETION,payload:{id, identifier, isToggled}})\r\nexport const deleteAllCompletedTasksAction = () => ({type: DELETE_ALL_COMPLETED_TASK})\r\nexport const toggleCompletedListAction = () => ({type:TOGGLE_COMPLETED_LIST})\r\nexport const toggleToDoListAction = () => ({type:TOGGLE_TODO_LIST})\r\n\r\n// functions for creating/deleting/editing section properties\r\n\r\nexport const createSectionAction = () => ({type: CREATE_SECTION})\r\nexport const deleteSectionAction = (sectionIdentifier) => ({type: DELETE_SECTION, payload: {sectionIdentifier}})\r\nexport const updateSectionTextAction = (sectionIdentifier,text) => ({type: UPDATE_SECTION_TEXT,payload: {sectionIdentifier, text}})\r\n\r\n// function for toggling a section by just taking in id\r\n\r\nexport const toggleSectionAction = (sectionIdentifier) => ({type: TOGGLE_SECTION, payload: {sectionIdentifier}})\r\n\r\n// function for clearing all sections and resetting all\r\n\r\nexport const clearAllSectionsAndTasksAction = () => ({type: CLEAR_ALL})\r\n\r\n// functions for showing tasks stored in firestore or getting section/task properties.\r\n\r\nexport const getToggledStatusAction = (sectionIdentifier) => ({type: GET_TOGGLED, payload: {sectionIdentifier}})\r\n\r\nexport const pushCompletedTaskAction = (Task) => ({type: PUSH_COMPLETED_TASK, payload:{Task}})\r\n\r\nexport const toggleCompletedSectionAction = () => ({type: TOGGLE_COMPLETED_SECTION_BUTTON})\r\n\r\n// functions for pushing tasks or sections to the state\r\n\r\nexport const setSectionToStackAction = (stackList) => ({type: SET_SECTION_TO_STACK, payload:{stackList}})\r\n\r\nexport const setTasksToStackAction = (taskList) => ({type: SET_TASKS_TO_STACK, payload:{taskList}})\r\n\r\n// functions for showing priority menu/hiding it/setting the priority/getting the current selected section\r\n\r\nexport const showPriorityMenuAction = () => ({type: SHOW_PRIORITY_MENU})\r\n\r\nexport const hidePriorityMenuAction = () => ({type: HIDE_PRIORITY_MENU})\r\n\r\nexport const pushSelectedSectionAction = (sectionIdentifier, sortType ) => ({type: PUSH_SELECTED_SECTION_ACTION, payload:{sectionIdentifier, sortType}})\r\n\r\nexport const updateTaskPriorityAction = (id, sectionIdentifier, value) => ({type: UPDATE_TASK_PRIORITY, payload:{id, sectionIdentifier, value}})\r\n\r\nexport const setSectionPriorityAction = (value) => ({type: SET_SECTION_PRIORITY, payload:{value}})","import firebase from \"firebase/compat\";\r\nimport {useCollection} from \"react-firebase-hooks/firestore\";\r\n\r\n// lab 3 work:\r\n\r\n// stuff for the firebase config\r\n\r\nconst firebaseConfig = {\r\n    apiKey: \"AIzaSyD8bEScFINGaDttxHPcnMbjIPmW64m-4SI\",\r\n    authDomain: \"rmitchellpitzer-hmc-tasks.firebaseapp.com\",\r\n    projectId: \"rmitchellpitzer-hmc-tasks\",\r\n    storageBucket: \"rmitchellpitzer-hmc-tasks.appspot.com\",\r\n    messagingSenderId: \"670939286123\",\r\n    appId: \"1:670939286123:web:3dd28bb7e5badcce873f2e\"\r\n};\r\n\r\nfirebase.initializeApp(firebaseConfig);\r\n\r\nexport const database = firebase.firestore();\r\nexport const collectionName = \"rmitchellPitzer-hmc-tasks-sectionList\";\r\n\r\n","import {\r\n    createTaskAction,\r\n    deleteAllCompletedTasksAction,\r\n    deleteTaskAction,\r\n    toggleTaskCompletionAction,\r\n    updateTaskTextAction,\r\n    createSectionAction,\r\n    deleteSectionAction,\r\n    updateSectionTextAction,\r\n    toggleSectionAction,\r\n    clearAllSectionsAndTasksAction,\r\n    getToggledStatusAction,\r\n    pushCompletedTaskAction,\r\n    setSectionToStackAction,\r\n    setTasksToStackAction,\r\n    updateTaskPriorityAction,\r\n    setSectionPriorityAction\r\n} from \"./actions\"\r\nimport store from \"./store.js\"\r\nclass TaskDataController {\r\n    static updateTaskText(id, identifier, newText) {\r\n            const action = updateTaskTextAction(id, identifier ,newText)\r\n            store.dispatch(action)\r\n    }\r\n\r\n    static toggleTaskCompletion(id, identifier, isToggled) {\r\n        const action = toggleTaskCompletionAction(id, identifier, isToggled)\r\n        store.dispatch(action)\r\n    }\r\n\r\n    static createTask(sectionIdentifier) {\r\n        const action = createTaskAction(sectionIdentifier)\r\n        store.dispatch(action)\r\n    }\r\n\r\n    static deleteTask(id) {\r\n        const action = deleteTaskAction(id)\r\n        store.dispatch(action)\r\n    }\r\n\r\n\r\n    static deleteAllCompleted() {\r\n        const action = deleteAllCompletedTasksAction()\r\n        store.dispatch(action)\r\n    }\r\n\r\n    static todo() {\r\n        return store.getState()\r\n        .tasks.filter(task => task.isCompleted === false)\r\n    }\r\n\r\n    static completed() {\r\n        return store.getState()\r\n        .tasks.filter(task => task.isCompleted === true)\r\n    }\r\n\r\n    // new function to return general tasks, not finished yet\r\n\r\n    static getTasks(identifier) {\r\n        return store.getState().sections.filter(section => section.identifier === identifier)\r\n    }\r\n\r\n    // new function to get sections\r\n\r\n    static getSections() {\r\n        return store.getState().sections\r\n    }\r\n\r\n\r\n    static createSection() {\r\n        const action = createSectionAction()\r\n        store.dispatch(action)\r\n    }\r\n\r\n    static deleteSection(sectionIdentifier) {\r\n        const action = deleteSectionAction(sectionIdentifier)\r\n        store.dispatch(action)\r\n    }\r\n\r\n    static updateSectionText(sectionIdentifier,text) {\r\n        const action = updateSectionTextAction(sectionIdentifier,text)\r\n        store.dispatch(action)\r\n    }\r\n\r\n    static toggleSection(sectionIdentifier) {\r\n        const action = toggleSectionAction(sectionIdentifier)\r\n        store.dispatch(action)\r\n    }\r\n\r\n    static clearAllSectionsAndTasks() {\r\n        const action = clearAllSectionsAndTasksAction()\r\n        store.dispatch(action)\r\n    }\r\n\r\n    static getToggledStatus(sectionIdentifier){\r\n        const action = getToggledStatusAction(sectionIdentifier)\r\n        store.dispatch(action)\r\n    }\r\n\r\n    static pushCompletedTask(Task) {\r\n\r\n        const action = pushCompletedTaskAction(Task)\r\n        store.dispatch(action)\r\n    }\r\n\r\n    static setSectionToStack(stackList){\r\n        const action = setSectionToStackAction(stackList)\r\n        store.dispatch(action)\r\n    }\r\n\r\n    static setTasksToStack(taskList){\r\n        const action = setTasksToStackAction(taskList)\r\n        store.dispatch(action)\r\n    }\r\n\r\n    static updateTaskPriority(id, sectionIdentifier, value){\r\n        const action = updateTaskPriorityAction(id, sectionIdentifier, value)\r\n        store.dispatch(action)\r\n    }\r\n\r\n    static setSectionPriority(value){\r\n        const action = setSectionPriorityAction(value)\r\n        store.dispatch(action)\r\n    }\r\n\r\n\r\n};\r\n\r\n\r\nexport default TaskDataController","/* eslint-disable no-lone-blocks */\r\nimport { v4 as uuidv4 } from 'uuid';\r\nimport {\r\n    CREATE_TASK,\r\n    DELETE_ALL_COMPLETED_TASK,\r\n    DELETE_TASK,\r\n    HIDE_MENU,\r\n    HIDE_UNDO,\r\n    SHOW_MENU,\r\n    SHOW_UNDO,\r\n    TOGGLE_COMPLETED_LIST,\r\n    TOGGLE_TASK_COMPLETION,\r\n    TOGGLE_TODO_LIST,\r\n    TOGGLE_UNDO,\r\n    UNDO_TASK,\r\n    UPDATE_TASK_TEXT,\r\n    CREATE_SECTION,\r\n    DELETE_SECTION,\r\n    UPDATE_SECTION_TEXT,\r\n    TOGGLE_SECTION,\r\n    CLEAR_ALL,\r\n    GET_TOGGLED,\r\n    PUSH_COMPLETED_TASK,\r\n    TOGGLE_COMPLETED_SECTION_BUTTON,\r\n    SET_SECTION_TO_STACK,\r\n    SET_TASKS_TO_STACK,\r\n    UPDATE_TASK_PRIORITY,\r\n    PUSH_SELECTED_SECTION_ACTION, SHOW_PRIORITY_MENU, HIDE_PRIORITY_MENU, SET_SECTION_PRIORITY\r\n} from './actions';\r\n\r\nimport {database} from \"./firestore\";\r\nimport {collectionName} from \"./firestore\";\r\nimport TaskDataController from \"./TaskDataController\";\r\n\r\n\r\n\r\n// Initial state,\r\n// sectionStack is used to keep track of sections\r\n// taskStack is used for deleting tasks instead of querying\r\n// sections toggled, keeps track of which sections in mobile view are\r\n// currently being shown\r\n// show undo, show menu, show... just show what their name is.\r\n// selectedSection: will contain a section's identifier and name when\r\n// the priority sort button is pressed, pushing it to the stack so it\r\n// can be read by other components and altered.\r\nconst initialState = {\r\n    sectionStack:[],\r\n    taskStack: [],\r\n    sectionsToggled: [],\r\n    completedTasks: [],\r\n    showUndo: false,\r\n    showMenu: false,\r\n    showPriorityMenu: false,\r\n    showCompletedTasks: false,\r\n    selectedSection: []\r\n}\r\n\r\n\r\n\r\n// creates a task using firestore\r\nfunction createTask(state, sectionIdentifier) {\r\n    const identifier = uuidv4()\r\n    const taskRef = database.collection(collectionName).doc(sectionIdentifier).collection('tasks').doc(identifier)\r\n\r\n    taskRef.set({\r\n        id: identifier,\r\n        sectionIdentifier: sectionIdentifier,\r\n        isCompleted: false,\r\n        text: \"\",\r\n        timeMade: new Date(),\r\n        priority: 2\r\n    })\r\n    return{\r\n        ...state\r\n    }\r\n}\r\n\r\n// Deletes a task with the given id, although I don't think this is used at all.\r\n// Don't want to delete it yet out of fear of messing up the reducer\r\nfunction deleteTask(state,id) {\r\n    const tasks = state.tasks.filter(task => task.id !== id)\r\n    return {\r\n        ...state,\r\n        tasks\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n// Updates a task's text given it's id, section identifier, and text to update it to.\r\n// uses firestore.\r\nfunction updateTaskText(state,{id, identifier,text}) {\r\n    const taskRef = database.collection(collectionName).doc(identifier).collection('tasks').doc(id)\r\n    taskRef.update({\r\n        text: text\r\n        }\r\n    )\r\n    return{\r\n        ...state\r\n    }\r\n}\r\n\r\n\r\n// Hey this is no longer 100 lines of code!\r\n// Just gets the task being marked completed, sets it to the opposite of what it's completed status is.\r\nfunction toggleTaskCompletion(state,{id, identifier, isToggled}) {\r\n    const taskRef = database.collection(collectionName).doc(identifier).collection('tasks').doc(id)\r\n    taskRef.update({\r\n        isCompleted: (!isToggled)\r\n    })\r\n    return{\r\n        ...state\r\n    }\r\n}\r\n\r\n// deletes all tasks that are marked completed.\r\n// updates firestore\r\n\r\nfunction deleteAllCompletedTasks(state) {\r\n    const completedTasks = state.completedTasks.map(x => x)\r\n    for (const index in completedTasks){\r\n        const taskToDelete = database.collection(collectionName).doc(completedTasks[index].sectionIdentifier).collection('tasks').doc(completedTasks[index].id);\r\n        taskToDelete.delete()\r\n\r\n    }\r\n        return {\r\n       ...state\r\n   }\r\n}\r\n\r\n// it do not exist.\r\n// We will no longer be afraid of commitment. What ever happened to\r\n// pressing an action button, and meaning it, knowing there was no\r\n// going back? Today, well tonight, well today it's 7 am I need to sleep,\r\n// Today, we conquer our fears of commitment that have held us back,\r\n// and proudly remove a requested feature from our app: The undo button.\r\n\r\nfunction undoTask(state) {\r\n    const stack = state.stack.map(x => x)\r\n    const newSections = stack.pop()\r\n    return {\r\n        ...state,\r\n        sections: newSections,\r\n        stack\r\n    }\r\n}\r\n\r\n\r\nfunction toggleCompletedList(state) {\r\n    return {\r\n        ...state,\r\n        showCompleted: !state.showCompleted\r\n    }\r\n}\r\n\r\nfunction toggleToDoList(state) {\r\n    return {\r\n        ...state,\r\n        showTodo: !state.showTodo \r\n    }\r\n}\r\n\r\nfunction showMenu(state) {\r\n    return {\r\n        ...state,\r\n        showMenu: true \r\n        }\r\n}\r\n\r\nfunction hideMenu(state) {\r\n    return {\r\n        ...state,\r\n        showMenu:false \r\n    }\r\n}\r\n\r\nfunction showUndo(state) {\r\n    return {\r\n        ...state,\r\n        showUndo: true\r\n    }\r\n}\r\n\r\nfunction hideUndo(state) {\r\n    return {\r\n        ...state,\r\n        showUndo: false \r\n    }\r\n}\r\n\r\n\r\n// function for creating a section, this will push a new empty section onto the state's sections.\r\n\r\nfunction createSection(state) {\r\n    // first part creates a new section in firestore.\r\n    const identifier = uuidv4()\r\n    const sectionRef = database.collection(collectionName).doc(identifier)\r\n    sectionRef.set({\r\n        identifier: identifier,\r\n        title: \"\",\r\n        sortType: 7\r\n    })\r\n\r\n\r\n    return{\r\n        ...state\r\n    }\r\n}\r\n\r\n\r\n\r\n// it's unneccessary code again.\r\n// pushing removing a lot of this to lab5 due to time constraints.\r\n// I would rather have a working app than an app that doesn't work, but has cleaner\r\n// code.\r\n\r\nfunction deleteSection(state, sectionIdentifier) {\r\n    const sections = state.sections.filter(sections => sections.identifier !== sectionIdentifier)\r\n    return {\r\n        ...state,\r\n        sections\r\n    }\r\n}\r\n\r\n\r\n// Similar to updating a task's text, updates a section's text with help from it's sectionIdentifier.\r\n\r\nfunction updateSectionText(state,{sectionIdentifier,text}){\r\n    const sectionToUpdate = database.collection(collectionName).doc(sectionIdentifier);\r\n    sectionToUpdate.update({\r\n        title: text\r\n\r\n    })\r\n    return{\r\n        ...state\r\n    }\r\n}\r\n\r\n// This will toggle whether the section's button is pressed or not, and will show the tasklist or hide it\r\n// depending on whether it's toggled or not.\r\n// Also pushes that identifier to the stack if it's toggled, or removes it from it if it isn't toggled.\r\n\r\nfunction toggleSection(state, sectionIdentifier) {\r\n\r\n\r\n    const newToggledSections = state.sectionsToggled.map(x => x)\r\n    if(newToggledSections.includes(sectionIdentifier)){\r\n        let taskIndex = newToggledSections.indexOf(sectionIdentifier)\r\n        newToggledSections.splice(taskIndex, 1)\r\n\r\n\r\n\r\n    }\r\n    else{\r\n        newToggledSections.push(sectionIdentifier)\r\n    }\r\n\r\n    return {\r\n        ...state,\r\n        sectionsToggled: newToggledSections\r\n    }\r\n}\r\n\r\n// Clears all tasks and sections except one, which it will reset the text and tasks of.\r\n// This is to avoid a weird thing where sections show up after a short delay.\r\n\r\nfunction clearAll(state){\r\n    const stackList = state.sectionStack\r\n    const taskList = state.taskStack\r\n    for (const index in taskList){\r\n        const taskToDelete = database.collection(collectionName).doc(taskList[index].sectionIdentifier).collection('tasks').doc(taskList[index].id)\r\n        taskToDelete.delete()\r\n    }\r\n    for (const index in stackList){\r\n        if(index == (stackList.length - 1)){\r\n\r\n            const sectionToModify = database.collection(collectionName).doc(stackList[index].identifier)\r\n            sectionToModify.update({\r\n\r\n                title: \"\",\r\n                sortType: 7}\r\n            )\r\n        }\r\n        else{\r\n            const sectionToDelete = database.collection(collectionName).doc(stackList[index].identifier)\r\n            sectionToDelete.delete()\r\n        }\r\n    }\r\n\r\n    return{\r\n        ...state,\r\n        sectionsToggled: []\r\n    }\r\n}\r\n\r\n\r\n// it do not matter.\r\n\r\nfunction getToggledStatus(state, sectionIdentifier){\r\n    const newSections = state.sections.map(x => x)\r\n    const sectionWithId = newSections.find(section => section.identifier === sectionIdentifier)\r\n    if (!sectionWithId){\r\n        return null\r\n    }\r\n    return sectionWithId.isToggled\r\n}\r\n\r\n// Pushes a task to the state, this command will only be used if the task is marked completed.\r\nfunction pushCompletedTask(state, contents){\r\n    return{\r\n        ...state,\r\n        completedTasks: contents.Task\r\n    }\r\n}\r\n\r\n// function to set the completed section's toggle status in mobile view.\r\nfunction toggleCompletedSection(state){\r\n    const newToggledStatus = (!state.showCompletedTasks)\r\n    return{\r\n        ...state,\r\n        showCompletedTasks: newToggledStatus\r\n    }\r\n}\r\n\r\n// function to update the stack with a list of sections.\r\nfunction setSectionToStack(state, stackList){\r\n    return{\r\n        ...state,\r\n        sectionStack: stackList\r\n    }\r\n}\r\n\r\n//refer to line 327, but replace sections with tasks.\r\nfunction setTasksToStack(state, taskList){\r\n    return{\r\n        ...state,\r\n        taskStack: taskList\r\n    }\r\n}\r\n\r\n// Updates the priority of a task.\r\n// First part is telling if the priority status is at it's limit, and then setting it to the lowest value.\r\n// Second part is updating the firestore db\r\nfunction updateTaskPriority(state, {id, sectionIdentifier, value}){\r\n    let newValue = 0\r\n    if(value > 2){\r\n        newValue = 1\r\n    }\r\n    else{\r\n        newValue = value + 1\r\n    }\r\n    const TaskRef = database.collection(collectionName).doc(sectionIdentifier).collection('tasks').doc(id)\r\n    TaskRef.update({\r\n        priority: newValue\r\n    })\r\n    return{\r\n        ...state\r\n    }\r\n}\r\n\r\n// pushing the section whose tasks are being sorted to the stack to keep track of.\r\nfunction pushSelectedSection(state, {sectionIdentifier, sortType}){\r\n    return{\r\n        ...state,\r\n        selectedSection: {sectionIdentifier, sortType}\r\n    }\r\n}\r\n\r\n// show priority menu, (state)\r\nfunction showPriorityMenu(state){\r\n    return {\r\n        ...state,\r\n        showPriorityMenu: true\r\n    }\r\n}\r\n\r\n// same thing, except this resets the selected section as none are being shown.\r\nfunction hidePriorityMenu(state){\r\n    return {\r\n        ...state,\r\n        selectedSection: [],\r\n        showPriorityMenu: false\r\n    }\r\n}\r\n// Updates the selected Section's priority sort type. Also resets selected section.\r\nfunction setSectionPriority(state, value){\r\n    const sectionRef = database.collection(collectionName).doc(state.selectedSection.sectionIdentifier)\r\n    sectionRef.update({\r\n        sortType: value\r\n    })\r\n    return{\r\n        ...state,\r\n        selectedSection: [],\r\n        showPriorityMenu: false\r\n    }\r\n}\r\n\r\n\r\n\r\nexport default function toDoReducer(state = initialState, action){\r\n    switch (action.type){\r\n        case CREATE_TASK: return createTask(state, action.payload.sectionIdentifier)\r\n        case DELETE_TASK: return deleteTask(state,action.payload.id)\r\n        case UPDATE_TASK_TEXT: return updateTaskText(state,action.payload)\r\n        case TOGGLE_TASK_COMPLETION: return toggleTaskCompletion(state,action.payload)\r\n        case DELETE_ALL_COMPLETED_TASK: return deleteAllCompletedTasks(state)\r\n        case TOGGLE_TODO_LIST: return toggleToDoList(state)\r\n        case TOGGLE_COMPLETED_LIST: return toggleCompletedList(state)\r\n        case SHOW_MENU: return showMenu(state)\r\n        case HIDE_MENU: return hideMenu(state)\r\n        case UNDO_TASK: return undoTask(state)\r\n        case SHOW_UNDO: return showUndo(state)\r\n        case HIDE_UNDO: return hideUndo(state)\r\n        case CREATE_SECTION: return createSection(state)\r\n        case DELETE_SECTION: return deleteSection(state,action.payload.sectionIdentifier)\r\n        case UPDATE_SECTION_TEXT: return updateSectionText(state, action.payload)\r\n        case TOGGLE_SECTION: return toggleSection(state, action.payload.sectionIdentifier)\r\n        case CLEAR_ALL: return clearAll(state)\r\n        case GET_TOGGLED: return getToggledStatus(state, action.payload.sectionIdentifier)\r\n        case PUSH_COMPLETED_TASK: return pushCompletedTask(state, action.payload)\r\n        case TOGGLE_COMPLETED_SECTION_BUTTON: return toggleCompletedSection(state)\r\n        case SET_SECTION_TO_STACK: return setSectionToStack(state, action.payload.stackList)\r\n        case SET_TASKS_TO_STACK: return setTasksToStack(state, action.payload.taskList)\r\n        case UPDATE_TASK_PRIORITY: return updateTaskPriority(state, action.payload)\r\n        case PUSH_SELECTED_SECTION_ACTION: return pushSelectedSection(state, action.payload)\r\n        case SHOW_PRIORITY_MENU: return showPriorityMenu(state)\r\n        case HIDE_PRIORITY_MENU: return hidePriorityMenu(state)\r\n        case SET_SECTION_PRIORITY: return setSectionPriority(state, action.payload.value)\r\n        default:\r\n            return state \r\n    }\r\n\r\n\r\n}","import {createStore} from \"redux\"\nimport rootReducer  from \"./reducer\"\n\nconst store = createStore(rootReducer)\nexport default store ","import {\n    hideMenuAction,\n    hideUndoAction,\n    showMenuAction,\n    showUndoAction,\n    toggleCompletedListAction,\n    toggleToDoListAction,\n    toggleUndoAction,\n    undoTaskAction,\n    toggleCompletedSectionAction,\n    pushSelectedSectionAction,\n    showPriorityMenuAction,\n    hidePriorityMenuAction\n} from \"./actions.js\"\nimport store from \"./store.js\"\n\nexport default class AppDataController {\n\n    static toggleTodoList() {\n        const action = toggleToDoListAction()\n        store.dispatch(action)\n    }\n\n    static showToDo() {\n        return store.getState().showTodo \n    }\n    \n    static showCompleted() {\n        return store.getState().showCompleted \n    }\n\n    static showMenu() {\n        const action = showMenuAction()\n        store.dispatch(action)\n    }\n\n    static closeMenu() {\n        const action = hideMenuAction()\n        store.dispatch(action)\n    }\n\n    static menuIsActive() {\n        return store.getState().showMenu\n    }\n\n    static toggleCompletedList() {\n        const action = toggleCompletedListAction()\n        store.dispatch(action)\n    }\n\n    static showUndo() {\n        const action = showUndoAction()\n        store.dispatch(action)\n    }\n\n    static hideUndo() {\n        const action = hideUndoAction()\n        store.dispatch(action)\n    }\n\n    static undoTask() {\n        const action = undoTaskAction()\n        store.dispatch(action)\n    }\n\n    static undoIsActive() {\n        return store.getState().showUndo \n    }\n\n    static toggleCompletedSection() {\n        const action =  toggleCompletedSectionAction()\n        store.dispatch(action)\n    }\n\n    static pushSelectedSection(sectionIdentifier, sortType){\n        const action =  pushSelectedSectionAction(sectionIdentifier, sortType)\n        store.dispatch(action)\n    }\n\n    static priorityMenuIsActive() {\n        return store.getState().showPriorityMenu\n    }\n\n    static showPriorityMenu() {\n        const action = showPriorityMenuAction()\n        store.dispatch(action)\n    }\n\n    static hidePriorityMenu() {\n        const action = hidePriorityMenuAction()\n        store.dispatch(action)\n    }\n\n}","import AppDataController from \"../../modules/dataController/AppDataController\"\r\nimport \"../../css/action_button.css\"\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\"\r\nimport { faPlus } from \"@fortawesome/free-solid-svg-icons\"\r\n\r\nfunction handleOnClick() {\r\n    AppDataController.showMenu()\r\n}\r\n\r\n// Action button in the bottom right corner, allows access to adding sections, clearing completed tasks, or\r\n    // resetting the sections and tasks.\r\n\r\nexport default function ActionButton() {\r\n    return (\r\n        <button\r\n            aria-label=\"Click here to hear more options.\"\r\n            class=\"action-button\"\r\n            onClick={handleOnClick}\r\n        >\r\n        <FontAwesomeIcon icon={faPlus} />\r\n        </button>\r\n    )\r\n}\r\n\r\n","import \"../css/banner.css\"\r\n\r\n\r\n\r\n// Just a silly banner for the top of the page that shows a play on \"toDos\"\r\nexport default function Header(props) {\r\n\r\n    return (\r\n        <div class=\"banner\">\r\n            <h1 class=\"title\"> Todoiz.IO</h1>\r\n        </div>\r\n    )\r\n}","\r\n\r\n\r\n/* \r\n\r\n\r\nprops: {\r\n    text: string;\r\n    command: Function\r\n    parameters: string\r\n    icon: FontAwesomeIcon\r\n}\r\n*/\r\n\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\n\r\nexport default function ActionMenuItem(props) {\r\n    // creates a button in the action menu with a command from props.\r\n    return (\r\n        <button onClick={() => props.command(props)} class=\"action-item\"\r\n            aria-label={\"This is the\" + props.text + \"button in the action menu, Press to perform the action.\" }>\r\n            { props.icon && <FontAwesomeIcon className = \"ActionIcon\" icon= {props.icon}/> }\r\n            <div class=\"action-text\">\r\n                <p> {props.text} </p>\r\n            </div>\r\n        </button>\r\n    )\r\n}\r\n\r\n","import ActionMenuItem from \"./ActionMenuItem.js\"\r\nimport \"../../css/action_list.css\"\r\nimport TaskDataController from \"../../modules/dataController/TaskDataController.js\"\r\nimport { faMinus, faPlus } from \"@fortawesome/free-solid-svg-icons\"\r\nimport AppDataController from \"../../modules/dataController/AppDataController.js\"\r\nimport {collectionName, database} from \"../../modules/dataController/firestore\";\r\nimport {useCollection} from \"react-firebase-hooks/firestore\";\r\n\r\n\r\n\r\nlet fireStoreList = null;\r\n\r\n/*\r\nprops: {\r\n    menuItems: MenuItem[]\r\n}\r\n\r\nmenuItem {\r\n    text: string;\r\n\r\n    command: Function\r\n}\r\n*/\r\n\r\n\r\nfunction deleteAll() {\r\n    // deletes all completed Tasks\r\n    TaskDataController.deleteAllCompleted()\r\n}\r\n\r\nfunction ClearAll() {\r\n    // Resets all sections and tasks, gives an empty section\r\n    TaskDataController.clearAllSectionsAndTasks()\r\n\r\n}\r\n\r\n\r\nconst menuItems = [\r\n    // Text, commands, and icons present in the action menu.\r\n    {text: \"Add New Section\", command: TaskDataController.createSection, icon: faPlus},\r\n    {text: \"Clear Completed Tasks\", command:deleteAll, icon: faMinus},\r\n    {text: \"Clear All Sections And Tasks\", command: ClearAll, icon: faMinus}\r\n]\r\n\r\nexport default function ActionMenu(props) {\r\n\r\n    const query = database.collection(collectionName);\r\n    const [value, loading, error] = useCollection(query);\r\n    if (value) {\r\n        fireStoreList = value.docs.map((doc) => {\r\n            return {...doc.data()}});\r\n        TaskDataController.setSectionToStack(fireStoreList)\r\n    }\r\n\r\n\r\n\r\n    // returns a component that contains the commands listed above.\r\n    return (\r\n        <button class='overlay'onClick= {AppDataController.closeMenu}\r\n            aria-label=\"Click here to exit the action menu.\">\r\n            <div class='action-container'>\r\n                { menuItems.map(menuItem => {\r\n                    return <ActionMenuItem {...menuItem} key={menuItem.text}/>\r\n                })}\r\n            </div>\r\n        </button>\r\n     \r\n    )\r\n}","import \"../../css/prioritySortButton.css\"\r\n\r\nimport TaskDataController from \"../../modules/dataController/TaskDataController\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\"\r\nimport { faSort, faSortDown, faSortUp } from \"@fortawesome/free-solid-svg-icons\"\r\nimport \"../../css/SectionAddTaskButton.css\"\r\n\r\n// The button to change a task's priority level.\r\nfunction TaskPriorityButton(props) {\r\n    //\r\n    const sectionText = props.sectionTitle\r\n    let priorityIcon\r\n    if(props.value == 1){\r\n        priorityIcon = faSortDown\r\n    }\r\n    else if (props.value == 2){\r\n        priorityIcon = faSort\r\n    }\r\n    else {\r\n        priorityIcon = faSortUp\r\n    }\r\n\r\n    return (\r\n        <button\r\n            aria-label={sectionText ? \"Press to change the priority of the tasks in \" + sectionText : \"Press to change the priority of the tasks in an empty section\"}\r\n            class=\"TaskPriorityButton\"\r\n            onClick={ (e) => handleOnClick(props.identifier, props.sectionIdentifier, props.value)}\r\n        >\r\n            <FontAwesomeIcon icon={priorityIcon} />\r\n        </button>\r\n    )\r\n}\r\n\r\nfunction handleOnClick(id, sectionIdentifier, value) {\r\n    TaskDataController.updateTaskPriority(id, sectionIdentifier, value)\r\n}\r\n\r\nexport default TaskPriorityButton","import { useEffect, useRef, useState } from 'react';\r\n\r\nfunction SelectionMaintainingInput(props) {\r\n    const { value, onChange, ...rest } = props;\r\n    const [cursor, setCursor] = useState(null);\r\n    const ref = useRef(null);\r\n\r\n    useEffect(() => {\r\n        const input = ref.current;\r\n        if (input) input.setSelectionRange(cursor, cursor);\r\n    }, [ref, cursor, value]);\r\n\r\n    const handleChange = (e) => {\r\n        setCursor(e.target.selectionStart);\r\n        onChange && onChange(e);\r\n    };\r\n\r\n    return <input ref={ref} value={value} onChange={handleChange} {...rest} />;\r\n}\r\n\r\nexport default SelectionMaintainingInput;","import \"../../css/task.css\"\r\nimport TaskDataController from \"../../modules/dataController/TaskDataController\"\r\nimport store from \"../../modules/dataController/store\";\r\nimport TaskPriorityButton from \"../newSection/taskPriorityButton\";\r\nimport SelectionMaintainingInput from \"../../modules/dataController/SelectionMaintainingInput\";\r\n\r\n/*\r\nprops: {\r\n    text:string;\r\n    isCompleted:boolean\r\n    id:string \r\n}\r\n*/\r\n\r\n// This creates the individual task for use on mobile displays. It contains a checkbox, and a input text\r\n\r\nexport default function Task(props) {\r\n\r\n\r\n\r\n    const classes = `task-item`\r\n    const cssID = props.isCompleted ? 'completedTask' : ''\r\n\r\n\r\n\r\n    // Why hello ugly getAria functions that are 80 lines long! I would love to make these cleaner, but currently\r\n    // they do what they need to with getting what needs to be returned to the screenReader, and I have one hour\r\n    // left to turn this in so there it is!\r\n\r\n    function getAriaCheckbox(){\r\n        const currentSectionText = props.text\r\n        if (currentSectionText){\r\n            if (props.text){\r\n                if (props.isCompleted){\r\n                    return \"This is the checked checkbox for the task \" + props.text + \" in\" + currentSectionText\r\n                }\r\n                else{\r\n                    return \"This is the unchecked checkbox for the task \" + props.text + \" in\" + currentSectionText\r\n                }\r\n            }\r\n            else{\r\n                if (props.isCompleted){\r\n                    return \"This is the checked checkbox for an empty task in\" + currentSectionText\r\n                }\r\n                else{\r\n                    return \"This is the unchecked checkbox for an empty task in\" + currentSectionText\r\n                }\r\n            }\r\n        }\r\n        else{\r\n            if (props.text){\r\n                if (props.isCompleted){\r\n                    return \"This is the checked checkbox for the task \" + props.text + \" in an empty section.\"\r\n                }\r\n                else{\r\n                    return \"This is the unchecked checkbox for the task \" + props.text + \" in an empty section.\"\r\n                }\r\n            }\r\n            else{\r\n                if (props.isCompleted){\r\n                    return \"This is the checked checkbox for an empty task in in an empty section.\"\r\n                }\r\n                else{\r\n                    return \"This is the unchecked checkbox for an empty task in an empty section.\"\r\n                }\r\n            }\r\n        }\r\n        }\r\n\r\n    function getAriaTask(){\r\n        const currentSectionText = props.text\r\n        if (currentSectionText){\r\n            if (props.text){\r\n                if (props.isCompleted){\r\n                    return \"edit the completed task \" + props.text + \" in\" + currentSectionText + \".\"\r\n                }\r\n                else{\r\n                    return \"edit the uncompleted task \" + props.text + \" in\" + currentSectionText + \".\"\r\n                }\r\n            }\r\n            else{\r\n                if (props.isCompleted){\r\n                    return \"edit the completed empty task in\" + currentSectionText + \".\"\r\n                }\r\n                else{\r\n                    return \"edit the uncompleted empty task  in\" + currentSectionText + \".\"\r\n                }\r\n            }\r\n        }\r\n        else{\r\n            if (props.text){\r\n                if (props.isCompleted){\r\n                    return \"edit the completed task \" + props.text + \" in an empty section.\"\r\n                }\r\n                else{\r\n                    return \"edit the uncompleted task \" + props.text + \" in an empty section.\"\r\n                }\r\n            }\r\n            else{\r\n                if (props.isCompleted){\r\n                    return \"edit a completed empty task in in an empty section.\"\r\n                }\r\n                else{\r\n                    return \"edit a uncompleted empty task in an empty section.\"\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n    return (\r\n        <div class={classes} id = {cssID+\"markedCompleted\"}>\r\n            <input\r\n                aria-label= {getAriaCheckbox()}\r\n                alt='task completion status' \r\n                class='checkbox' \r\n                type=\"checkbox\"\r\n                value={ props.isCompleted}\r\n                onChange= {(e) => handleCheckBoxEvent(props.id, props.sectionIdentifier, props.isCompleted)}\r\n                checked= {props.isCompleted}\r\n            />\r\n            <SelectionMaintainingInput\r\n                aria-label={getAriaTask()}\r\n                class='task-text' \r\n                type='text' \r\n                alt='task text'\r\n\r\n                id ={cssID}\r\n                onChange= { (e) => handleTextEvent(props.id, props.sectionIdentifier,e)}\r\n                value={props.text}\r\n                onFocus={(e)=>e.currentTarget.value = props.text}\r\n            />\r\n            <TaskPriorityButton\r\n                sectionTitle = {props.text}\r\n                sectionIdentifier = {props.sectionIdentifier}\r\n                identifier = {props.id}\r\n                value = {props.priority}/>\r\n        </div>\r\n    )\r\n\r\n}\r\n\r\n\r\n\r\nfunction handleTextEvent(id, identifier, event) {\r\n    const newText = event.currentTarget.value\r\n    TaskDataController.updateTaskText(id, identifier, newText)\r\n}\r\n\r\nfunction handleCheckBoxEvent(id, identifier, isToggled) {\r\n    TaskDataController.toggleTaskCompletion(id, identifier, isToggled)\r\n}","import { faAngleDown, faAngleRight } from \"@fortawesome/free-solid-svg-icons\"\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\"\r\nimport store from \"../../modules/dataController/store\";\r\nimport AppDataController from \"../../modules/dataController/AppDataController\";\r\nimport { connect } from \"react-redux\"\r\n\r\n\r\n\r\n// SectionButton refers to the arrow button to show taskslist when in mobile view.\r\n// This was considered for desktop and landscape view, but difficult would\r\n// be an understatement in trying to determine scroll length, so that was canned.\r\n\r\nfunction CompletedSectionButton(props) {\r\n\r\n    const isToggled = store.getState().showCompletedTasks\r\n\r\n    const icon = isToggled ? faAngleDown : faAngleRight\r\n\r\n    // // Once again, sectionText is used for the aria-label.\r\n\r\n    const ariaText = props.text ? props.text : \"an empty \"\r\n    // This was used for getting further parameters without a if else statement.\r\n\r\n\r\n    return (\r\n        <button class=\"drop-down\" onClick={(e) => handleOnClick()}\r\n                aria-label= {props.toggledState ? \"click to close\" + ariaText + \"section\": \"click to open \" + ariaText + \"section\"}\r\n        >\r\n            <FontAwesomeIcon icon={icon} />\r\n        </button>\r\n    )\r\n}\r\n\r\n\r\n\r\n\r\nfunction handleOnClick() {\r\n    AppDataController.toggleCompletedSection()\r\n}\r\n\r\nfunction mapStateToProps(state){\r\n    return{\r\n        isToggled: store.getState().showCompletedTasks}\r\n}\r\n\r\nexport default connect(mapStateToProps)(CompletedSectionButton)\r\n","import \"../../css/bar.css\"\r\nimport CompletedSectionButton from \"./completedSectionButton\";\r\n\r\n\r\n// This displays the completed section in portrait view.\r\n// Needs to be a separate section due to it's unique nature.\r\nfunction CompletedSection(props) {\r\n    let cssID = \"completedSectionText\";\r\n    return (\r\n        <div class={\"barCompleted\"} id={\"bar\" + cssID}>\r\n            <CompletedSectionButton text = {props.sectionTitle}/>\r\n            <div\r\n                aria-label={props.sectionTitle ? \"Edit the section title of\" + props.sectionTitle : \"Edit the title of an empty section\"}\r\n                class=\"bar-title\"\r\n                id={cssID}\r\n                type='text'\r\n                alt='Completed text'\r\n                value=\"Completed\"\r\n            >Completed</div>\r\n        </div>)\r\n}\r\n\r\n\r\nexport default CompletedSection","import Task from \"./Task\";\r\nimport CompletedSection from \"../newSection/completedSection\";\r\n\r\n\r\n\r\n\r\n\r\n/*\r\nprops:{\r\n    tasks: TaskItem[]\r\n\r\n}\r\n*/\r\n\r\n// creates the list of tasks within each section visible in mobile view.\r\n\r\nexport default function TaskList(props) {\r\n\r\n    return (\r\n        <div class='container'>\r\n            {\r\n            props.tasks.map(task => {\r\n            return <Task \r\n                        {...task}\r\n                        key={task.id}\r\n                    />\r\n            })\r\n            }\r\n        </div>   \r\n    )\r\n    \r\n}","import { faAngleDown, faAngleRight } from \"@fortawesome/free-solid-svg-icons\"\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\"\r\nimport TaskDataController from \"../../modules/dataController/TaskDataController\";\r\nimport store from \"../../modules/dataController/store\";\r\n\r\n\r\n\r\n\r\n// SectionButton refers to the arrow button to show taskslist when in mobile view.\r\n// This was considered for desktop and landscape view, but difficult would\r\n// be an understatement in trying to determine scroll length, so that was canned.\r\n\r\nfunction SectionButton(props) {\r\n\r\n    const isToggled = store.getState()\r\n\r\n    const icon = props.toggledState ? faAngleDown : faAngleRight\r\n\r\n\r\n    const ariaText = props.text ? props.text : \"an empty \"\r\n    // This was used for getting further parameters without a if else statement.\r\n\r\n\r\n    return (\r\n        <button class=\"drop-down\" onClick={(e) => handleOnClick(props.identifier)}\r\n            aria-label= {props.toggledState ? \"click to close\" + ariaText + \"section\": \"click to open \" + ariaText + \"section\"}\r\n            >\r\n            <FontAwesomeIcon icon={icon} />\r\n        </button>\r\n    )\r\n}   \r\n\r\n\r\n\r\n\r\nfunction handleOnClick(identifier) {\r\n    TaskDataController.toggleSection(identifier)\r\n}\r\n\r\n\r\n\r\nexport default SectionButton","import \"../../css/bar.css\"\r\nimport \"../../css/todo.css\"\r\nimport \"../../css/completed.css\"\r\n\r\nimport TaskDataController from \"../../modules/dataController/TaskDataController\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\"\r\nimport { faPlus } from \"@fortawesome/free-solid-svg-icons\"\r\nimport \"../../css/SectionAddTaskButton.css\"\r\n\r\n\r\nfunction SectionAddTaskButton(props) {\r\n    // This is a component inside a section's bar in mobile view that adds a task to the associated section.\r\n\r\n\r\n    // sectionText gets the text of the section, needed because sections are identified by a uuid.\r\n    // this is used to determine whether the sectionText is empty, because the screenreader needs to know\r\n    // if a section title is empty instead of just skipping over it.\r\n    const sectionText = props.sectionTitle\r\n\r\n        return (\r\n        <button\r\n            aria-label={sectionText ? \"Press to add a task to \" + sectionText : \"Press to add a task to an empty section\"}\r\n            class=\"add-task-button\"\r\n            onClick={ (e) => handleOnClick(props.identifier)}\r\n        >\r\n            <FontAwesomeIcon icon={faPlus} />\r\n        </button>\r\n    )\r\n}\r\n\r\nfunction handleOnClick(props) {\r\n    TaskDataController.createTask(props)\r\n}\r\n\r\nexport default SectionAddTaskButton","import \"../../css/prioritySortButton.css\"\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\"\r\nimport { faChartBar } from \"@fortawesome/free-solid-svg-icons\"\r\nimport \"../../css/SectionAddTaskButton.css\"\r\nimport AppDataController from \"../../modules/dataController/AppDataController\";\r\n\r\n\r\n// This is a button that opens the priority sort menu to sort a list of tasks in mobile view.\r\nfunction PrioritySortButton(props) {\r\n    const sectionText = props.sectionTitle\r\n\r\n    return (\r\n        <button\r\n            aria-label={sectionText ? \"Press to sort the tasks in \" + sectionText : \"Press to sort the tasks in an empty section\"}\r\n            class=\"prioritySortButton\"\r\n            onClick={ (e) => handleOnClick(props.identifier, props.sortType)}\r\n        >\r\n            <FontAwesomeIcon icon={faChartBar} />\r\n        </button>\r\n    )\r\n}\r\n\r\nfunction handleOnClick(identifier, sortType) {\r\n    AppDataController.pushSelectedSection(identifier, sortType)\r\n    AppDataController.showPriorityMenu()\r\n}\r\n\r\nexport default PrioritySortButton","import \"../../css/bar.css\"\r\nimport SectionButton from \"./SectionButton\"\r\nimport TaskDataController from \"../../modules/dataController/TaskDataController\";\r\nimport SectionAddTaskButton from \"./sectionAddTask\";\r\nimport PrioritySortButton from \"./priorityButton\";\r\n\r\n\r\n\r\n// This is the section bar, it contains a button for showing tasklists, an input for editing the section title, and\r\n// a button to add tasks.\r\n// A task Add button was considered for the completed tasks section, but this turned out to be a logistical headache\r\n// as completed tasks when checked uncompleted would return to it's origin, the completed tasks section.\r\n    // a uncompleted task in a completed task section.\r\n\r\nexport default function SectionBar(props) {\r\n    let cssID;\r\n\r\n    // cssID determines if the section is the To do section, completed section, or an added section.\r\n    // lab3 update: There is so much redundant code here and I have 2 days to finish lab5 and I am\r\n    // Worried I will not have time to clean this up later so, whatever!\r\n\r\n    const classes = `bar ${props.identifier}`\r\n    if (props.identifier !== 'toDo' && props.identifier !== 'completed'){\r\n        cssID = \"otherSections\";\r\n    }\r\n    else{\r\n        cssID = props.identifier; // props.identifier contains either \"toDo\", \"completed\", or some uuid string.\r\n    }\r\n\r\n\r\n    // This will return a section bar, containing a button to open and close the tasks,\r\n    // the section's input box itself.\r\n    // The priority sort button to sort tasks by priority\r\n    // the add task button to add tasks to the section\r\n    return (\r\n        <div class={classes} id={\"bar\" + props.identifier}>\r\n            <SectionButton identifier = {props.identifier}\r\n                           toggledState = {props.isToggled}\r\n                            text = {props.sectionTitle}/>\r\n            <input\r\n                aria-label={props.sectionTitle ? \"Edit the section title of\" + props.sectionTitle : \"Edit the title of an empty section\"}\r\n                class=\"bar-title\"\r\n                id={cssID}\r\n                type='text'\r\n                alt='task text'\r\n                onChange= { (e) => handleTextEvent(props.identifier,e)}\r\n                value={props.sectionTitle}\r\n            />\r\n            {/*The code below determines whether the section is completed, and will hide the addTaskButton if it is.*/}\r\n            <PrioritySortButton\r\n                identifier = {props.identifier}\r\n                sectionTitle = {props.sectionTitle}\r\n                sortType = {props.sortType}/>\r\n            {<SectionAddTaskButton\r\n                identifier = {props.identifier}\r\n                sectionTitle = {props.sectionTitle}/>}\r\n        </div>  \r\n    )\r\n}\r\n\r\nfunction handleTextEvent(id,event) {\r\n    const text = event.currentTarget.value\r\n    TaskDataController.updateSectionText(id,text)\r\n}","import TaskList from \"../Tasks/TaskList.js\"\r\nimport SectionBar from \"./SectionBar.js\"\r\nimport AppDataController from \"../../modules/dataController/AppDataController\";\r\nimport {connect} from \"react-redux\";\r\nimport TaskDataController from \"../../modules/dataController/TaskDataController\";\r\nimport {collectionName, database} from \"../../modules/dataController/firestore\";\r\nimport {useCollection} from \"react-firebase-hooks/firestore\";\r\nimport store from \"../../modules/dataController/store\";\r\nimport CompletedSection from \"./completedSection\";\r\n\r\n\r\n\r\n/*\r\nprops:\r\n    This will take in:\r\n    - identifier: A random uuidv4 for added sections, for To do it's 'toDo', for completed: 'completed'\r\n    - text: A title, by default it's null, for to do and completed... yeah.\r\n    - isToggled: false or true, will toggle viewing the tasks\r\n    - tasks: The list of tasks assigned to each section.\r\n */\r\n\r\n\r\n\r\n// I am truly embarassed and deeply concerned for what this is.\r\n// The long list of code below sorts the tasks by whatever sortType\r\n// is selected. This needs to be done before the tasks are put into\r\n// the taskList, so below is a long list of all that.\r\n// Not only that, tasks as well as completed tasks are pushed to the state.\r\n// This is done so that in clearing all sections and tasks, instead of making\r\n// many queries, we already have all tasks and sections we need to clear in\r\n// the state.\r\n// And then, once that's done, this will return a given section\r\nfunction SectionContainer(props) {\r\n    const isToggled = (props.isToggledList.includes(props.identifier))\r\n\r\n    const taskRef = database.collection(collectionName).doc(props.identifier).collection('tasks')\r\n    const [value, loading, error] = useCollection(taskRef);\r\n    let fireStoreList = null;\r\n    let fireStoreCompletedList = null;\r\n    let stateCompletedList = null;\r\n\r\n    if (value) {\r\n        fireStoreList = value.docs.map((doc) => {\r\n            return {...doc.data()}\r\n        });\r\n\r\n        const allTasks = store.getState().taskStack.map(x => x).filter(task => task.sectionIdentifier !== props.identifier).concat(fireStoreList)\r\n        TaskDataController.setTasksToStack(allTasks)\r\n\r\n        const fireStoreCompletedList = fireStoreList.map(x => x).filter(task => task.isCompleted === true)\r\n        stateCompletedList = store.getState().completedTasks.map(x => x).filter(task => task.sectionIdentifier !== props.identifier).concat(fireStoreCompletedList)\r\n        TaskDataController.pushCompletedTask(stateCompletedList)\r\n\r\n        if(props.sortType < 7){\r\n            if(props.sortType === 1){\r\n                fireStoreList.sort(function(task1, task2) {\r\n                    let task1Text = task1.text.toUpperCase();\r\n                    let task2Text = task2.text.toUpperCase();\r\n                    return (task1Text < task2Text) ? -1 : (task1Text > task2Text) ? 1 : 0;\r\n                });\r\n            }\r\n            else if(props.sortType === 2){\r\n                fireStoreList.sort(function(task1, task2) {\r\n                    let task1Text = task1.text.toUpperCase();\r\n                    let task2Text = task2.text.toUpperCase();\r\n                    return (task1Text > task2Text) ? -1 : (task1Text > task2Text) ? 1 : 0;\r\n                });\r\n            }\r\n            else if(props.sortType === 3) {\r\n                    fireStoreList.sort(function(task1, task2) {\r\n                        let task1date = task1.timeMade;\r\n                        let task2date = task2.timeMade;\r\n                        return (task1date < task2date) ? -1 : (task1date > task2date) ? 1 : 0;\r\n                    });\r\n                }\r\n            else if(props.sortType === 4){\r\n                fireStoreList.sort(function(task1, task2) {\r\n                    let task1date = task1.timeMade;\r\n                    let task2date = task2.timeMade;\r\n                    return (task1date > task2date) ? -1 : (task1date > task2date) ? 1 : 0;\r\n                });\r\n            }\r\n            else if(props.sortType === 5){\r\n                fireStoreList.sort(function(task1, task2) {\r\n                    let task1priority = task1.priority;\r\n                    let task2priority = task2.priority;\r\n                    return (task1priority > task2priority) ? -1 : (task1priority > task2priority) ? 1 : 0;\r\n                });\r\n            }\r\n            else if(props.sortType === 6){\r\n                fireStoreList.sort(function(task1, task2) {\r\n                    let task1priority = task1.priority;\r\n                    let task2priority = task2.priority;\r\n                    return (task1priority < task2priority) ? -1 : (task1priority > task2priority) ? 1 : 0;\r\n                });\r\n            }\r\n        }\r\n\r\n\r\n\r\n    }\r\n\r\n\r\n    return (\r\n        <div>\r\n            {fireStoreList && <SectionBar\r\n                sectionTitle = {props.title}\r\n                className={props.identifier}\r\n                identifier ={props.identifier}\r\n                sortType = {props.sortType}\r\n                isToggled ={isToggled}\r\n                />}\r\n            { isToggled && fireStoreList &&\r\n                <TaskList tasks={fireStoreList}/>}\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\nfunction mapToState(state, ownProps) {\r\n     return {\r\n         isToggledList: store.getState().sectionsToggled,\r\n     }\r\n }\r\n\r\nexport default connect(mapToState)(SectionContainer)\r\n\r\n\r\n","import TaskDataController from \"../../modules/dataController/TaskDataController\"\r\n\r\n/*\r\nprops: {\r\n    text:string;\r\n    isCompleted:boolean\r\n    id:string\r\n}\r\n*/\r\n\r\n// This creates the individual completed task for mobile view.\r\n// much of this is duplicate code that needs to be separate from\r\n// the default task type, due to being a special completed task.\r\n\r\nexport default function CompletedSectionTask(props) {\r\n    const classes = `task-item`\r\n    const cssID = props.isCompleted ? 'completedTask' : ''\r\n\r\n\r\n\r\n    // Why hello ugly getAria functions that are 80 lines long! I would love to make these cleaner, but currently\r\n    // they do what they need to with getting what needs to be returned to the screenReader, and I have one hour\r\n    // left to turn this in so there it is!\r\n\r\n    function getAriaCheckbox(){\r\n        const currentSectionText = props.text\r\n        if (currentSectionText){\r\n            if (props.text){\r\n                if (props.isCompleted){\r\n                    return \"This is the checked checkbox for the task \" + props.text + \" in\" + currentSectionText\r\n                }\r\n                else{\r\n                    return \"This is the unchecked checkbox for the task \" + props.text + \" in\" + currentSectionText\r\n                }\r\n            }\r\n            else{\r\n                if (props.isCompleted){\r\n                    return \"This is the checked checkbox for an empty task in\" + currentSectionText\r\n                }\r\n                else{\r\n                    return \"This is the unchecked checkbox for an empty task in\" + currentSectionText\r\n                }\r\n            }\r\n        }\r\n        else{\r\n            if (props.text){\r\n                if (props.isCompleted){\r\n                    return \"This is the checked checkbox for the task \" + props.text + \" in an empty section.\"\r\n                }\r\n                else{\r\n                    return \"This is the unchecked checkbox for the task \" + props.text + \" in an empty section.\"\r\n                }\r\n            }\r\n            else{\r\n                if (props.isCompleted){\r\n                    return \"This is the checked checkbox for an empty task in in an empty section.\"\r\n                }\r\n                else{\r\n                    return \"This is the unchecked checkbox for an empty task in an empty section.\"\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    function getAriaTask(){\r\n        const currentSectionText = props.text\r\n        if (currentSectionText){\r\n            if (props.text){\r\n                if (props.isCompleted){\r\n                    return \"edit the completed task \" + props.text + \" in\" + currentSectionText + \".\"\r\n                }\r\n                else{\r\n                    return \"edit the uncompleted task \" + props.text + \" in\" + currentSectionText + \".\"\r\n                }\r\n            }\r\n            else{\r\n                if (props.isCompleted){\r\n                    return \"edit the completed empty task in\" + currentSectionText + \".\"\r\n                }\r\n                else{\r\n                    return \"edit the uncompleted empty task  in\" + currentSectionText + \".\"\r\n                }\r\n            }\r\n        }\r\n        else{\r\n            if (props.text){\r\n                if (props.isCompleted){\r\n                    return \"edit the completed task \" + props.text + \" in an empty section.\"\r\n                }\r\n                else{\r\n                    return \"edit the uncompleted task \" + props.text + \" in an empty section.\"\r\n                }\r\n            }\r\n            else{\r\n                if (props.isCompleted){\r\n                    return \"edit a completed empty task in in an empty section.\"\r\n                }\r\n                else{\r\n                    return \"edit a uncompleted empty task in an empty section.\"\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n    return (\r\n        <div class={classes} id = {\"markedCompleted\"}>\r\n            <input\r\n                aria-label= {getAriaCheckbox()}\r\n                alt='task completion status'\r\n                class='checkbox'\r\n                type=\"checkbox\"\r\n                value={ props.isCompleted}\r\n                onChange= {(e) => handleCheckBoxEvent(props.id, props.sectionIdentifier, props.isCompleted)}\r\n                checked= {props.isCompleted}\r\n            />\r\n            <input\r\n                aria-label={getAriaTask()}\r\n                class='task-text'\r\n                type='text'\r\n                alt='task text'\r\n                onChange= { (e) => handleTextEvent(props.id, props.sectionIdentifier,e)}\r\n                value={props.text}\r\n            />\r\n        </div>\r\n    )\r\n\r\n}\r\n\r\nfunction handleTextEvent(id, identifier, event) {\r\n\r\n    const newText = event.currentTarget.value\r\n\r\n    TaskDataController.updateTaskText(id, identifier, newText)\r\n}\r\n\r\nfunction handleCheckBoxEvent(id, identifier, isToggled) {\r\n    TaskDataController.toggleTaskCompletion(id, identifier, isToggled)\r\n}","import CompletedSectionTask from \"./completedSectionTask\";\r\n\r\n\r\n\r\n\r\n\r\n/*\r\nprops:{\r\n    tasks: TaskItem[]\r\n\r\n}\r\n*/\r\n\r\n// creates the list of completed Tasks for the completed tasks list\r\n\r\nexport default function CompletedSectionsTaskList(props) {\r\n\r\n    return (\r\n        <div class='container'>\r\n            {\r\n                props.tasks.map(task => {\r\n                    return <CompletedSectionTask\r\n                        {...task}\r\n                        key={task.id}\r\n                    />\r\n                })\r\n            }\r\n        </div>\r\n    )}\r\n","import SectionContainer from \"./SectionContainer\";\r\nimport { connect } from \"react-redux\"\r\nimport React, { useEffect, useState } from 'react';\r\nimport CompletedSection from \"./completedSection\";\r\nimport store from \"../../modules/dataController/store\";\r\nimport CompletedSectionsTaskList from \"./completedSectionsTaskList\";\r\n\r\n/*\r\nprops:{\r\n    sections: Section\r\n\r\n */\r\n// Returns a list of sections\r\nfunction SectionList(props){\r\n    if (props.sections){\r\n        return(\r\n            <div class='container'>\r\n                {\r\n                    props.sections.map(section => {\r\n                        return <SectionContainer\r\n                            {...section}\r\n                            key={section.identifier}\r\n                        />\r\n                    })\r\n                }\r\n            <CompletedSection/>\r\n            { props.isCompletedTasksToggled &&\r\n            <CompletedSectionsTaskList tasks={props.completedTasks}/>}\r\n            </div>\r\n        )\r\n    }\r\n    else{\r\n        return null\r\n    }\r\n}\r\n\r\n// export default SectionList\r\n\r\n\r\nfunction mapStateToProps(state){\r\n    return{\r\n        isCompletedTasksToggled: store.getState().showCompletedTasks,\r\n        completedTasks: store.getState().completedTasks}\r\n}\r\n\r\nexport default connect(mapStateToProps)(SectionList)","import { faAngleRight } from \"@fortawesome/free-solid-svg-icons\"\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\"\r\nimport \"../../css/sidebar.css\"\r\n\r\n\r\n// The components in otherDisplays are visible when the display is in landscape or in desktop view.\r\n\r\n\r\n\r\nfunction SideBarButton(props) {\r\n    // Sidebar button is treated similarly to SectionButton in newSection,  but does not rotate and will instead\r\n    // scroll to the Section element in sideList\r\n\r\n    const currentSectionText = props.title\r\n        //another currentSectionText for aria-label!!!\r\n\r\n    const icon = faAngleRight\r\n\r\n    return (\r\n        <button class=\"SideBarButton\" onClick={(e) => handleOnClick(props.identifier)}\r\n        aria-label={currentSectionText ? \"Press to scroll to \" + currentSectionText : \"Press to scroll to a section without a title\"}\r\n        aria-hidden=\"false\">\r\n            <FontAwesomeIcon icon={icon} />\r\n        </button>\r\n    )\r\n}\r\n\r\n\r\n\r\n\r\nfunction handleOnClick(identifier) {\r\n    // handles scrolling to the element, uses scrollIntoView to acomplish this.\r\n    // this should work on all popular platforms minus internet explorer, and\r\n    // safari won't support the options like smooth, block, and inline.\r\n    let sectionToScrollTo = document.getElementById(identifier+\"list\");\r\n    sectionToScrollTo.scrollIntoView({behavior: \"smooth\", block: \"start\", inline: \"start\"})\r\n}\r\n\r\n\r\n\r\nexport default SideBarButton","import \"../../css/sidebar.css\"\r\nimport SideBarButton from \"./sideBarButton\";\r\nimport TaskDataController from \"../../modules/dataController/TaskDataController\";\r\nimport SectionAddTaskButton from \"../newSection/sectionAddTask\";\r\nimport PrioritySortButton from \"../newSection/priorityButton\";\r\n\r\n\r\n\r\n// Will create the Individual elements inside the sideBarlist.\r\n// contains a sideBarButton, an input field for the section title, and a add task button for the section\r\n\r\nexport default function SideBarElement(props) {\r\n\r\n    // cssID determines whether the sidebar is todo, completed, or a added section.\r\n\r\n    let cssID;\r\n    if (props.identifier !== 'toDo' && props.identifier !== 'completed'){\r\n        cssID = \"otherSectionssideBar\";\r\n    }\r\n    else{\r\n        cssID = props.identifier + \"sideBar\";\r\n    }\r\n\r\n\r\n\r\n\r\n\r\n    return(\r\n        <div\r\n            class=\"sideBarElement\"\r\n            id={cssID}>\r\n            <SideBarButton\r\n                identifier = {props.identifier}\r\n                title = {props.title}/>\r\n            <input\r\n                aria-label={props.title ? \"edit the title for the section \" + props.title : \"edit the title for a section with an empty title\"}\r\n                class=\"bar-title\"\r\n                id={cssID}\r\n                // class=\"bar-title\"\r\n                type='text'\r\n                alt='task text'\r\n                // alt='Section text'\r\n                onChange= { (e) => handleTextEvent(props.identifier,e)}\r\n                value={props.title}/>\r\n            <PrioritySortButton\r\n                identifier = {props.identifier}\r\n                sectionTitle = {props.title}\r\n                sortType = {props.sortType}/>\r\n            <SectionAddTaskButton\r\n                identifier = {props.identifier}/>\r\n\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\nfunction handleTextEvent(id,event) {\r\n    const text = event.currentTarget.value\r\n    TaskDataController.updateSectionText(id,text)\r\n}","import \"../../css/sidebar.css\"\r\nimport SideBarButton from \"./sideBarButton\";\r\n\r\n\r\n// Will create the completed section inside the sidebar on the left.\r\n// contains a sideBarButton.\r\n\r\nexport default function SideBarCompletedSection(props) {\r\n    // cssID determines whether the sidebar is todo, completed, or a added section.\r\n\r\n    let cssID = \"completedsideBar\"\r\n\r\n\r\n\r\n\r\n    return(\r\n        <div\r\n            class=\"sideBarElement\"\r\n            id={cssID}>\r\n            <SideBarButton\r\n                identifier = \"completedSectionHeader\"\r\n                title = \"Completed\"/>\r\n            <div\r\n                aria-label=\"This is the Completed Section Text\"\r\n                class=\"bar-title\"\r\n                id=\"completedsideBar1\"\r\n                // class=\"bar-title\"\r\n                type='text'\r\n                alt='task text'\r\n                // alt='Section text'\r\n                value=\"Completed\">Completed</div>\r\n        </div>\r\n    )\r\n}\r\n","import { connect} from \"react-redux\";\r\nimport TaskDataController from \"../../modules/dataController/TaskDataController\";\r\nimport \"../../css/sidebar.css\"\r\nimport SideBarElement from \"./sideBarElement\";\r\nimport SideBarCompletedSection from \"./sideBarCompletedSection\";\r\n\r\n\r\n// Creates the sidebar on the left side of the viewport in desktop/portrait view.\r\n// contains a list of sidebar elements from sideBarElement.\r\n\r\nfunction Sidebar(props) {\r\n    if (props.sections) {\r\n        return (\r\n            <div class=\"SideBarcontainer\">\r\n                {\r\n                    props.sections.map(section => {\r\n                        return <SideBarElement\r\n                            {...section}\r\n                            key={section.identifier}\r\n                        />\r\n                    })\r\n                }\r\n                <SideBarCompletedSection/>\r\n            </div>\r\n        )\r\n    }\r\n    else{\r\n        return null\r\n    }\r\n}\r\n\r\nexport default Sidebar","import TaskDataController from \"../../modules/dataController/TaskDataController\"\r\nimport \"../../css/sideList.css\"\r\nimport store from \"../../modules/dataController/store\";\r\nimport TaskPriorityButton from \"../newSection/taskPriorityButton\";\r\nimport SelectionMaintainingInput from \"../../modules/dataController/SelectionMaintainingInput\";\r\n\r\n/*\r\nprops: {\r\n    text:string;\r\n    isCompleted:boolean\r\n    id:string\r\n}\r\n*/\r\n\r\n// this is the sidelistelementtask, which creates the tasks inside the sidelist.\r\n\r\nexport default function SideListElementTask(props) {\r\n    const cssID = props.isCompleted ? 'completedTask' : ''\r\n\r\n\r\n    //I felt that, as messy as this code is, I needed to account for any variables when running a screenReader.\r\n    // For instance, if a task was empty, was there another way to identify it? Shouldn't the section name also\r\n    // be returned when using a screen reader?\r\n    // While very ugly, this means that almost all possible cases have been accounted for.\r\n\r\n    function getAriaCheckbox(){\r\n        // returns what should be said in the screenReader when the checkbox is focused.\r\n\r\n        const currentSectionText = props.text\r\n        if (currentSectionText){\r\n            if (props.text){\r\n                if (props.isCompleted){\r\n                    return \"This is the checked checkbox for the task \" + props.text + \" in\" + currentSectionText\r\n                }\r\n                else{\r\n                    return \"This is the unchecked checkbox for the task \" + props.text + \" in\" + currentSectionText\r\n                }\r\n            }\r\n            else{\r\n                if (props.isCompleted){\r\n                    return \"This is the checked checkbox for an empty task in\" + currentSectionText\r\n                }\r\n                else{\r\n                    return \"This is the unchecked checkbox for an empty task in\" + currentSectionText\r\n                }\r\n            }\r\n        }\r\n        else{\r\n            if (props.text){\r\n                if (props.isCompleted){\r\n                    return \"This is the checked checkbox for the task \" + props.text + \" in an empty section.\"\r\n                }\r\n                else{\r\n                    return \"This is the unchecked checkbox for the task \" + props.text + \" in an empty section.\"\r\n                }\r\n            }\r\n            else{\r\n                if (props.isCompleted){\r\n                    return \"This is the checked checkbox for an empty task in in an empty section.\"\r\n                }\r\n                else{\r\n                    return \"This is the unchecked checkbox for an empty task in an empty section.\"\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    function getAriaTask(){\r\n        // returns what should be said in the screenReader when the task input text is focused.\r\n\r\n        const currentSectionText = props.text\r\n        if (currentSectionText){\r\n            if (props.text){\r\n                if (props.isCompleted){\r\n                    return \"edit the completed task \" + props.text + \" in\" + currentSectionText + \".\"\r\n                }\r\n                else{\r\n                    return \"edit the uncompleted task \" + props.text + \" in\" + currentSectionText + \".\"\r\n                }\r\n            }\r\n            else{\r\n                if (props.isCompleted){\r\n                    return \"edit the completed empty task in\" + currentSectionText + \".\"\r\n                }\r\n                else{\r\n                    return \"edit the uncompleted empty task  in\" + currentSectionText + \".\"\r\n                }\r\n            }\r\n        }\r\n        else{\r\n            if (props.text){\r\n                if (props.isCompleted){\r\n                    return \"edit the completed task \" + props.text + \" in an empty section.\"\r\n                }\r\n                else{\r\n                    return \"edit the uncompleted task \" + props.text + \" in an empty section.\"\r\n                }\r\n            }\r\n            else{\r\n                if (props.isCompleted){\r\n                    return \"edit a completed empty task in in an empty section.\"\r\n                }\r\n                else{\r\n                    return \"edit a uncompleted empty task in an empty section.\"\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div class=\"SideListElementTask\" id = {cssID+\"markedCompleted\"}>\r\n            <input\r\n                aria-label= {getAriaCheckbox()}\r\n                alt='task completion status'\r\n                class='sideListCheckbox'\r\n                type=\"checkbox\"\r\n                value={ props.isCompleted}\r\n                onChange= {(e) => handleCheckBoxEvent(props.id, props.sectionIdentifier)}\r\n                checked= {props.isCompleted}\r\n            />\r\n            <TaskPriorityButton\r\n                sectionTitle = {props.text}\r\n                sectionIdentifier = {props.sectionIdentifier}\r\n                identifier = {props.id}\r\n                id = {props.id}\r\n                value = {props.priority}/>\r\n            <SelectionMaintainingInput\r\n                aria-label={getAriaTask()}\r\n                class='SideListElementTaskText'\r\n                type='text'\r\n                alt='task text'\r\n                id ={cssID}\r\n                onChange= { (e) => handleTextEvent(props.id, props.sectionIdentifier,e)}\r\n                value={props.text}\r\n            />\r\n        </div>\r\n    )\r\n\r\n}\r\n\r\nfunction handleTextEvent(id, identifier, event) {\r\n    const text = event.currentTarget.value\r\n    TaskDataController.updateTaskText(id, identifier, text)\r\n}\r\n\r\nfunction handleCheckBoxEvent(id, identifier, isToggled) {\r\n    TaskDataController.toggleTaskCompletion(id, identifier, isToggled)\r\n}","import TaskDataController from \"../../modules/dataController/TaskDataController\";\r\nimport \"../../css/sideList.css\"\r\nimport SideListElementTask from \"./sideListElementTask\";\r\nimport {collectionName, database} from \"../../modules/dataController/firestore\";\r\nimport {useCollection} from \"react-firebase-hooks/firestore\";\r\nimport store from \"../../modules/dataController/store\";\r\n\r\n\r\n\r\n// creates the element inside of sidelist, these will contain a section title, a task's checkbox, and a sidelistelement\r\n// task, which is basically a task but in desktop view.\r\n\r\n\r\n\r\n// HERES THE NIGHTMARISH SORTING AND GETTING TASKS AND PUSHING TASKS AND COMPLETED TASKS TO THE STATE AGAIN!\r\n// YAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAY YOU LOVE TO SEE DUPLICATED CODE, EXACTLY 66 LINES !\r\n\r\n// Creates the element inside sidelist that contains a section and it's tasks.\r\nexport default function SideListElement(props) {\r\n\r\n    const taskRef = database.collection(collectionName).doc(props.identifier).collection('tasks')\r\n    const [value, loading, error] = useCollection(taskRef);\r\n    let fireStoreList = null;\r\n    let fireStoreCompletedList = null;\r\n    let stateCompletedList = null;\r\n\r\n    if (value) {\r\n        fireStoreList = value.docs.map((doc) => {\r\n            return {...doc.data()}\r\n        });\r\n\r\n        const allTasks = store.getState().taskStack.map(x => x).filter(task => task.sectionIdentifier !== props.identifier).concat(fireStoreList)\r\n        TaskDataController.setTasksToStack(allTasks)\r\n\r\n        const fireStoreCompletedList = fireStoreList.map(x => x).filter(task => task.isCompleted === true)\r\n        stateCompletedList = store.getState().completedTasks.map(x => x).filter(task => task.sectionIdentifier !== props.identifier).concat(fireStoreCompletedList)\r\n        TaskDataController.pushCompletedTask(stateCompletedList)\r\n\r\n        if(props.sortType < 7){\r\n            if(props.sortType === 1){\r\n                fireStoreList.sort(function(task1, task2) {\r\n                    let task1Text = task1.text.toUpperCase();\r\n                    let task2Text = task2.text.toUpperCase();\r\n                    return (task1Text < task2Text) ? -1 : (task1Text > task2Text) ? 1 : 0;\r\n                });\r\n            }\r\n            else if(props.sortType === 2){\r\n                fireStoreList.sort(function(task1, task2) {\r\n                    let task1Text = task1.text.toUpperCase();\r\n                    let task2Text = task2.text.toUpperCase();\r\n                    return (task1Text > task2Text) ? -1 : (task1Text > task2Text) ? 1 : 0;\r\n                });\r\n            }\r\n            else if(props.sortType === 3) {\r\n                fireStoreList.sort(function(task1, task2) {\r\n                    let task1date = task1.timeMade;\r\n                    let task2date = task2.timeMade;\r\n                    return (task1date < task2date) ? -1 : (task1date > task2date) ? 1 : 0;\r\n                });\r\n            }\r\n            else if(props.sortType === 4){\r\n                fireStoreList.sort(function(task1, task2) {\r\n                    let task1date = task1.timeMade;\r\n                    let task2date = task2.timeMade;\r\n                    return (task1date > task2date) ? -1 : (task1date > task2date) ? 1 : 0;\r\n                });\r\n            }\r\n            else if(props.sortType === 5){\r\n                fireStoreList.sort(function(task1, task2) {\r\n                    let task1priority = task1.priority;\r\n                    let task2priority = task2.priority;\r\n                    return (task1priority > task2priority) ? -1 : (task1priority > task2priority) ? 1 : 0;\r\n                });\r\n            }\r\n            else if(props.sortType === 6){\r\n                fireStoreList.sort(function(task1, task2) {\r\n                    let task1priority = task1.priority;\r\n                    let task2priority = task2.priority;\r\n                    return (task1priority < task2priority) ? -1 : (task1priority > task2priority) ? 1 : 0;\r\n                });\r\n            }\r\n        }\r\n\r\n\r\n\r\n    }\r\n\r\n\r\n\r\n    return(\r\n        <div>\r\n            {fireStoreList &&\r\n        <div\r\n            class=\"SideListElement\"\r\n            aria-label={props.title ? \"this is the section for \" + props.title : \"this is a section without a title.\"}\r\n            id = {props.identifier+\"list\"}>\r\n            <input\r\n                aria-label={props.title ? \"Edit the title for section \" + props.title : \"edit the title for a section without a title.\"}\r\n                className=\"sideListTitle\"\r\n                // class=\"bar-title\"\r\n                type='text'\r\n                alt='task text'\r\n                // alt='Section text'\r\n                onChange={(e) => handleTextEvent(props.identifier, e)}\r\n                value={props.title}\r\n            />\r\n            <div class='sideListTask'>{\r\n                fireStoreList.map(task => {\r\n                    return <SideListElementTask\r\n                        {...task}\r\n                        key={task.id}\r\n                    />\r\n                })\r\n            }\r\n\r\n            </div>\r\n        </div>}\r\n        </div>\r\n    )\r\n}\r\n\r\nfunction handleTextEvent(id,event) {\r\n    const text = event.currentTarget.value\r\n    TaskDataController.updateSectionText(id,text)\r\n}\r\n","import TaskDataController from \"../../modules/dataController/TaskDataController\"\r\nimport \"../../css/sideList.css\"\r\n\r\n/*\r\nprops: {\r\n    text:string;\r\n    isCompleted:boolean\r\n    id:string\r\n}\r\n*/\r\n\r\n// these are the completed tasks in the side list completed section.\r\n// These also need to be read by screen readers, so there's a massive\r\n// list of stuff to read.\r\n// I debated whether or not to put priority sort inside the completed tasks\r\n// list, but I decided against it out of worrying about messing up\r\n// sorting in other sections.\r\n\r\nexport default function SideListCompletedSectionTask(props) {\r\n\r\n\r\n\r\n    //I felt that, as messy as this code is, I needed to account for any variables when running a screenReader.\r\n    // For instance, if a task was empty, was there another way to identify it? Shouldn't the section name also\r\n    // be returned when using a screen reader?\r\n    // While very ugly, this means that almost all possible cases have been accounted for.\r\n\r\n    function getAriaCheckbox(){\r\n        // returns what should be said in the screenReader when the checkbox is focused.\r\n\r\n        const currentSectionText = props.text\r\n        if (currentSectionText){\r\n            if (props.text){\r\n                if (props.isCompleted){\r\n                    return \"This is the checked checkbox for the task \" + props.text + \" in\" + currentSectionText\r\n                }\r\n                else{\r\n                    return \"This is the unchecked checkbox for the task \" + props.text + \" in\" + currentSectionText\r\n                }\r\n            }\r\n            else{\r\n                if (props.isCompleted){\r\n                    return \"This is the checked checkbox for an empty task in\" + currentSectionText\r\n                }\r\n                else{\r\n                    return \"This is the unchecked checkbox for an empty task in\" + currentSectionText\r\n                }\r\n            }\r\n        }\r\n        else{\r\n            if (props.text){\r\n                if (props.isCompleted){\r\n                    return \"This is the checked checkbox for the task \" + props.text + \" in an empty section.\"\r\n                }\r\n                else{\r\n                    return \"This is the unchecked checkbox for the task \" + props.text + \" in an empty section.\"\r\n                }\r\n            }\r\n            else{\r\n                if (props.isCompleted){\r\n                    return \"This is the checked checkbox for an empty task in in an empty section.\"\r\n                }\r\n                else{\r\n                    return \"This is the unchecked checkbox for an empty task in an empty section.\"\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    function getAriaTask(){\r\n        // returns what should be said in the screenReader when the task input text is focused.\r\n\r\n        const currentSectionText = props.text\r\n        if (currentSectionText){\r\n            if (props.text){\r\n                if (props.isCompleted){\r\n                    return \"edit the completed task \" + props.text + \" in\" + currentSectionText + \".\"\r\n                }\r\n                else{\r\n                    return \"edit the uncompleted task \" + props.text + \" in\" + currentSectionText + \".\"\r\n                }\r\n            }\r\n            else{\r\n                if (props.isCompleted){\r\n                    return \"edit the completed empty task in\" + currentSectionText + \".\"\r\n                }\r\n                else{\r\n                    return \"edit the uncompleted empty task  in\" + currentSectionText + \".\"\r\n                }\r\n            }\r\n        }\r\n        else{\r\n            if (props.text){\r\n                if (props.isCompleted){\r\n                    return \"edit the completed task \" + props.text + \" in an empty section.\"\r\n                }\r\n                else{\r\n                    return \"edit the uncompleted task \" + props.text + \" in an empty section.\"\r\n                }\r\n            }\r\n            else{\r\n                if (props.isCompleted){\r\n                    return \"edit a completed empty task in in an empty section.\"\r\n                }\r\n                else{\r\n                    return \"edit a uncompleted empty task in an empty section.\"\r\n                }\r\n            }\r\n        }\r\n    }\r\n    return (\r\n        <div class=\"SideListElementTask\">\r\n            <input\r\n                aria-label= {getAriaCheckbox()}\r\n                alt='task completion status'\r\n                class='sideListCheckbox'\r\n                type=\"checkbox\"\r\n                value={ props.isCompleted}\r\n                onChange= {(e) => handleCheckBoxEvent(props.id, props.sectionIdentifier, props.isCompleted)}\r\n                checked= {props.isCompleted}\r\n            />\r\n            <input\r\n                aria-label={getAriaTask()}\r\n                class='SideListElementTaskText'\r\n                type='text'\r\n                alt='task text'\r\n                id = 'completedSectionTaskText'\r\n                onChange= { (e) => handleTextEvent(props.id, props.sectionIdentifier,e)}\r\n                value={props.text}\r\n            />\r\n        </div>\r\n    )\r\n\r\n}\r\n\r\nfunction handleTextEvent(id, identifier, event) {\r\n    const text = event.currentTarget.value\r\n    TaskDataController.updateTaskText(id, identifier, text)\r\n}\r\n\r\nfunction handleCheckBoxEvent(id, identifier, isToggled) {\r\n    TaskDataController.toggleTaskCompletion(id, identifier, isToggled)\r\n}","import \"../../css/sideList.css\"\r\nimport store from \"../../modules/dataController/store\";\r\nimport {connect} from \"react-redux\";\r\nimport SideListCompletedSectionTask from \"./sideListCompletedSectionTask\";\r\n\r\n\r\n\r\n// creates the completed section and it's tasks in the right side list.\r\n\r\nfunction SideListCompletedSection(props) {\r\n\r\n        return (\r\n            <div\r\n                class=\"SideListElement\"\r\n                aria-label=\"This is a Completed Section Header\"\r\n                id = \"completedSectionHeaderlist\">\r\n                <div\r\n                    aria-label=\"This is the completed Section Header\"\r\n                    className=\"sideListTitle\"\r\n                    // class=\"bar-title\"\r\n                    type='text'\r\n                    alt='task text'\r\n                    // alt='Section text'\r\n                    value=\"Completed\"\r\n                >Completed</div>\r\n                <div>{\r\n                props.completedTasks.map(task => {\r\n                    return <SideListCompletedSectionTask\r\n                        {...task}\r\n                        key={task.id}\r\n                    />\r\n                })}\r\n                </div>\r\n            </div>\r\n        )\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nfunction mapStateToProps(state){\r\n    return{\r\n        completedTasks: store.getState().completedTasks}\r\n}\r\n\r\nexport default connect(mapStateToProps)(SideListCompletedSection)\r\n","import { connect } from \"react-redux\"\r\nimport TaskDataController from \"../../modules/dataController/TaskDataController\"\r\nimport SideListElement from \"./sideListElement\";\r\nimport React, { useEffect, useState } from 'react';\r\nimport SideListCompletedSection from \"./sideListCompletedSection\";\r\n\r\n\r\n\r\n// Creates the scrollable list on the right side of the viewport made up of sideListElements\r\n// includes the completed special section as well\r\nfunction SideList(props) {\r\n    if (props.sections) {\r\n        return (\r\n            <div class='SideListContainer' id=\"theSideListContainer\">\r\n                {\r\n                    props.sections.map(section => {\r\n                        return <SideListElement\r\n                            {...section}\r\n                            key={section.identifier}\r\n                        />\r\n                    })\r\n                }\r\n                <SideListCompletedSection/>\r\n            </div>\r\n        )\r\n    }\r\n    else{\r\n        return null\r\n    }\r\n}\r\n\r\n\r\nexport default SideList","import \"../css/banner.css\"\r\n\r\n\r\n\r\n// This is the pink background for the sidebar.\r\nexport default function SideBarBackground(props) {\r\n\r\n    return (\r\n        <div class=\"SideBarBackground\">\r\n        </div>\r\n    )\r\n}","\r\n\r\n\r\n/*\r\n\r\n\r\nprops: {\r\n    text: string;\r\n    command: Function\r\n    parameters: string\r\n    icon: FontAwesomeIcon\r\n}\r\n*/\r\n\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\n\r\nexport default function PriorityMenuItem(props) {\r\n    // creates a button in the action menu with a command from props.\r\n    return (\r\n        <button onClick={() => props.command(props)} class=\"action-item\"\r\n                aria-label={\"This is the\" + props.text + \"button in the action menu, Press to perform the action.\" }>\r\n            { props.icon && <FontAwesomeIcon className = \"priorityIcon\" icon= {props.icon}/> }\r\n            <div class=\"action-text\">\r\n                <p> {props.text} </p>\r\n            </div>\r\n        </button>\r\n    )\r\n}\r\n\r\n","import \"../../css/prioritySortButton.css\"\r\nimport TaskDataController from \"../../modules/dataController/TaskDataController.js\"\r\nimport { faMinus, faSortAmountUpAlt, faSortAmountDownAlt } from \"@fortawesome/free-solid-svg-icons\"\r\nimport AppDataController from \"../../modules/dataController/AppDataController.js\"\r\nimport store from \"../../modules/dataController/store\";\r\nimport {connect} from \"react-redux\";\r\nimport PriorityMenuItem from \"./priorityMenuItem\";\r\n\r\n// This file is a bit of a doozy.\r\n// Sort type function gets the current sort type from the state.\r\n// the state gets this from the current selected section\r\n// This is used to show how the section is being sorted.\r\n\r\nfunction sortType(){\r\n    return(store.getState().selectedSection.sortType)\r\n}\r\n\r\n// Alphasort, and datesort and the rest, are all used to sort\r\n// by specific parameters. Because the options to sort\r\n// ascending/descending are there but only if already sorted\r\n// by that type, we then check if that's the option being chosen.\r\n\r\nfunction alphaSort() {\r\n    let sortValue = store.getState().selectedSection.sortType\r\n    if(sortValue === 1){\r\n        TaskDataController.setSectionPriority(2)\r\n    }\r\n    else{\r\n        TaskDataController.setSectionPriority(1)\r\n    }\r\n}\r\n\r\nfunction dateSort() {\r\n    let sortValue = store.getState().selectedSection.sortType\r\n    if(sortValue === 3){\r\n        TaskDataController.setSectionPriority(4)\r\n    }\r\n    else{\r\n        TaskDataController.setSectionPriority(3)\r\n    }\r\n}\r\n\r\nfunction prioritySort() {\r\n    let sortValue = store.getState().selectedSection.sortType\r\n    if(sortValue === 5){\r\n        TaskDataController.setSectionPriority(6)\r\n    }\r\n    else{\r\n        TaskDataController.setSectionPriority(5)\r\n    }\r\n}\r\n\r\n\r\n// Resets sorting, in case you do not want any sorting.\r\nfunction resetSort() {\r\n    console.log(sortType())\r\n    TaskDataController.setSectionPriority(7)\r\n}\r\n\r\n\r\n\r\n\r\n\r\n// Creates the priority sort menu, includes a list of options to choose from\r\n// includes a title as well to show what sorting is being used.\r\n\r\nfunction PriorityMenu(props, selectedSection) {\r\n\r\n    let menuItems = [\r\n        // Text, commands, and icons present in the action menu.\r\n        {text: \"Sort alphabetically\", command:alphaSort, icon: sortType() == 1 ? faSortAmountDownAlt: faSortAmountUpAlt},\r\n        {text: \"Sort by priority level\", command:prioritySort, icon: sortType() == 5 ? faSortAmountDownAlt: faSortAmountUpAlt},\r\n        {text: \"Sort by date created\", command: dateSort, icon: sortType() == 3 ? faSortAmountDownAlt: faSortAmountUpAlt},\r\n        {text: \"Reset Sort\", command: resetSort, icon: faMinus}\r\n    ]\r\n\r\n\r\n    function sortTitle(){\r\n        const currentSortType = store.getState().selectedSection.sortType\r\n        if (currentSortType === 7){\r\n            return \"not sorting\"\r\n        }\r\n        if (currentSortType === 6){\r\n            return \"Sorting by priority level descending\"\r\n        }\r\n        if (currentSortType === 5){\r\n            return \"Sorting by priority level ascending\"\r\n        }\r\n        if (currentSortType === 4){\r\n            return \"Sorting by date created ascending\"\r\n        }\r\n        if (currentSortType === 3){\r\n            return \"Sorting by date created descending\"\r\n        }\r\n        if (currentSortType === 2){\r\n            return \"Sorting in alphabetical order descending\"\r\n        }\r\n        if (currentSortType === 1){\r\n            return \"Sorting in alphabetical order ascending\"\r\n        }\r\n    }\r\n\r\n\r\n    // returns a component that contains the commands listed above.\r\n    return (\r\n        <button class='overlay'onClick= {AppDataController.hidePriorityMenu}\r\n                aria-label=\"Click here to exit the action menu.\">\r\n            <div class='priority-container'>\r\n                <div class ='priority-container-title'>{sortTitle()}</div>\r\n                { menuItems.map(menuItem => {\r\n                    return <PriorityMenuItem {...menuItem} key={menuItem.text}/>\r\n                })}\r\n            </div>\r\n        </button>\r\n\r\n    )\r\n}\r\n\r\nfunction mapStateToProps(state){\r\n    return{\r\n        selectedSection: store.getState().selectedSection,\r\n}}\r\n\r\nexport default connect(mapStateToProps)(PriorityMenu)","import \"./css/global.css\"\r\nimport \"typeface-roboto\"\r\nimport ActionButton from \"./components/Action Commands/ActionButton\";\r\nimport AppDataController from \"./modules/dataController/AppDataController\";\r\nimport Header from './components/Header';\r\n\r\nimport ActionMenu from \"./components/Action Commands/ActionMenu\";\r\nimport { connect } from \"react-redux\";\r\nimport SectionList from \"./components/newSection/SectionList\";\r\n\r\n\r\nimport Sidebar from \"./components/otherDisplays/sideBarList\";\r\nimport SideList from \"./components/otherDisplays/sideList\";\r\n\r\nimport SideBarBackground from \"./components/SideBarBackground\";\r\n\r\n\r\nimport {useCollection} from \"react-firebase-hooks/firestore\";\r\nimport {database} from \"./modules/dataController/firestore\"\r\nimport {collectionName} from \"./modules/dataController/firestore\";\r\nimport PriorityMenu from \"./components/newSection/priorityMenu\";\r\n\r\n\r\nfunction App({menuIsActive, priorityMenuIsActive}) {\r\n    // gets different menu's status's from the redux state\r\n    // Undo is not used at all.\r\n\r\n\r\n    // Get the sections information from firestore\r\n    const query = database.collection(collectionName);\r\n    const [value, loading, error] = useCollection(query);\r\n    let fireStoreList = null;\r\n    if (value) {\r\n        fireStoreList = value.docs.map((doc) => {\r\n            return {...doc.data()}});\r\n\r\n    }\r\n\r\n\r\n// Returns both a widescreen format for tablets/desktops/landscape mode and a portrait mode\r\n    // depending on screen orientation.\r\n  return (\r\n    <div class='hello'>\r\n      <Header/>\r\n      <SideBarBackground/>\r\n        <div className=\"wideScreenDisplay\">\r\n            <div className=\"Sidebar\"><Sidebar sections = {fireStoreList}/></div>\r\n            <div className=\"Sidelist\"><SideList sections = {fireStoreList}/></div>\r\n\r\n        </div>\r\n        <SectionList sections = {fireStoreList}/>\r\n      { menuIsActive && <ActionMenu/> }\r\n        { priorityMenuIsActive && <PriorityMenu/>}\r\n      <ActionButton/>\r\n    </div>\r\n  );\r\n}\r\n\r\n// Getting those stuffs.\r\nfunction mapToState(state) {\r\n\r\n        return {\r\n            menuIsActive: AppDataController.menuIsActive(),\r\n            showUndo: AppDataController.undoIsActive(),\r\n            priorityMenuIsActive: AppDataController.priorityMenuIsActive(),\r\n\r\n        }\r\n}\r\n\r\nexport default connect(mapToState)(App)","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport { Provider } from \"react-redux\"\nimport store from \"./modules/dataController/store.js\"\n\nReactDOM.render(\n  <Provider store={store}>\n    <App/>\n  </Provider>,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}